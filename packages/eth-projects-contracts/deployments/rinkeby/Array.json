{
  "address": "0xc1694e1FA02247DEB49C9BDA378aFbd0190fC9b2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "a",
          "type": "string[]"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x765543ea5eca39dd7ea7d5501e0800ca97e208ffc251da6f37e0ccb466b608b6",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0xc1694e1FA02247DEB49C9BDA378aFbd0190fC9b2",
    "transactionIndex": 34,
    "gasUsed": "256733",
    "logsBloom": "0x
    "blockHash": "0xa1bdb35573163f236c72783a793a413317454059c93674fcb952497157b149a5",
    "transactionHash": "0x765543ea5eca39dd7ea7d5501e0800ca97e208ffc251da6f37e0ccb466b608b6",
    "logs": [],
    "blockNumber": 10462395,
    "cumulativeGasUsed": "15980636",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a729ebf854c20c760b44a22dc9354a8f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"a\",\"type\":\"string[]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/Array.sol\":\"Array\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/lib/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nlibrary Array {\\n    function join(string[] memory a) public pure returns (string memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array in solidity).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n            }\\n\\n            mstore(tempBytes, stringLength)\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return string(tempBytes);\\n    }\\n}\\n\",\"keccak256\":\"0x0d8de398f0457cfbe77721a97d7a46d4da6349233e24566bfd174b84587104fb\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6103af61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80639bce4e141461003a575b600080fd5b61004d6100483660046102c4565b610063565b60405161005a9190610361565b60405180910390f35b60608060405190506020810183516020850160208202810191506000815b838110156100d55780518051928301926020918201918104601f821615150160005b818110156100c5578351602082028a01526020840193506001810190506100a3565b5050959095019450602001610081565b5084525050601f01601f191660405292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561013f5761013f6100ea565b6040525050565b600061015160405190565b905061015d8282610119565b919050565b600067ffffffffffffffff82111561017c5761017c6100ea565b5060209081020190565b600067ffffffffffffffff8211156101a0576101a06100ea565b601f19601f83011660200192915050565b82818337506000910152565b60006101d06101cb84610186565b610146565b9050828152602081018484840111156101eb576101eb600080fd5b6101f68482856101b1565b509392505050565b600082601f83011261021257610212600080fd5b81356102228482602086016101bd565b949350505050565b60006102386101cb84610162565b8381529050602080820190840283018581111561025757610257600080fd5b835b8181101561029657803567ffffffffffffffff81111561027b5761027b600080fd5b850161028788826101fe565b84525060209283019201610259565b5050509392505050565b600082601f8301126102b4576102b4600080fd5b813561022284826020860161022a565b6000602082840312156102d9576102d9600080fd5b813567ffffffffffffffff8111156102f3576102f3600080fd5b610222848285016102a0565b60005b8381101561031a578181015183820152602001610302565b83811115610329576000848401525b50505050565b6000610339825190565b8084526020840193506103508185602086016102ff565b601f01601f19169290920192915050565b60208082528101610372818461032f565b939250505056fea2646970667358221220160cbc09ed6f801ce0ce640ce6f9058868814e9fc531227619d045f17a601a0664736f6c634300080c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80639bce4e141461003a575b600080fd5b61004d6100483660046102c4565b610063565b60405161005a9190610361565b60405180910390f35b60608060405190506020810183516020850160208202810191506000815b838110156100d55780518051928301926020918201918104601f821615150160005b818110156100c5578351602082028a01526020840193506001810190506100a3565b5050959095019450602001610081565b5084525050601f01601f191660405292915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff8211171561013f5761013f6100ea565b6040525050565b600061015160405190565b905061015d8282610119565b919050565b600067ffffffffffffffff82111561017c5761017c6100ea565b5060209081020190565b600067ffffffffffffffff8211156101a0576101a06100ea565b601f19601f83011660200192915050565b82818337506000910152565b60006101d06101cb84610186565b610146565b9050828152602081018484840111156101eb576101eb600080fd5b6101f68482856101b1565b509392505050565b600082601f83011261021257610212600080fd5b81356102228482602086016101bd565b949350505050565b60006102386101cb84610162565b8381529050602080820190840283018581111561025757610257600080fd5b835b8181101561029657803567ffffffffffffffff81111561027b5761027b600080fd5b850161028788826101fe565b84525060209283019201610259565b5050509392505050565b600082601f8301126102b4576102b4600080fd5b813561022284826020860161022a565b6000602082840312156102d9576102d9600080fd5b813567ffffffffffffffff8111156102f3576102f3600080fd5b610222848285016102a0565b60005b8381101561031a578181015183820152602001610302565b83811115610329576000848401525b50505050565b6000610339825190565b8084526020840193506103508185602086016102ff565b601f01601f19169290920192915050565b60208082528101610372818461032f565b939250505056fea2646970667358221220160cbc09ed6f801ce0ce640ce6f9058868814e9fc531227619d045f17a601a0664736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}