{
  "address": "0xc8AD48942deb7BAa9B15665aa72656A259277eaF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "coordinate",
          "type": "uint256"
        }
      ],
      "name": "CoordinatesOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "x",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "y",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "width",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "height",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "fillIndex",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct Rect[]",
                  "name": "rects",
                  "type": "tuple[]"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct Trait[]",
              "name": "traits",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct Characteristic",
          "name": "characteristic",
          "type": "tuple"
        }
      ],
      "name": "encodeCharacteristic",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "traits",
              "type": "bytes"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct CharacteristicEncoded",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint32",
                          "name": "x",
                          "type": "uint32"
                        },
                        {
                          "internalType": "uint32",
                          "name": "y",
                          "type": "uint32"
                        },
                        {
                          "internalType": "uint32",
                          "name": "width",
                          "type": "uint32"
                        },
                        {
                          "internalType": "uint32",
                          "name": "height",
                          "type": "uint32"
                        },
                        {
                          "internalType": "uint32",
                          "name": "fillIndex",
                          "type": "uint32"
                        }
                      ],
                      "internalType": "struct Rect[]",
                      "name": "rects",
                      "type": "tuple[]"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Trait[]",
                  "name": "traits",
                  "type": "tuple[]"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct Characteristic[]",
              "name": "characteristics",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct Collection",
          "name": "collection",
          "type": "tuple"
        }
      ],
      "name": "encodeCollection",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "names",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "traits",
              "type": "bytes"
            }
          ],
          "internalType": "struct CollectionEncoded",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "x",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "y",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "width",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "height",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fillIndex",
              "type": "uint32"
            }
          ],
          "internalType": "struct Rect",
          "name": "rect",
          "type": "tuple"
        }
      ],
      "name": "encodeRect",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "x",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "y",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "width",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "height",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "fillIndex",
                  "type": "uint32"
                }
              ],
              "internalType": "struct Rect[]",
              "name": "rects",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct Trait",
          "name": "trait",
          "type": "tuple"
        }
      ],
      "name": "encodeTrait",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rects",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct TraitEncoded",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x8f4201cb40faeaf5a3e2852c219506c5e643d8c0368e752e48353612e02ce12f",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0xc8AD48942deb7BAa9B15665aa72656A259277eaF",
    "transactionIndex": 34,
    "gasUsed": "1328923",
    "logsBloom": "0x
    "blockHash": "0x0e1bbc4bd3e98a0fca0952549182d62f5337e0509bae7b88b9ac1961e6780be8",
    "transactionHash": "0x8f4201cb40faeaf5a3e2852c219506c5e643d8c0368e752e48353612e02ce12f",
    "logs": [],
    "blockNumber": 10543278,
    "cumulativeGasUsed": "5392059",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "282dc597efcc8dd7f472141af3b4cd89",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coordinate\",\"type\":\"uint256\"}],\"name\":\"CoordinatesOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"x\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"y\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct Rect[]\",\"name\":\"rects\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Characteristic\",\"name\":\"characteristic\",\"type\":\"tuple\"}],\"name\":\"encodeCharacteristic\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"traits\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct CharacteristicEncoded\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"x\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"y\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct Rect[]\",\"name\":\"rects\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Characteristic[]\",\"name\":\"characteristics\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct Collection\",\"name\":\"collection\",\"type\":\"tuple\"}],\"name\":\"encodeCollection\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"names\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"traits\",\"type\":\"bytes\"}],\"internalType\":\"struct CollectionEncoded\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"x\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"y\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct Rect\",\"name\":\"rect\",\"type\":\"tuple\"}],\"name\":\"encodeRect\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"x\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"y\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct Rect[]\",\"name\":\"rects\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Trait\",\"name\":\"trait\",\"type\":\"tuple\"}],\"name\":\"encodeTrait\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rects\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct TraitEncoded\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Clement Walter <clement0walter@gmail.com>\",\"kind\":\"dev\",\"methods\":{\"encodeCharacteristic((((uint32,uint32,uint32,uint32,uint32)[],string)[],string))\":{\"details\":\"Use this function to encode a characteristic, i.e. a list of traits belongings to the same group. Note that       there is no intrinsic difference between a characteristic and a whole collection (all the traits of all the       characteristics) but it's how it's used and expected today so we keep the wording here.       Use this off-chain and push the result using RendererCommon.storeBytes\",\"params\":{\"characteristic\":\"The list of Trait constituting the characteristic.\"},\"returns\":{\"_0\":\"The encoded characteristic (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)\"}},\"encodeCollection(((((uint32,uint32,uint32,uint32,uint32)[],string)[],string)[],string))\":{\"details\":\"Use this function to encode a full collection, i.e. a list of characteristics.       Use this off-chain and push the result using RendererCommon.storeBytes\",\"params\":{\"collection\":\"The list of Characteristic constituting the collection. The description is just returned in the        new object and can be used to store the description of the collection.\"},\"returns\":{\"_0\":\"The encoded collection (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)\"}},\"encodeRect((uint32,uint32,uint32,uint32,uint32))\":{\"details\":\"Use this function to encode a single <rect> as expected by the renderer. Use this off-chain!\",\"params\":{\"rect\":\"The <rect> to encode\"},\"returns\":{\"_0\":\"The encoded rectangle as a bytes4\"}},\"encodeTrait(((uint32,uint32,uint32,uint32,uint32)[],string))\":{\"details\":\"Use this function to encode a _trait_, i.e. a list of <rect>s with a name, as expected by the renderer.       Use this off-chain!\",\"params\":{\"trait\":\"The list of <rect>s to encode with a given name; should be shorter than 32 char.\"},\"returns\":{\"_0\":\"The encoded list of rectangle\"}}},\"title\":\"RectEncoder   This library can be used (off-chain !) to encode a collection to be deployed and render on-chain images with the   RectRenderer.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/renderers/RectEncoder.sol\":\"RectEncoder\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/lib/renderers/RectEncoder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\nerror CoordinatesOutOfRange(uint256 coordinate);\\n\\nstruct Rect {\\n    uint32 x;\\n    uint32 y;\\n    uint32 width;\\n    uint32 height;\\n    uint32 fillIndex;\\n}\\n\\nstruct Trait {\\n    Rect[] rects;\\n    string name;\\n}\\n\\nstruct TraitEncoded {\\n    bytes rects;\\n    string name;\\n}\\n\\nstruct Characteristic {\\n    Trait[] traits;\\n    string name;\\n}\\n\\nstruct CharacteristicEncoded {\\n    bytes traits;\\n    string[] names;\\n    string name;\\n}\\n\\nstruct Collection {\\n    Characteristic[] characteristics;\\n    string description;\\n}\\n\\nstruct CollectionEncoded {\\n    bytes names;\\n    bytes traits;\\n}\\n\\n/**  @title RectEncoder\\n *\\n *   This library can be used (off-chain !) to encode a collection to be deployed and render on-chain images with the\\n *   RectRenderer.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\ncontract RectEncoder {\\n    using Array for string[];\\n    using Array for bytes[];\\n    using Array for uint16[];\\n    using Array for bytes4[];\\n\\n    /** @dev Use this function to encode a single <rect> as expected by the renderer. Use this off-chain!\\n     *\\n     * @param rect The <rect> to encode\\n     * @return The encoded rectangle as a bytes4\\n     */\\n    function encodeRect(Rect memory rect) public pure returns (bytes4) {\\n        // each coordinates should use only 6 bits and is consequently stored like 00nnnnnn\\n        if (rect.x > 63) revert CoordinatesOutOfRange(rect.x);\\n        if (rect.y > 63) revert CoordinatesOutOfRange(rect.y);\\n        if (rect.width > 63) revert CoordinatesOutOfRange(rect.width);\\n        if (rect.height > 63) revert CoordinatesOutOfRange(rect.height);\\n        return\\n            bytes4(rect.x << 26) |\\n            bytes4(rect.y << 20) |\\n            bytes4(rect.width << 14) |\\n            bytes4(rect.height << 8) |\\n            bytes4(rect.fillIndex);\\n    }\\n\\n    /** @dev Use this function to encode a _trait_, i.e. a list of <rect>s with a name, as expected by the renderer.\\n     *       Use this off-chain!\\n     *\\n     * @param trait The list of <rect>s to encode with a given name; should be shorter than 32 char.\\n     * @return The encoded list of rectangle\\n     */\\n    function encodeTrait(Trait memory trait)\\n        public\\n        pure\\n        returns (TraitEncoded memory)\\n    {\\n        bytes4[] memory rects = new bytes4[](trait.rects.length);\\n        for (uint256 i = 0; i < trait.rects.length; i++) {\\n            rects[i] = encodeRect(trait.rects[i]);\\n        }\\n        return TraitEncoded(rects.join(), trait.name);\\n    }\\n\\n    /** @dev Use this function to encode a characteristic, i.e. a list of traits belongings to the same group. Note that\\n     *       there is no intrinsic difference between a characteristic and a whole collection (all the traits of all the\\n     *       characteristics) but it's how it's used and expected today so we keep the wording here.\\n     *       Use this off-chain and push the result using RendererCommon.storeBytes\\n     *  @param characteristic The list of Trait constituting the characteristic.\\n     *  @return The encoded characteristic (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)\\n     */\\n    function encodeCharacteristic(Characteristic memory characteristic)\\n        public\\n        pure\\n        returns (CharacteristicEncoded memory)\\n    {\\n        bytes[] memory rects = new bytes[](characteristic.traits.length);\\n        string[] memory names = new string[](characteristic.traits.length);\\n        uint16[] memory lengths = new uint16[](\\n            characteristic.traits.length + 1\\n        );\\n        uint16 cumSum = 4 +\\n            2 *\\n            uint16(characteristic.traits.length % type(uint16).max); // 2 extra bytes for storing start & end for each trait\\n        for (uint256 i = 0; i < characteristic.traits.length; i++) {\\n            TraitEncoded memory tmp = encodeTrait(characteristic.traits[i]);\\n            rects[i] = tmp.rects;\\n            names[i] = tmp.name;\\n            lengths[i] = cumSum;\\n            cumSum += uint16(rects[i].length % type(uint16).max);\\n        }\\n        lengths[characteristic.traits.length] = cumSum;\\n        return (\\n            CharacteristicEncoded(\\n                bytes.concat(\\n                    bytes2(\\n                        uint16(\\n                            (characteristic.traits.length + 1) %\\n                                type(uint16).max\\n                        )\\n                    ),\\n                    lengths.join(),\\n                    rects.join()\\n                ),\\n                names,\\n                characteristic.name\\n            )\\n        );\\n    }\\n\\n    /** @dev Use this function to encode a full collection, i.e. a list of characteristics.\\n     *       Use this off-chain and push the result using RendererCommon.storeBytes\\n     *\\n     * @param collection The list of Characteristic constituting the collection. The description is just returned in the\\n     *        new object and can be used to store the description of the collection.\\n     * @return The encoded collection (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)\\n     */\\n    function encodeCollection(Collection memory collection)\\n        public\\n        pure\\n        returns (CollectionEncoded memory)\\n    {\\n        bytes[] memory traits = new bytes[](collection.characteristics.length);\\n        string[] memory characteristicNames = new string[](\\n            collection.characteristics.length\\n        );\\n        string[][] memory traitNames = new string[][](\\n            collection.characteristics.length\\n        );\\n        uint16[] memory lengths = new uint16[](\\n            collection.characteristics.length\\n        );\\n        // init characteristic pointer shift with 2 bytes for length + 2 bytes per characteristic\\n        uint16 cumSum = 2 +\\n            2 *\\n            uint16(collection.characteristics.length % type(uint16).max);\\n        for (uint256 i = 0; i < collection.characteristics.length; i++) {\\n            CharacteristicEncoded memory tmp = encodeCharacteristic(\\n                collection.characteristics[i]\\n            );\\n            lengths[i] = cumSum;\\n            traits[i] = tmp.traits;\\n            traitNames[i] = tmp.names;\\n            characteristicNames[i] = tmp.name;\\n            cumSum += uint16(traits[i].length % type(uint16).max);\\n        }\\n        return (\\n            CollectionEncoded(\\n                abi.encode(\\n                    collection.description,\\n                    characteristicNames,\\n                    traitNames\\n                ),\\n                bytes.concat(\\n                    bytes2(\\n                        uint16(\\n                            collection.characteristics.length % type(uint16).max\\n                        )\\n                    ),\\n                    lengths.join(),\\n                    traits.join()\\n                )\\n            )\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x2055ba3554861bd21f9dd645706e5f4349e61d336536d59d178f9db27b48e997\",\"license\":\"MIT\"},\"contracts/lib/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com>\\n *\\n * @notice An attempt at implementing some of the widely used javascript's Array functions in solidity.\\n */\\npragma solidity ^0.8.12;\\n\\nerror EmptyArray();\\nerror GlueOutOfBounds(uint256 length);\\n\\nlibrary Array {\\n    function join(string[] memory a, string memory glue)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return string(_joinReferenceType(inputPointer, gluePointer));\\n    }\\n\\n    function join(string[] memory a) public pure returns (string memory) {\\n        return join(a, \\\"\\\");\\n    }\\n\\n    function join(bytes[] memory a, bytes memory glue)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return _joinReferenceType(inputPointer, gluePointer);\\n    }\\n\\n    function join(bytes[] memory a) public pure returns (bytes memory) {\\n        return join(a, bytes(\\\"\\\"));\\n    }\\n\\n    function join(bytes2[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 0);\\n    }\\n\\n    /// @dev Join the underlying array of bytes2 to a string.\\n    function join(uint16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 256 - 16);\\n    }\\n\\n    function join(bytes3[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 3, 0);\\n    }\\n\\n    function join(bytes4[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 4, 0);\\n    }\\n\\n    function join(bytes8[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 8, 0);\\n    }\\n\\n    function join(bytes16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 16, 0);\\n    }\\n\\n    function join(bytes32[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 32, 0);\\n    }\\n\\n    function _joinValueType(\\n        uint256 a,\\n        uint256 typeLength,\\n        uint256 shiftLeft\\n    ) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Initialize the length of the final bytes: length is typeLength x inputLength (array of bytes4)\\n            mstore(tempBytes, mul(inputLength, typeLength))\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Iterate over all bytes4\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentSlot := shl(shiftLeft, mload(pointer))\\n                mstore(memoryPointer, currentSlot)\\n                memoryPointer := add(memoryPointer, typeLength)\\n            }\\n\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n\\n    function _joinReferenceType(uint256 inputPointer, uint256 gluePointer)\\n        public\\n        pure\\n        returns (bytes memory tempBytes)\\n    {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load glue\\n            let glueLength := mload(gluePointer)\\n            if gt(glueLength, 0x20) {\\n                revert(gluePointer, 0x20)\\n            }\\n            let glue := mload(add(gluePointer, 0x20))\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(inputPointer)\\n            let inputData := add(inputPointer, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n                mstore(memoryPointer, glue)\\n                memoryPointer := add(memoryPointer, glueLength)\\n            }\\n\\n            mstore(\\n                tempBytes,\\n                add(stringLength, mul(sub(inputLength, 1), glueLength))\\n            )\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb288e323d09e12efda2e53871a119c33ef9f5eb9b7a16f7f2f3a01fa61cb3ca8\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80632bdda71214610051578063413466e61461007a578063ae0b7a351461009a578063c25c9403146100ad575b600080fd5b61006461005f366004610c9b565b6100cd565b6040516100719190610cee565b60405180910390f35b61008d610088366004610eba565b6101f8565b6040516100719190610f92565b61008d6100a8366004611158565b610390565b6100c06100bb366004611193565b6107bb565b604051610071919061128a565b6000603f826000015163ffffffff161115610107578151604051630b51c4b160e41b81526100fe91906004016112b9565b60405180910390fd5b603f826020015163ffffffff161115610139578160200151604051630b51c4b160e41b81526004016100fe91906112b9565b603f826040015163ffffffff16111561016b578160400151604051630b51c4b160e41b81526004016100fe91906112b9565b603f826060015163ffffffff16111561019d578160600151604051630b51c4b160e41b81526004016100fe91906112b9565b816080015160e01b6008836060015163ffffffff16901b60e01b600e846040015163ffffffff16901b60e01b6014856020015163ffffffff16901b60e01b601a866000015163ffffffff16901b60e01b171717179050919050565b604080518082019091526060808252602082015281515160009067ffffffffffffffff81111561022a5761022a610b97565b604051908082528060200260200182016040528015610253578160200160208202803683370190505b50905060005b8351518110156102de576102898460000151828151811061027c5761027c6112c7565b60200260200101516100cd565b82828151811061029b5761029b6112c7565b7fffffffff0000000000000000000000000000000000000000000000000000000090921660209283029190910190910152806102d6816112f3565b915050610259565b5060408051808201918290527f2fdc8c20000000000000000000000000000000000000000000000000000000009091528073__$3d939fd680257e7df63fc3436eced304ff$__632fdc8c206103368560448501611384565b600060405180830381865af4158015610353573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261037b91908101906113ed565b81526020018460200151815250915050919050565b604080518082019091526060808252602082015281515160009067ffffffffffffffff8111156103c2576103c2610b97565b6040519080825280602002602001820160405280156103f557816020015b60608152602001906001900390816103e05790505b509050600083600001515167ffffffffffffffff81111561041857610418610b97565b60405190808252806020026020018201604052801561044b57816020015b60608152602001906001900390816104365790505b509050600084600001515167ffffffffffffffff81111561046e5761046e610b97565b6040519080825280602002602001820160405280156104a157816020015b606081526020019060019003908161048c5790505b509050600085600001515167ffffffffffffffff8111156104c4576104c4610b97565b6040519080825280602002602001820160405280156104ed578160200160208202803683370190505b508651519091506000906105049061ffff9061143e565b61050f906002611452565b61051a90600261147f565b905060005b87515181101561062c57600061055189600001518381518110610544576105446112c7565b60200260200101516107bb565b905082848381518110610566576105666112c7565b602002602001019061ffff16908161ffff16815250508060000151878381518110610593576105936112c7565b602002602001018190525080602001518583815181106105b5576105b56112c7565b602002602001018190525080604001518683815181106105d7576105d76112c7565b602002602001018190525061ffff80168783815181106105f9576105f96112c7565b60200260200101515161060c919061143e565b610616908461147f565b9250508080610624906112f3565b91505061051f565b50604080518082019091526020880151819061064d90878760608501611564565b604051602081830303815290604052815260200161ffff8016896000015151610676919061143e565b60f01b8473__$3d939fd680257e7df63fc3436eced304ff$__63f25f142d90916040518263ffffffff1660e01b81526004016106b291906115ee565b600060405180830381865af41580156106cf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106f791908101906113ed565b6040517f2a7f1c0400000000000000000000000000000000000000000000000000000000815273__$3d939fd680257e7df63fc3436eced304ff$__90632a7f1c0490610747908c90600401611657565b600060405180830381865af4158015610764573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078c91908101906113ed565b60405160200161079e939291906116b2565b60408051601f198184030181529190529052979650505050505050565b6107df60405180606001604052806060815260200160608152602001606081525090565b81515160009067ffffffffffffffff8111156107fd576107fd610b97565b60405190808252806020026020018201604052801561083057816020015b606081526020019060019003908161081b5790505b509050600083600001515167ffffffffffffffff81111561085357610853610b97565b60405190808252806020026020018201604052801561088657816020015b60608152602001906001900390816108715790505b5084515190915060009061089b9060016116d5565b67ffffffffffffffff8111156108b3576108b3610b97565b6040519080825280602002602001820160405280156108dc578160200160208202803683370190505b508551519091506000906108f39061ffff9061143e565b6108fe906002611452565b61090990600461147f565b905060005b8651518110156109f157600061094088600001518381518110610933576109336112c7565b60200260200101516101f8565b90508060000151868381518110610959576109596112c7565b6020026020010181905250806020015185838151811061097b5761097b6112c7565b602002602001018190525082848381518110610999576109996112c7565b61ffff928316602091820292909201015286518790849081106109be576109be6112c7565b6020026020010151516109d1919061143e565b6109db908461147f565b92505080806109e9906112f3565b91505061090e565b50808287600001515181518110610a0a57610a0a6112c7565b61ffff9283166020918202929092010152604080516060810190915287515190918291610a389060016116d5565b610a42919061143e565b60f01b8473__$3d939fd680257e7df63fc3436eced304ff$__63f25f142d90916040518263ffffffff1660e01b8152600401610a7e91906115ee565b600060405180830381865af4158015610a9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ac391908101906113ed565b6040517f2a7f1c0400000000000000000000000000000000000000000000000000000000815273__$3d939fd680257e7df63fc3436eced304ff$__90632a7f1c0490610b13908b90600401611657565b600060405180830381865af4158015610b30573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b5891908101906113ed565b604051602001610b6a939291906116b2565b60405160208183030381529060405281526020018481526020018760200151815250945050505050919050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610bd357610bd3610b97565b6040525050565b6000610be560405190565b9050610bf18282610bad565b919050565b63ffffffff81168114610c0857600080fd5b50565b8035610c1681610bf6565b92915050565b600060a08284031215610c3157610c31600080fd5b610c3b60a0610bda565b90506000610c498484610c0b565b908201526020610c5b84848301610c0b565b908201526040610c6d84848301610c0b565b908201526060610c7f84848301610c0b565b908201526080610c9184848301610c0b565b9082015292915050565b600060a08284031215610cb057610cb0600080fd5b6000610cbc8484610c1c565b949350505050565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b82525050565b60208101610c168284610cc4565b600067ffffffffffffffff821115610d1657610d16610b97565b5060209081020190565b6000610d33610d2e84610cfc565b610bda565b83815290506020810160a08402830185811115610d5257610d52600080fd5b835b81811015610d7657610d668782610c1c565b835260209092019160a001610d54565b5050509392505050565b600082601f830112610d9457610d94600080fd5b8135610cbc848260208601610d20565b600067ffffffffffffffff821115610dbe57610dbe610b97565b601f19601f83011660200192915050565b82818337506000910152565b6000610de9610d2e84610da4565b905082815260208101848484011115610e0457610e04600080fd5b610e0f848285610dcf565b509392505050565b600082601f830112610e2b57610e2b600080fd5b8135610cbc848260208601610ddb565b600060408284031215610e5057610e50600080fd5b610e5a6040610bda565b9050813567ffffffffffffffff811115610e7657610e76600080fd5b610e8284828501610d80565b825250602082013567ffffffffffffffff811115610ea257610ea2600080fd5b610eae84828501610e17565b60208301525092915050565b600060208284031215610ecf57610ecf600080fd5b813567ffffffffffffffff811115610ee957610ee9600080fd5b610cbc84828501610e3b565b60005b83811015610f10578181015183820152602001610ef8565b83811115610f1f576000848401525b50505050565b6000610f2f825190565b808452602084019350610f46818560208601610ef5565b601f01601f19169290920192915050565b8051604080845260009190840190610f6f8282610f25565b91505060208301518482036020860152610f898282610f25565b95945050505050565b60208082528101610fa38184610f57565b9392505050565b6000610fb8610d2e84610cfc565b83815290506020808201908402830185811115610fd757610fd7600080fd5b835b81811015610d7657803567ffffffffffffffff811115610ffb57610ffb600080fd5b85016110078882610e3b565b84525060209283019201610fd9565b600082601f83011261102a5761102a600080fd5b8135610cbc848260208601610faa565b60006040828403121561104f5761104f600080fd5b6110596040610bda565b9050813567ffffffffffffffff81111561107557611075600080fd5b610e8284828501611016565b600061108f610d2e84610cfc565b838152905060208082019084028301858111156110ae576110ae600080fd5b835b81811015610d7657803567ffffffffffffffff8111156110d2576110d2600080fd5b85016110de888261103a565b845250602092830192016110b0565b600082601f83011261110157611101600080fd5b8135610cbc848260208601611081565b60006040828403121561112657611126600080fd5b6111306040610bda565b9050813567ffffffffffffffff81111561114c5761114c600080fd5b610e82848285016110ed565b60006020828403121561116d5761116d600080fd5b813567ffffffffffffffff81111561118757611187600080fd5b610cbc84828501611111565b6000602082840312156111a8576111a8600080fd5b813567ffffffffffffffff8111156111c2576111c2600080fd5b610cbc8482850161103a565b6000610fa38383610f25565b60006111e4825190565b808452602084019350836020820285016111fe8560200190565b60005b84811015611232578383038852815161121a84826111ce565b93505060208201602098909801979150600101611201565b50909695505050505050565b80516060808452600091908401906112568282610f25565b9150506020830151848203602086015261127082826111da565b91505060408301518482036040860152610f898282610f25565b60208082528101610fa3818461123e565b6000610c166112ad63ffffffff841681565b90565b610ce88161129b565b60208101610c1682846112b0565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415611325576113256112dd565b5060010190565b6113368282610cc4565b5060200190565b6000611347825190565b808452602093840193830160005b8281101561137a578151611369878261132c565b965050602082019150600101611355565b5093949350505050565b60208082528101610fa3818461133d565b60006113a3610d2e84610da4565b9050828152602081018484840111156113be576113be600080fd5b610e0f848285610ef5565b600082601f8301126113dd576113dd600080fd5b8151610cbc848260208601611395565b60006020828403121561140257611402600080fd5b815167ffffffffffffffff81111561141c5761141c600080fd5b610cbc848285016113c9565b634e487b7160e01b600052601260045260246000fd5b60008261144d5761144d611428565b500690565b61ffff8116905061ffff8216915060008161ffff048311821515161561147a5761147a6112dd565b500290565b61ffff8116905061ffff8216915060008261ffff038211156114a3576114a36112dd565b500190565b60006114b2825190565b808452602084019350836020820285016114cc8560200190565b60005b8481101561123257838303885281516114e884826111ce565b935050602082016020989098019791506001016114cf565b6000610fa383836111da565b6000611516825190565b808452602084019350836020820285016115308560200190565b60005b84811015611232578383038852815161154c8482611500565b93505060208201602098909801979150600101611533565b606080825281016115758186610f25565b9050818103602083015261158981856114a8565b90508181036040830152610f89818461150c565b61ffff8116610ce8565b611336828261159d565b60006115bb825190565b808452602093840193830160005b8281101561137a5781516115dd87826115a7565b9650506020820191506001016115c9565b60208082528101610fa381846115b1565b6000611609825190565b808452602084019350836020820285016116238560200190565b60005b84811015611232578383038852815161163f84826111ce565b93505060208201602098909801979150600101611626565b60208082528101610fa381846115ff565b7fffff0000000000000000000000000000000000000000000000000000000000008116610ce8565b600061169a825190565b6116a8818560208601610ef5565b9290920192915050565b6116bc8185611668565b6002016116c98184611690565b9050610cbc8183611690565b600082198211156114a3576114a36112dd56fea264697066735822122076772c16ec575dc3a2f7a1f0d8bc1d2f2ff2d9e53aeb66ab62ef02a484185cff64736f6c634300080c0033",
  "libraries": {
    "Array": "0x1FA6A2152871D5A4D1f56511110C9a353CA48339"
  },
  "devdoc": {
    "author": "Clement Walter <clement0walter@gmail.com>",
    "kind": "dev",
    "methods": {
      "encodeCharacteristic((((uint32,uint32,uint32,uint32,uint32)[],string)[],string))": {
        "details": "Use this function to encode a characteristic, i.e. a list of traits belongings to the same group. Note that       there is no intrinsic difference between a characteristic and a whole collection (all the traits of all the       characteristics) but it's how it's used and expected today so we keep the wording here.       Use this off-chain and push the result using RendererCommon.storeBytes",
        "params": {
          "characteristic": "The list of Trait constituting the characteristic."
        },
        "returns": {
          "_0": "The encoded characteristic (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)"
        }
      },
      "encodeCollection(((((uint32,uint32,uint32,uint32,uint32)[],string)[],string)[],string))": {
        "details": "Use this function to encode a full collection, i.e. a list of characteristics.       Use this off-chain and push the result using RendererCommon.storeBytes",
        "params": {
          "collection": "The list of Characteristic constituting the collection. The description is just returned in the        new object and can be used to store the description of the collection."
        },
        "returns": {
          "_0": "The encoded collection (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)"
        }
      },
      "encodeRect((uint32,uint32,uint32,uint32,uint32))": {
        "details": "Use this function to encode a single <rect> as expected by the renderer. Use this off-chain!",
        "params": {
          "rect": "The <rect> to encode"
        },
        "returns": {
          "_0": "The encoded rectangle as a bytes4"
        }
      },
      "encodeTrait(((uint32,uint32,uint32,uint32,uint32)[],string))": {
        "details": "Use this function to encode a _trait_, i.e. a list of <rect>s with a name, as expected by the renderer.       Use this off-chain!",
        "params": {
          "trait": "The list of <rect>s to encode with a given name; should be shorter than 32 char."
        },
        "returns": {
          "_0": "The encoded list of rectangle"
        }
      }
    },
    "title": "RectEncoder   This library can be used (off-chain !) to encode a collection to be deployed and render on-chain images with the   RectRenderer.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}