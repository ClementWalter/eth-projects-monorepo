{
  "address": "0x91F59E8d53061DD2F7C4a405984D9a4297C54A0C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        }
      ],
      "name": "BytesStored",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DATA_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUMBER_SIGN",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUOTE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPACE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAG_END",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAG_START",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "XMLNS_HEADER",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "names",
          "type": "bytes"
        }
      ],
      "name": "decodeNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "characteristicNames",
          "type": "string[]"
        },
        {
          "internalType": "string[][]",
          "name": "traitNames",
          "type": "string[][]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        }
      ],
      "name": "decodeNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "characteristicNames",
          "type": "string[]"
        },
        {
          "internalType": "string[][]",
          "name": "traitNames",
          "type": "string[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        }
      ],
      "name": "encodePalette",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "palette",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFill",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFill",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        }
      ],
      "name": "getPalette",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "palette",
          "type": "bytes"
        }
      ],
      "name": "getPalette",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "items",
          "type": "uint256[]"
        }
      ],
      "name": "tokenAttributes",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "trait_type",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "value",
              "type": "string"
            }
          ],
          "internalType": "struct Attribute[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6059732368c4c17427789ae5f4f67719c647dc3142423c37ae3b2e9162188e70",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0x91F59E8d53061DD2F7C4a405984D9a4297C54A0C",
    "transactionIndex": 6,
    "gasUsed": "1288495",
    "logsBloom": "0x
    "blockHash": "0xe0ee6dc68ee8813087f0ee9d308b390105d3328f7c34e4314d833ea1d172ac16",
    "transactionHash": "0x6059732368c4c17427789ae5f4f67719c647dc3142423c37ae3b2e9162188e70",
    "logs": [],
    "blockNumber": 10545044,
    "cumulativeGasUsed": "5180723",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "0d61679bf3f7c8b776254ac5ea82c9f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"}],\"name\":\"BytesStored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DATA_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_SIGN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUOTE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPACE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XMLNS_HEADER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"names\",\"type\":\"bytes\"}],\"name\":\"decodeNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"characteristicNames\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"traitNames\",\"type\":\"string[][]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"}],\"name\":\"decodeNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"characteristicNames\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"traitNames\",\"type\":\"string[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"}],\"name\":\"encodePalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"palette\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFill\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFill\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"}],\"name\":\"getPalette\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"palette\",\"type\":\"bytes\"}],\"name\":\"getPalette\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"name\":\"tokenAttributes\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"trait_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct Attribute[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Clement Walter <clement0walter@gmail.com>\",\"kind\":\"dev\",\"methods\":{\"decodeNames(address)\":{\"details\":\"Retrieve the names encoded with the collection: description, characteristics and traits names array.\",\"params\":{\"pointer\":\"The address of the SSTORE2 contract for the names.\"}},\"decodeNames(bytes)\":{\"details\":\"Retrieve the names encoded with the collection: description, characteristics and traits names array.\",\"params\":{\"names\":\"The bytes the names encoded by the RectEncoder.\"}},\"encodePalette(string[])\":{\"details\":\"Usually colors are already defined in hex color space so we just concat all the colors. No check is made      and this function only concatenates the input colors.\",\"params\":{\"palette\":\"The list of colors as hex strings, without the leading #.\"},\"returns\":{\"_0\":\"The concatenated colors as string. To be used as bytes afterwards.\"}},\"getFill(address,uint256)\":{\"details\":\"Returns one single color reading directly from the storage.\",\"params\":{\"index\":\"The index of the color to retrieve\",\"pointer\":\"The pointer to the palette bytes array where each color is R, G, B at storage i, i+1, i+2.\"},\"returns\":{\"_0\":\"The hexstring representation of the color, e.g. \\\"a3120f\\\".\"}},\"getFill(bytes,uint256)\":{\"details\":\"Returns one single color from a pre-loaded whole palette as a bytes array.\",\"params\":{\"index\":\"The index of the color to retrieve\",\"palette\":\"A bytes array encoding several RGB colors. Length should be a multiple of 3.\"},\"returns\":{\"_0\":\"The hexstring representation of the color, e.g. \\\"a3120f\\\".\"}},\"getPalette(address)\":{\"details\":\"Decode the whole palette once for all and returns an array of hexstrings.\",\"params\":{\"pointer\":\"The pointer to the palette bytes array where each color is at storage at i, i+1, i+2.\"},\"returns\":{\"_0\":\"An array of hexstring representation of the color, e.g. \\\"a3120f\\\".\"}}},\"title\":\"BaseRenderer   This library contains shared functionality and constants for the renderers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/renderers/RendererCommons.sol\":\"RendererCommons\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"contracts/lib/renderers/RendererCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\nstruct Attribute {\\n    string trait_type;\\n    string value;\\n}\\n\\n/**  @title BaseRenderer\\n *\\n *   This library contains shared functionality and constants for the renderers.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RendererCommons {\\n    using Integers for uint256;\\n    using Integers for uint8;\\n    using Array for string[];\\n\\n    string public constant DATA_URI = \\\"data:image/svg+xml,\\\";\\n    string public constant XMLNS_HEADER =\\n        \\\"xmlns=%27http://www.w3.org/2000/svg%27\\\";\\n    string public constant SPACE = \\\"%20\\\";\\n    string public constant QUOTE = \\\"%27\\\";\\n    string public constant NUMBER_SIGN = \\\"%23\\\";\\n    string public constant TAG_START = \\\"%3c\\\";\\n    string public constant TAG_END = \\\"/%3e\\\";\\n\\n    event BytesStored(address pointer);\\n\\n    /**\\n     * @dev Usually colors are already defined in hex color space so we just concat all the colors. No check is made\\n     *      and this function only concatenates the input colors.\\n     * @param palette The list of colors as hex strings, without the leading #.\\n     * @return The concatenated colors as string. To be used as bytes afterwards.\\n     */\\n    function encodePalette(string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"0x\\\", palette.join());\\n    }\\n\\n    /** @dev Returns one single color reading directly from the storage.\\n     * @param pointer The pointer to the palette bytes array where each color is R, G, B at storage i, i+1, i+2.\\n     * @param index The index of the color to retrieve\\n     * @return The hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getFill(address pointer, uint256 index)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        bytes memory palette = SSTORE2.read(pointer, 3 * index, 3 * index + 3);\\n\\n        return\\n            string.concat(\\n                uint8(palette[0]).toString(16, 2),\\n                uint8(palette[1]).toString(16, 2),\\n                uint8(palette[2]).toString(16, 2)\\n            );\\n    }\\n\\n    /** @dev Returns one single color from a pre-loaded whole palette as a bytes array.\\n     * @param palette A bytes array encoding several RGB colors. Length should be a multiple of 3.\\n     * @param index The index of the color to retrieve\\n     * @return The hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getFill(bytes memory palette, uint256 index)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                uint8(palette[3 * index]).toString(16, 2),\\n                uint8(palette[3 * index + 1]).toString(16, 2),\\n                uint8(palette[3 * index + 2]).toString(16, 2)\\n            );\\n    }\\n\\n    /** @dev Decode the whole palette once for all and returns an array of hexstrings.\\n     * @param pointer The pointer to the palette bytes array where each color is at storage at i, i+1, i+2.\\n     * @return An array of hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getPalette(address pointer) public view returns (string[] memory) {\\n        bytes memory palette = SSTORE2.read(pointer);\\n        return getPalette(palette);\\n    }\\n\\n    function getPalette(bytes memory palette)\\n        public\\n        pure\\n        returns (string[] memory)\\n    {\\n        uint256 paletteSize = palette.length / 3;\\n        string[] memory paletteHex = new string[](paletteSize);\\n        for (uint256 i = 0; i < paletteSize; i++) {\\n            paletteHex[i] = getFill(palette, i);\\n        }\\n        return paletteHex;\\n    }\\n\\n    /** @dev Retrieve the names encoded with the collection: description, characteristics and traits names array.\\n     * @param names The bytes the names encoded by the RectEncoder.\\n     */\\n    function decodeNames(bytes memory names)\\n        public\\n        pure\\n        returns (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        )\\n    {\\n        return abi.decode(names, (string, string[], string[][]));\\n    }\\n\\n    /** @dev Retrieve the names encoded with the collection: description, characteristics and traits names array.\\n     * @param pointer The address of the SSTORE2 contract for the names.\\n     */\\n    function decodeNames(address pointer)\\n        public\\n        view\\n        returns (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        )\\n    {\\n        return decodeNames(SSTORE2.read(pointer));\\n    }\\n\\n    function tokenAttributes(address pointer, uint256[] memory items)\\n        public\\n        view\\n        returns (Attribute[] memory)\\n    {\\n        (\\n            ,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        ) = decodeNames(SSTORE2.read(pointer));\\n        Attribute[] memory attributes = new Attribute[](items.length);\\n        for (uint256 i = 0; i < items.length; i++) {\\n            attributes[i] = Attribute(\\n                characteristicNames[i],\\n                traitNames[i][items[i]]\\n            );\\n        }\\n        return attributes;\\n    }\\n}\\n\",\"keccak256\":\"0x10eb70b78ba11e37cc614110181412454e509052685ec86ca1003a232c14d6c0\",\"license\":\"MIT\"},\"contracts/lib/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com>\\n *\\n * @notice An attempt at implementing some of the widely used javascript's Array functions in solidity.\\n */\\npragma solidity ^0.8.12;\\n\\nerror EmptyArray();\\nerror GlueOutOfBounds(uint256 length);\\n\\nlibrary Array {\\n    function join(string[] memory a, string memory glue)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return string(_joinReferenceType(inputPointer, gluePointer));\\n    }\\n\\n    function join(string[] memory a) public pure returns (string memory) {\\n        return join(a, \\\"\\\");\\n    }\\n\\n    function join(bytes[] memory a, bytes memory glue)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return _joinReferenceType(inputPointer, gluePointer);\\n    }\\n\\n    function join(bytes[] memory a) public pure returns (bytes memory) {\\n        return join(a, bytes(\\\"\\\"));\\n    }\\n\\n    function join(bytes2[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 0);\\n    }\\n\\n    /// @dev Join the underlying array of bytes2 to a string.\\n    function join(uint16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 256 - 16);\\n    }\\n\\n    function join(bytes3[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 3, 0);\\n    }\\n\\n    function join(bytes4[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 4, 0);\\n    }\\n\\n    function join(bytes8[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 8, 0);\\n    }\\n\\n    function join(bytes16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 16, 0);\\n    }\\n\\n    function join(bytes32[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 32, 0);\\n    }\\n\\n    function _joinValueType(\\n        uint256 a,\\n        uint256 typeLength,\\n        uint256 shiftLeft\\n    ) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Initialize the length of the final bytes: length is typeLength x inputLength (array of bytes4)\\n            mstore(tempBytes, mul(inputLength, typeLength))\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Iterate over all bytes4\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentSlot := shl(shiftLeft, mload(pointer))\\n                mstore(memoryPointer, currentSlot)\\n                memoryPointer := add(memoryPointer, typeLength)\\n            }\\n\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n\\n    function _joinReferenceType(uint256 inputPointer, uint256 gluePointer)\\n        public\\n        pure\\n        returns (bytes memory tempBytes)\\n    {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load glue\\n            let glueLength := mload(gluePointer)\\n            if gt(glueLength, 0x20) {\\n                revert(gluePointer, 0x20)\\n            }\\n            let glue := mload(add(gluePointer, 0x20))\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(inputPointer)\\n            let inputData := add(inputPointer, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n                mstore(memoryPointer, glue)\\n                memoryPointer := add(memoryPointer, glueLength)\\n            }\\n\\n            mstore(\\n                tempBytes,\\n                add(stringLength, mul(sub(inputLength, 1), glueLength))\\n            )\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb288e323d09e12efda2e53871a119c33ef9f5eb9b7a16f7f2f3a01fa61cb3ca8\",\"license\":\"MIT\"},\"contracts/lib/utils/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < res.length; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x547aedd7ff0df60ed3dfaf6a7ec21210ed631beb6319de9e32f689f3fcb47a08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61166561003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100ff5760003560e01c8063890a161a116100a1578063c030f08d11610070578063c030f08d146102a0578063d875d87d146102b3578063df5f0e0e146102d3578063e0c9ae691461030f57600080fd5b8063890a161a146102025780639ad21855146102155780639c57983914610251578063b3e74d801461028d57600080fd5b80636102cd04116100dd5780636102cd041461017c578063657fb2e11461019e5780637be266cc146101be5780637df16521146101c657600080fd5b8063067b7f9e1461010457806315cb3a051461012d5780633774c79814610169575b600080fd5b610117610112366004610d77565b61034b565b6040516101249190610e14565b60405180910390f35b6101176040518060400160405280600481526020017f2f2533650000000000000000000000000000000000000000000000000000000081525081565b610117610177366004610e40565b610409565b61018f61018a366004610e97565b61063a565b60405161012493929190610ffe565b6101b16101ac366004611072565b610660565b6040516101249190611093565b61011761067f565b6101176040518060400160405280600381526020017f253363000000000000000000000000000000000000000000000000000000000081525081565b6101176102103660046110a4565b61069b565b6101176040518060400160405280601381526020017f646174613a696d6167652f7376672b786d6c2c0000000000000000000000000081525081565b6101176040518060400160405280600381526020017f253237000000000000000000000000000000000000000000000000000000000081525081565b61018f61029b366004611072565b6108c9565b6101b16102ae366004610e97565b6108da565b6102c66102c1366004611139565b61098c565b604051610124919061121d565b6101176040518060400160405280600381526020017f253233000000000000000000000000000000000000000000000000000000000081525081565b6101176040518060400160405280600381526020017f253230000000000000000000000000000000000000000000000000000000000081525081565b6040517f9bce4e14000000000000000000000000000000000000000000000000000000008152606090731FA6A2152871D5A4D1f56511110C9a353CA4833990639bce4e149061039e908590600401611093565b600060405180830381865af41580156103bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103e39190810190611286565b6040516020016103f391906112e3565b6040516020818303038152906040529050919050565b606082610417836003611329565b8151811061042757610427611348565b016020015160405163c1338a6960e01b815273FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C9163c1338a699161046b9160f81c9060109060029060040161137a565b600060405180830381865af4158015610488573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104b09190810190611286565b836104bc846003611329565b6104c79060016113a2565b815181106104d7576104d7611348565b016020015160405163c1338a6960e01b815273FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C9163c1338a699161051b9160f81c9060109060029060040161137a565b600060405180830381865af4158015610538573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105609190810190611286565b8461056c856003611329565b6105779060026113a2565b8151811061058757610587611348565b016020015160405163c1338a6960e01b815273FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C9163c1338a69916105cb9160f81c9060109060029060040161137a565b600060405180830381865af41580156105e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106109190810190611286565b604051602001610622939291906113ba565b60405160208183030381529060405290505b92915050565b60608060608380602001905181019061065391906114fc565b9250925092509193909250565b6060600061066d83610ac5565b9050610678816108da565b9392505050565b60405180606001604052806026815260200161160a6026913981565b606060006106c9846106ae856003611329565b6106b9866003611329565b6106c49060036113a2565b610ad5565b9050806000815181106106de576106de611348565b016020015160405163c1338a6960e01b815273FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C9163c1338a69916107229160f81c9060109060029060040161137a565b600060405180830381865af415801561073f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107679190810190611286565b8160018151811061077a5761077a611348565b016020015160405163c1338a6960e01b815273FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C9163c1338a69916107be9160f81c9060109060029060040161137a565b600060405180830381865af41580156107db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108039190810190611286565b8260028151811061081657610816611348565b016020015160405163c1338a6960e01b815273FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C9163c1338a699161085a9160f81c9060109060029060040161137a565b600060405180830381865af4158015610877573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089f9190810190611286565b6040516020016108b1939291906113ba565b60405160208183030381529060405291505092915050565b606080606061065361018a85610ac5565b60606000600383516108ec91906115b2565b905060008167ffffffffffffffff81111561090957610909610bc6565b60405190808252806020026020018201604052801561093c57816020015b60608152602001906001900390816109275790505b50905060005b82811015610984576109548582610409565b82828151811061096657610966611348565b6020026020010181905250808061097c906115c6565b915050610942565b509392505050565b606060008061099d61018a86610ac5565b92509250506000845167ffffffffffffffff8111156109be576109be610bc6565b604051908082528060200260200182016040528015610a0357816020015b60408051808201909152606080825260208201528152602001906001900390816109dc5790505b50905060005b8551811015610abb576040518060400160405280858381518110610a2f57610a2f611348565b60200260200101518152602001848381518110610a4e57610a4e611348565b6020026020010151888481518110610a6857610a68611348565b602002602001015181518110610a8057610a80611348565b6020026020010151815250828281518110610a9d57610a9d611348565b60200260200101819052508080610ab3906115c6565b915050610a09565b5095945050505050565b6060610634826001600019610afe565b6060610af684610ae68560016113a2565b610af18560016113a2565b610afe565b949350505050565b6060833b80610b1d575050604080516020810190915260008152610678565b80841115610b3b575050604080516020810190915260008152610678565b83831015610b84578084846040517f2c4a89fa000000000000000000000000000000000000000000000000000000008152600401610b7b939291906115e1565b60405180910390fd5b8383038482036000828210610b995782610b9b565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610c0257610c02610bc6565b6040525050565b6000610c1460405190565b9050610c208282610bdc565b919050565b600067ffffffffffffffff821115610c3f57610c3f610bc6565b5060209081020190565b600067ffffffffffffffff821115610c6357610c63610bc6565b601f19601f83011660200192915050565b82818337506000910152565b6000610c93610c8e84610c49565b610c09565b905082815260208101848484011115610cae57610cae600080fd5b610984848285610c74565b600082601f830112610ccd57610ccd600080fd5b8135610af6848260208601610c80565b6000610ceb610c8e84610c25565b83815290506020808201908402830185811115610d0a57610d0a600080fd5b835b81811015610d4957803567ffffffffffffffff811115610d2e57610d2e600080fd5b8501610d3a8882610cb9565b84525060209283019201610d0c565b5050509392505050565b600082601f830112610d6757610d67600080fd5b8135610af6848260208601610cdd565b600060208284031215610d8c57610d8c600080fd5b813567ffffffffffffffff811115610da657610da6600080fd5b610af684828501610d53565b60005b83811015610dcd578181015183820152602001610db5565b83811115610ddc576000848401525b50505050565b6000610dec825190565b808452602084019350610e03818560208601610db2565b601f01601f19169290920192915050565b602080825281016106788184610de2565b805b8114610e3257600080fd5b50565b803561063481610e25565b60008060408385031215610e5657610e56600080fd5b823567ffffffffffffffff811115610e7057610e70600080fd5b610e7c85828601610cb9565b9250506020610e8d85828601610e35565b9150509250929050565b600060208284031215610eac57610eac600080fd5b813567ffffffffffffffff811115610ec657610ec6600080fd5b610af684828501610cb9565b60006106788383610de2565b6000610ee8825190565b80845260208401935083602082028501610f028560200190565b60005b84811015610f365783830388528151610f1e8482610ed2565b93505060208201602098909801979150600101610f05565b50909695505050505050565b6000610f4c825190565b80845260208401935083602082028501610f668560200190565b60005b84811015610f365783830388528151610f828482610ed2565b93505060208201602098909801979150600101610f69565b60006106788383610f42565b6000610fb0825190565b80845260208401935083602082028501610fca8560200190565b60005b84811015610f365783830388528151610fe68482610f9a565b93505060208201602098909801979150600101610fcd565b6060808252810161100f8186610de2565b905081810360208301526110238185610ede565b905081810360408301526110378184610fa6565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff8216610634565b610e2781611040565b80356106348161105e565b60006020828403121561108757611087600080fd5b6000610af68484611067565b602080825281016106788184610ede565b600080604083850312156110ba576110ba600080fd5b6000610e7c8585611067565b60006110d4610c8e84610c25565b838152905060208082019084028301858111156110f3576110f3600080fd5b835b81811015610d49576111078782610e35565b8352602092830192016110f5565b600082601f83011261112957611129600080fd5b8135610af68482602086016110c6565b6000806040838503121561114f5761114f600080fd5b600061115b8585611067565b925050602083013567ffffffffffffffff81111561117b5761117b600080fd5b610e8d85828601611115565b805160408084526000919084019061119f8282610de2565b915050602083015184820360208601526110378282610de2565b60006106788383611187565b60006111cf825190565b808452602084019350836020820285016111e98560200190565b60005b84811015610f36578383038852815161120584826111b9565b935050602082016020989098019791506001016111ec565b6020808252810161067881846111c5565b600061123c610c8e84610c49565b90508281526020810184848401111561125757611257600080fd5b610984848285610db2565b600082601f83011261127657611276600080fd5b8151610af684826020860161122e565b60006020828403121561129b5761129b600080fd5b815167ffffffffffffffff8111156112b5576112b5600080fd5b610af684828501611262565b60006112cb825190565b6112d9818560208601610db2565b9290920192915050565b7f3078000000000000000000000000000000000000000000000000000000000000815260020161063481836112c1565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561134357611343611313565b500290565b634e487b7160e01b600052603260045260246000fd5b805b82525050565b600060ff8216610634565b61136081611366565b60608101611388828661135e565b6113956020830185611371565b610af66040830184611371565b600082198211156113b5576113b5611313565b500190565b6113c481856112c1565b90506113d081846112c1565b9050610af681836112c1565b60006113ea610c8e84610c25565b8381529050602080820190840283018581111561140957611409600080fd5b835b81811015610d4957805167ffffffffffffffff81111561142d5761142d600080fd5b85016114398882611262565b8452506020928301920161140b565b600082601f83011261145c5761145c600080fd5b8151610af68482602086016113dc565b600061147a610c8e84610c25565b8381529050602080820190840283018581111561149957611499600080fd5b835b81811015610d4957805167ffffffffffffffff8111156114bd576114bd600080fd5b85016114c98882611448565b8452506020928301920161149b565b600082601f8301126114ec576114ec600080fd5b8151610af684826020860161146c565b60008060006060848603121561151457611514600080fd5b835167ffffffffffffffff81111561152e5761152e600080fd5b61153a86828701611262565b935050602084015167ffffffffffffffff81111561155a5761155a600080fd5b61156686828701611448565b925050604084015167ffffffffffffffff81111561158657611586600080fd5b611592868287016114d8565b9150509250925092565b634e487b7160e01b600052601260045260246000fd5b6000826115c1576115c161159c565b500490565b60006000198214156115da576115da611313565b5060010190565b606081016115ef828661135e565b6115fc602083018561135e565b610af6604083018461135e56fe786d6c6e733d253237687474703a2f2f7777772e77332e6f72672f323030302f737667253237a26469706673582212204544c730e5e0a599f4caa2566fbe1c57817968ecf00c4bf86f31663bda00485364736f6c634300080c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100ff5760003560e01c8063890a161a116100a1578063c030f08d11610070578063c030f08d146102a0578063d875d87d146102b3578063df5f0e0e146102d3578063e0c9ae691461030f57600080fd5b8063890a161a146102025780639ad21855146102155780639c57983914610251578063b3e74d801461028d57600080fd5b80636102cd04116100dd5780636102cd041461017c578063657fb2e11461019e5780637be266cc146101be5780637df16521146101c657600080fd5b8063067b7f9e1461010457806315cb3a051461012d5780633774c79814610169575b600080fd5b610117610112366004610d77565b61034b565b6040516101249190610e14565b60405180910390f35b6101176040518060400160405280600481526020017f2f2533650000000000000000000000000000000000000000000000000000000081525081565b610117610177366004610e40565b610409565b61018f61018a366004610e97565b61063a565b60405161012493929190610ffe565b6101b16101ac366004611072565b610660565b6040516101249190611093565b61011761067f565b6101176040518060400160405280600381526020017f253363000000000000000000000000000000000000000000000000000000000081525081565b6101176102103660046110a4565b61069b565b6101176040518060400160405280601381526020017f646174613a696d6167652f7376672b786d6c2c0000000000000000000000000081525081565b6101176040518060400160405280600381526020017f253237000000000000000000000000000000000000000000000000000000000081525081565b61018f61029b366004611072565b6108c9565b6101b16102ae366004610e97565b6108da565b6102c66102c1366004611139565b61098c565b604051610124919061121d565b6101176040518060400160405280600381526020017f253233000000000000000000000000000000000000000000000000000000000081525081565b6101176040518060400160405280600381526020017f253230000000000000000000000000000000000000000000000000000000000081525081565b6040517f9bce4e1400000000000000000000000000000000000000000000000000000000815260609073__$3d939fd680257e7df63fc3436eced304ff$__90639bce4e149061039e908590600401611093565b600060405180830381865af41580156103bb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103e39190810190611286565b6040516020016103f391906112e3565b6040516020818303038152906040529050919050565b606082610417836003611329565b8151811061042757610427611348565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a699161046b9160f81c9060109060029060040161137a565b600060405180830381865af4158015610488573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104b09190810190611286565b836104bc846003611329565b6104c79060016113a2565b815181106104d7576104d7611348565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a699161051b9160f81c9060109060029060040161137a565b600060405180830381865af4158015610538573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105609190810190611286565b8461056c856003611329565b6105779060026113a2565b8151811061058757610587611348565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a69916105cb9160f81c9060109060029060040161137a565b600060405180830381865af41580156105e8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106109190810190611286565b604051602001610622939291906113ba565b60405160208183030381529060405290505b92915050565b60608060608380602001905181019061065391906114fc565b9250925092509193909250565b6060600061066d83610ac5565b9050610678816108da565b9392505050565b60405180606001604052806026815260200161160a6026913981565b606060006106c9846106ae856003611329565b6106b9866003611329565b6106c49060036113a2565b610ad5565b9050806000815181106106de576106de611348565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a69916107229160f81c9060109060029060040161137a565b600060405180830381865af415801561073f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107679190810190611286565b8160018151811061077a5761077a611348565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a69916107be9160f81c9060109060029060040161137a565b600060405180830381865af41580156107db573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108039190810190611286565b8260028151811061081657610816611348565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a699161085a9160f81c9060109060029060040161137a565b600060405180830381865af4158015610877573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089f9190810190611286565b6040516020016108b1939291906113ba565b60405160208183030381529060405291505092915050565b606080606061065361018a85610ac5565b60606000600383516108ec91906115b2565b905060008167ffffffffffffffff81111561090957610909610bc6565b60405190808252806020026020018201604052801561093c57816020015b60608152602001906001900390816109275790505b50905060005b82811015610984576109548582610409565b82828151811061096657610966611348565b6020026020010181905250808061097c906115c6565b915050610942565b509392505050565b606060008061099d61018a86610ac5565b92509250506000845167ffffffffffffffff8111156109be576109be610bc6565b604051908082528060200260200182016040528015610a0357816020015b60408051808201909152606080825260208201528152602001906001900390816109dc5790505b50905060005b8551811015610abb576040518060400160405280858381518110610a2f57610a2f611348565b60200260200101518152602001848381518110610a4e57610a4e611348565b6020026020010151888481518110610a6857610a68611348565b602002602001015181518110610a8057610a80611348565b6020026020010151815250828281518110610a9d57610a9d611348565b60200260200101819052508080610ab3906115c6565b915050610a09565b5095945050505050565b6060610634826001600019610afe565b6060610af684610ae68560016113a2565b610af18560016113a2565b610afe565b949350505050565b6060833b80610b1d575050604080516020810190915260008152610678565b80841115610b3b575050604080516020810190915260008152610678565b83831015610b84578084846040517f2c4a89fa000000000000000000000000000000000000000000000000000000008152600401610b7b939291906115e1565b60405180910390fd5b8383038482036000828210610b995782610b9b565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610c0257610c02610bc6565b6040525050565b6000610c1460405190565b9050610c208282610bdc565b919050565b600067ffffffffffffffff821115610c3f57610c3f610bc6565b5060209081020190565b600067ffffffffffffffff821115610c6357610c63610bc6565b601f19601f83011660200192915050565b82818337506000910152565b6000610c93610c8e84610c49565b610c09565b905082815260208101848484011115610cae57610cae600080fd5b610984848285610c74565b600082601f830112610ccd57610ccd600080fd5b8135610af6848260208601610c80565b6000610ceb610c8e84610c25565b83815290506020808201908402830185811115610d0a57610d0a600080fd5b835b81811015610d4957803567ffffffffffffffff811115610d2e57610d2e600080fd5b8501610d3a8882610cb9565b84525060209283019201610d0c565b5050509392505050565b600082601f830112610d6757610d67600080fd5b8135610af6848260208601610cdd565b600060208284031215610d8c57610d8c600080fd5b813567ffffffffffffffff811115610da657610da6600080fd5b610af684828501610d53565b60005b83811015610dcd578181015183820152602001610db5565b83811115610ddc576000848401525b50505050565b6000610dec825190565b808452602084019350610e03818560208601610db2565b601f01601f19169290920192915050565b602080825281016106788184610de2565b805b8114610e3257600080fd5b50565b803561063481610e25565b60008060408385031215610e5657610e56600080fd5b823567ffffffffffffffff811115610e7057610e70600080fd5b610e7c85828601610cb9565b9250506020610e8d85828601610e35565b9150509250929050565b600060208284031215610eac57610eac600080fd5b813567ffffffffffffffff811115610ec657610ec6600080fd5b610af684828501610cb9565b60006106788383610de2565b6000610ee8825190565b80845260208401935083602082028501610f028560200190565b60005b84811015610f365783830388528151610f1e8482610ed2565b93505060208201602098909801979150600101610f05565b50909695505050505050565b6000610f4c825190565b80845260208401935083602082028501610f668560200190565b60005b84811015610f365783830388528151610f828482610ed2565b93505060208201602098909801979150600101610f69565b60006106788383610f42565b6000610fb0825190565b80845260208401935083602082028501610fca8560200190565b60005b84811015610f365783830388528151610fe68482610f9a565b93505060208201602098909801979150600101610fcd565b6060808252810161100f8186610de2565b905081810360208301526110238185610ede565b905081810360408301526110378184610fa6565b95945050505050565b600073ffffffffffffffffffffffffffffffffffffffff8216610634565b610e2781611040565b80356106348161105e565b60006020828403121561108757611087600080fd5b6000610af68484611067565b602080825281016106788184610ede565b600080604083850312156110ba576110ba600080fd5b6000610e7c8585611067565b60006110d4610c8e84610c25565b838152905060208082019084028301858111156110f3576110f3600080fd5b835b81811015610d49576111078782610e35565b8352602092830192016110f5565b600082601f83011261112957611129600080fd5b8135610af68482602086016110c6565b6000806040838503121561114f5761114f600080fd5b600061115b8585611067565b925050602083013567ffffffffffffffff81111561117b5761117b600080fd5b610e8d85828601611115565b805160408084526000919084019061119f8282610de2565b915050602083015184820360208601526110378282610de2565b60006106788383611187565b60006111cf825190565b808452602084019350836020820285016111e98560200190565b60005b84811015610f36578383038852815161120584826111b9565b935050602082016020989098019791506001016111ec565b6020808252810161067881846111c5565b600061123c610c8e84610c49565b90508281526020810184848401111561125757611257600080fd5b610984848285610db2565b600082601f83011261127657611276600080fd5b8151610af684826020860161122e565b60006020828403121561129b5761129b600080fd5b815167ffffffffffffffff8111156112b5576112b5600080fd5b610af684828501611262565b60006112cb825190565b6112d9818560208601610db2565b9290920192915050565b7f3078000000000000000000000000000000000000000000000000000000000000815260020161063481836112c1565b634e487b7160e01b600052601160045260246000fd5b600081600019048311821515161561134357611343611313565b500290565b634e487b7160e01b600052603260045260246000fd5b805b82525050565b600060ff8216610634565b61136081611366565b60608101611388828661135e565b6113956020830185611371565b610af66040830184611371565b600082198211156113b5576113b5611313565b500190565b6113c481856112c1565b90506113d081846112c1565b9050610af681836112c1565b60006113ea610c8e84610c25565b8381529050602080820190840283018581111561140957611409600080fd5b835b81811015610d4957805167ffffffffffffffff81111561142d5761142d600080fd5b85016114398882611262565b8452506020928301920161140b565b600082601f83011261145c5761145c600080fd5b8151610af68482602086016113dc565b600061147a610c8e84610c25565b8381529050602080820190840283018581111561149957611499600080fd5b835b81811015610d4957805167ffffffffffffffff8111156114bd576114bd600080fd5b85016114c98882611448565b8452506020928301920161149b565b600082601f8301126114ec576114ec600080fd5b8151610af684826020860161146c565b60008060006060848603121561151457611514600080fd5b835167ffffffffffffffff81111561152e5761152e600080fd5b61153a86828701611262565b935050602084015167ffffffffffffffff81111561155a5761155a600080fd5b61156686828701611448565b925050604084015167ffffffffffffffff81111561158657611586600080fd5b611592868287016114d8565b9150509250925092565b634e487b7160e01b600052601260045260246000fd5b6000826115c1576115c161159c565b500490565b60006000198214156115da576115da611313565b5060010190565b606081016115ef828661135e565b6115fc602083018561135e565b610af6604083018461135e56fe786d6c6e733d253237687474703a2f2f7777772e77332e6f72672f323030302f737667253237a26469706673582212204544c730e5e0a599f4caa2566fbe1c57817968ecf00c4bf86f31663bda00485364736f6c634300080c0033",
  "libraries": {
    "Integers": "0xFD60cDD345feB6011fDeb4Dc3d69aD2319f8508C",
    "Array": "0x1FA6A2152871D5A4D1f56511110C9a353CA48339"
  },
  "devdoc": {
    "author": "Clement Walter <clement0walter@gmail.com>",
    "kind": "dev",
    "methods": {
      "decodeNames(address)": {
        "details": "Retrieve the names encoded with the collection: description, characteristics and traits names array.",
        "params": {
          "pointer": "The address of the SSTORE2 contract for the names."
        }
      },
      "decodeNames(bytes)": {
        "details": "Retrieve the names encoded with the collection: description, characteristics and traits names array.",
        "params": {
          "names": "The bytes the names encoded by the RectEncoder."
        }
      },
      "encodePalette(string[])": {
        "details": "Usually colors are already defined in hex color space so we just concat all the colors. No check is made      and this function only concatenates the input colors.",
        "params": {
          "palette": "The list of colors as hex strings, without the leading #."
        },
        "returns": {
          "_0": "The concatenated colors as string. To be used as bytes afterwards."
        }
      },
      "getFill(address,uint256)": {
        "details": "Returns one single color reading directly from the storage.",
        "params": {
          "index": "The index of the color to retrieve",
          "pointer": "The pointer to the palette bytes array where each color is R, G, B at storage i, i+1, i+2."
        },
        "returns": {
          "_0": "The hexstring representation of the color, e.g. \"a3120f\"."
        }
      },
      "getFill(bytes,uint256)": {
        "details": "Returns one single color from a pre-loaded whole palette as a bytes array.",
        "params": {
          "index": "The index of the color to retrieve",
          "palette": "A bytes array encoding several RGB colors. Length should be a multiple of 3."
        },
        "returns": {
          "_0": "The hexstring representation of the color, e.g. \"a3120f\"."
        }
      },
      "getPalette(address)": {
        "details": "Decode the whole palette once for all and returns an array of hexstrings.",
        "params": {
          "pointer": "The pointer to the palette bytes array where each color is at storage at i, i+1, i+2."
        },
        "returns": {
          "_0": "An array of hexstring representation of the color, e.g. \"a3120f\"."
        }
      }
    },
    "title": "BaseRenderer   This library contains shared functionality and constants for the renderers.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}