{
  "address": "0x98eA186a6AeDDD4dB001246E02600CF15625558A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characteristic",
          "type": "uint256"
        }
      ],
      "name": "CharacteristicOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trait",
          "type": "uint256"
        }
      ],
      "name": "TraitOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FILL_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEIGHT_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_END",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_START",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIDTH_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Y_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "rectBytes",
          "type": "bytes4"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "offsetX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offsetY",
          "type": "uint256"
        }
      ],
      "name": "decodeBytes4ToRect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "rectBytes",
          "type": "bytes4"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        }
      ],
      "name": "decodeBytes4ToRect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rectsBytes",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        }
      ],
      "name": "decodeBytesMemoryToRects",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "names",
          "type": "bytes"
        }
      ],
      "name": "decodeNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "characteristicNames",
          "type": "string[]"
        },
        {
          "internalType": "string[][]",
          "name": "traitNames",
          "type": "string[][]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "characteristicIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitIndex",
          "type": "uint256"
        }
      ],
      "name": "getTraitBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x372f421e6e72c8f2481f9e83f6cb373a848724f8e11f5290ccabf55234831cc6",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0x98eA186a6AeDDD4dB001246E02600CF15625558A",
    "transactionIndex": 21,
    "gasUsed": "1424206",
    "logsBloom": "0x
    "blockHash": "0xbc84aada8212bb731241ea2f868053aade5cd5dbe209cbe8ca6983eef25915d1",
    "transactionHash": "0x372f421e6e72c8f2481f9e83f6cb373a848724f8e11f5290ccabf55234831cc6",
    "logs": [],
    "blockNumber": 10543715,
    "cumulativeGasUsed": "7277921",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 6,
  "solcInputHash": "ddd242d1243945fc4c82f236fa01e6bd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characteristic\",\"type\":\"uint256\"}],\"name\":\"CharacteristicOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trait\",\"type\":\"uint256\"}],\"name\":\"TraitOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FILL_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEIGHT_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIDTH_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Y_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"rectBytes\",\"type\":\"bytes4\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"offsetX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsetY\",\"type\":\"uint256\"}],\"name\":\"decodeBytes4ToRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"rectBytes\",\"type\":\"bytes4\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"}],\"name\":\"decodeBytes4ToRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rectsBytes\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"}],\"name\":\"decodeBytesMemoryToRects\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"names\",\"type\":\"bytes\"}],\"name\":\"decodeNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"characteristicNames\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"traitNames\",\"type\":\"string[][]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characteristicIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitIndex\",\"type\":\"uint256\"}],\"name\":\"getTraitBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Clement Walter <clement0walter@gmail.com>\",\"kind\":\"dev\",\"methods\":{\"getTraitBytes(address,uint256,uint256)\":{\"details\":\"Retrieve the bytes for the given trait from the traits storage.\",\"params\":{\"characteristicIndex\":\"The index of the characteristic in the collection.\",\"pointer\":\"The pointer to the traits stored with SSTORE2.\",\"traitIndex\":\"The index of the trait in the characteristic.\"},\"returns\":{\"_0\":\"The bytes of the trait.\"}}},\"title\":\"RectRenderer   This library can be used to render on-chain images stored as a layering of rectangles.   The returned images is an url safe encoded image uri.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/renderers/RectRenderer.sol\":\"RectRenderer\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"contracts/lib/renderers/RectRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Bytes} from \\\"../utils/Bytes.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\nerror InvalidLength(uint256 length);\\nerror CharacteristicOutOfRange(uint256 characteristic);\\nerror TraitOutOfRange(uint256 trait);\\n\\n/**  @title RectRenderer\\n *\\n *   This library can be used to render on-chain images stored as a layering of rectangles.\\n *   The returned images is an url safe encoded image uri.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RectRenderer {\\n    using Integers for uint8;\\n    using Integers for uint256;\\n    using Bytes for bytes;\\n    using Array for string[];\\n\\n    string public constant RECT_TAG_START = \\\"%3crect%20x=%27\\\";\\n    string public constant Y_TAG = \\\"%27%20y=%27\\\";\\n    string public constant WIDTH_TAG = \\\"%27%20width=%27\\\";\\n    string public constant HEIGHT_TAG = \\\"%27%20height=%27\\\";\\n    string public constant FILL_TAG = \\\"%27%20fill=%27%23\\\";\\n    string public constant RECT_TAG_END = \\\"%27/%3e\\\";\\n\\n    /** @dev Retrieve the bytes for the given trait from the traits storage.\\n     *  @param pointer The pointer to the traits stored with SSTORE2.\\n     *  @param characteristicIndex The index of the characteristic in the collection.\\n     *  @param traitIndex The index of the trait in the characteristic.\\n     *  @return The bytes of the trait.\\n     */\\n    function getTraitBytes(\\n        address pointer,\\n        uint256 characteristicIndex,\\n        uint256 traitIndex\\n    ) public view returns (bytes memory) {\\n        uint16 characteristicsLength = SSTORE2.read(pointer, 0, 2).toUint16();\\n\\n        if (characteristicsLength - 1 < characteristicIndex)\\n            revert CharacteristicOutOfRange(characteristicIndex);\\n        uint16 characteristicStart = SSTORE2\\n            .read(\\n                pointer,\\n                2 + 2 * characteristicIndex,\\n                2 + 2 * characteristicIndex + 2\\n            )\\n            .toUint16();\\n        uint16 traitsLength = SSTORE2\\n            .read(pointer, characteristicStart, characteristicStart + 2)\\n            .toUint16() - 1;\\n        if (traitsLength - 1 < traitIndex) revert TraitOutOfRange(traitIndex);\\n        bytes memory _indexes = SSTORE2.read(\\n            pointer,\\n            characteristicStart + 2 + 2 * traitIndex,\\n            characteristicStart + 2 + 2 * traitIndex + 4\\n        );\\n        return\\n            SSTORE2.read(\\n                pointer,\\n                characteristicStart + _indexes.toUint16(0),\\n                characteristicStart + _indexes.toUint16(2)\\n            );\\n    }\\n\\n    function decodeBytes4ToRect(bytes4 rectBytes, string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return decodeBytes4ToRect(rectBytes, palette, 0, 0);\\n    }\\n\\n    function decodeBytes4ToRect(\\n        bytes4 rectBytes,\\n        string[] memory palette,\\n        uint256 offsetX,\\n        uint256 offsetY\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                RECT_TAG_START,\\n                (uint8(uint32(rectBytes >> 26)) + offsetX).toString(),\\n                Y_TAG,\\n                ((uint8(uint32(rectBytes >> 20)) & 0x3f) + offsetY).toString(),\\n                WIDTH_TAG,\\n                (uint8(uint32(rectBytes >> 14)) & 0x3f).toString(),\\n                HEIGHT_TAG,\\n                (uint8(uint32(rectBytes >> 8)) & 0x3f).toString(),\\n                FILL_TAG,\\n                palette[uint8(rectBytes[3])],\\n                RECT_TAG_END\\n            );\\n    }\\n\\n    function decodeBytesMemoryToRects(\\n        bytes memory rectsBytes,\\n        string[] memory palette\\n    ) public pure returns (string memory) {\\n        if (rectsBytes.length % 4 != 0) {\\n            revert InvalidLength(rectsBytes.length);\\n        }\\n        uint256 nbRects = rectsBytes.length / 4;\\n        string[] memory rects = new string[](nbRects);\\n        for (uint256 i = 0; i < rects.length; i++) {\\n            rects[i] = decodeBytes4ToRect(\\n                bytes4(rectsBytes.toUint32(i * 4)),\\n                palette\\n            );\\n        }\\n        return rects.join();\\n    }\\n\\n    function decodeNames(bytes memory names)\\n        public\\n        pure\\n        returns (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        )\\n    {\\n        return abi.decode(names, (string, string[], string[][]));\\n    }\\n}\\n\",\"keccak256\":\"0xccdffdbcf9894f72ed7ee40fdbbd84bbe252d107009f62f5e69f74faa03ea23d\",\"license\":\"MIT\"},\"contracts/lib/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com>\\n *\\n * @notice An attempt at implementing some of the widely used javascript's Array functions in solidity.\\n */\\npragma solidity ^0.8.12;\\n\\nerror EmptyArray();\\nerror GlueOutOfBounds(uint256 length);\\n\\nlibrary Array {\\n    function join(string[] memory a, string memory glue)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return string(_joinReferenceType(inputPointer, gluePointer));\\n    }\\n\\n    function join(string[] memory a) public pure returns (string memory) {\\n        return join(a, \\\"\\\");\\n    }\\n\\n    function join(bytes[] memory a, bytes memory glue)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return _joinReferenceType(inputPointer, gluePointer);\\n    }\\n\\n    function join(bytes[] memory a) public pure returns (bytes memory) {\\n        return join(a, bytes(\\\"\\\"));\\n    }\\n\\n    function join(bytes2[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 0);\\n    }\\n\\n    /// @dev Join the underlying array of bytes2 to a string.\\n    function join(uint16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 256 - 16);\\n    }\\n\\n    function join(bytes3[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 3, 0);\\n    }\\n\\n    function join(bytes4[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 4, 0);\\n    }\\n\\n    function join(bytes8[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 8, 0);\\n    }\\n\\n    function join(bytes16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 16, 0);\\n    }\\n\\n    function join(bytes32[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 32, 0);\\n    }\\n\\n    function _joinValueType(\\n        uint256 a,\\n        uint256 typeLength,\\n        uint256 shiftLeft\\n    ) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Initialize the length of the final bytes: length is typeLength x inputLength (array of bytes4)\\n            mstore(tempBytes, mul(inputLength, typeLength))\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Iterate over all bytes4\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentSlot := shl(shiftLeft, mload(pointer))\\n                mstore(memoryPointer, currentSlot)\\n                memoryPointer := add(memoryPointer, typeLength)\\n            }\\n\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n\\n    function _joinReferenceType(uint256 inputPointer, uint256 gluePointer)\\n        public\\n        pure\\n        returns (bytes memory tempBytes)\\n    {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load glue\\n            let glueLength := mload(gluePointer)\\n            if gt(glueLength, 0x20) {\\n                revert(gluePointer, 0x20)\\n            }\\n            let glue := mload(add(gluePointer, 0x20))\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(inputPointer)\\n            let inputData := add(inputPointer, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n                mstore(memoryPointer, glue)\\n                memoryPointer := add(memoryPointer, glueLength)\\n            }\\n\\n            mstore(\\n                tempBytes,\\n                add(stringLength, mul(sub(inputLength, 1), glueLength))\\n            )\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb288e323d09e12efda2e53871a119c33ef9f5eb9b7a16f7f2f3a01fa61cb3ca8\",\"license\":\"MIT\"},\"contracts/lib/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com> from Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Bytes {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) public pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (address tmp)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint8 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toBytes1(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes1 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toBytes1_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint16 tmp)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x2), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes) public pure returns (uint16 tmp) {\\n        return toUint16(_bytes, 0);\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint24 tmp)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x3), _start))\\n        }\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint32 tmp)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x4), _start))\\n        }\\n    }\\n\\n    function toUint40(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint40 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toUint40_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toBytes5(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes5 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toBytes5_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toUint48(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint48 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toUint48_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toBytes6(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes6 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toBytes6_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toUint56(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint56 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toUint56_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toByes7(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes7 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toBytes7_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toBytes8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toBytes8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint96 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toBytes12(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toBytes12_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint128 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toBytes16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toBytes16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint256 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes32 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xd894eac2f223760da25e079d125b4c0de282a6d609a1e8a1834f5dc1c02550d5\",\"license\":\"MIT\"},\"contracts/lib/utils/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < res.length; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x547aedd7ff0df60ed3dfaf6a7ec21210ed631beb6319de9e32f689f3fcb47a08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6118e361003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100d35760003560e01c80635e99a6301161008b578063999086e311610065578063999086e314610262578063b674b76114610275578063f258feb1146102b157600080fd5b80635e99a630146101f15780636102cd041461020457806369db9ed01461022657600080fd5b80634239abe4116100bc5780634239abe41461016657806343c8ecbe146101795780634d32bd7d146101b557600080fd5b8063146f9480146100d8578063407134de1461012a575b600080fd5b6101146040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525081565b6040516101219190610e42565b60405180910390f35b6101146040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b610114610174366004610ea4565b6102c4565b6101146040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525081565b6101146040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b6101146101ff3660046110e0565b6106e3565b61021761021236600461115f565b610ab6565b604051610121939291906112c6565b6101146040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b610114610270366004611308565b610adc565b6101146040518060400160405280601181526020017f25323725323066696c6c3d25323725323300000000000000000000000000000081525081565b6101146102bf36600461137a565b610cf6565b606060006102d58560006002610d05565b6040516326b3515760e11b815273B0464EBF65D8F453a9056eEFE11167411B1d185591634d66a2ae9161030b9190600401610e42565b602060405180830381865af4158015610328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034c91906113b1565b90508361035a6001836113e8565b61ffff1610156103a157836040517f475e8192000000000000000000000000000000000000000000000000000000008152600401610398919061140f565b60405180910390fd5b60006103e3866103b287600261141d565b6103bd90600261143c565b6103c888600261141d565b6103d390600261143c565b6103de90600261143c565b610d05565b6040516326b3515760e11b815273B0464EBF65D8F453a9056eEFE11167411B1d185591634d66a2ae916104199190600401610e42565b602060405180830381865af4158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a91906113b1565b90506000600161047d8861ffff8516610474866002611454565b61ffff16610d05565b6040516326b3515760e11b815273B0464EBF65D8F453a9056eEFE11167411B1d185591634d66a2ae916104b39190600401610e42565b602060405180830381865af41580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f491906113b1565b6104fe91906113e8565b90508461050c6001836113e8565b61ffff16101561054a57846040517fab074d52000000000000000000000000000000000000000000000000000000008152600401610398919061140f565b60006105a38861055b88600261141d565b610566866002611454565b61ffff16610574919061143c565b61057f89600261141d565b61058a876002611454565b61ffff16610598919061143c565b6103de90600461143c565b6040517fbe8b34300000000000000000000000000000000000000000000000000000000081529091506106d590899073B0464EBF65D8F453a9056eEFE11167411B1d18559063be8b3430906105ff908690600090600401611490565b602060405180830381865af415801561061c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064091906113b1565b61064a9086611454565b61ffff168373B0464EBF65D8F453a9056eEFE11167411B1d185563be8b3430909160026040518363ffffffff1660e01b815260040161068a929190611490565b602060405180830381865af41580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb91906113b1565b6104749087611454565b9450505050505b9392505050565b60408051808201909152600f81527f25336372656374253230783d253237000000000000000000000000000000000060208201526060906107288460fa88901c61143c565b60405163348051d760e11b815273FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C91636900a3ae9161075e919060040161140f565b600060405180830381865af415801561077b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107a39190810190611508565b60408051808201909152600b81527f253237253230793d25323700000000000000000000000000000000000000000060208201526107e885603f60f48b901c1661143c565b60405163348051d760e11b815273FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C91636900a3ae9161081e919060040161140f565b600060405180830381865af415801561083b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108639190810190611508565b604080518082018252600f81527f25323725323077696474683d25323700000000000000000000000000000000006020820152905163348051d760e11b815273FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C90636900a3ae906108d390603f60ee8f901c169060040161140f565b600060405180830381865af41580156108f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109189190810190611508565b6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525060088c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60e01c603f1660ff1673FD60cDD345feB6011fDeb4Dc3d69aD2319f8508C636900a3ae90916040518263ffffffff1660e01b81526004016109b3919061140f565b600060405180830381865af41580156109d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109f89190810190611508565b60408051808201909152601181527f25323725323066696c6c3d25323725323300000000000000000000000000000060208201528c8e6003825191901a908110610a4457610a44611543565b60200260200101516040518060400160405280600781526020017f2532372f25336500000000000000000000000000000000000000000000000000815250604051602001610a9c9b9a9998979695949392919061157b565b60405160208183030381529060405290505b949350505050565b606080606083806020019051810190610acf919061172d565b9250925092509193909250565b606060048351610aec91906117d9565b15610b265782516040517fc67eee4b000000000000000000000000000000000000000000000000000000008152600401610398919061140f565b600060048451610b3691906117ed565b905060008167ffffffffffffffff811115610b5357610b53610f27565b604051908082528060200260200182016040528015610b8657816020015b6060815260200190600190039081610b715790505b50905060005b8151811015610c5557610c2573B0464EBF65D8F453a9056eEFE11167411B1d18556305d3bb7488610bbe85600461141d565b6040518363ffffffff1660e01b8152600401610bdb929190611801565b602060405180830381865af4158015610bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1c9190611838565b60e01b86610cf6565b828281518110610c3757610c37611543565b60200260200101819052508080610c4d90611859565b915050610b8c565b506040517f9bce4e14000000000000000000000000000000000000000000000000000000008152731FA6A2152871D5A4D1f56511110C9a353CA4833990639bce4e1490610ca6908490600401611874565b600060405180830381865af4158015610cc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ceb9190810190611508565b925050505b92915050565b60606106dc83836000806106e3565b6060610aae84610d1685600161143c565b610d2185600161143c565b6060833b80610d405750506040805160208101909152600081526106dc565b80841115610d5e5750506040805160208101909152600081526106dc565b83831015610d9e578084846040517f2c4a89fa00000000000000000000000000000000000000000000000000000000815260040161039893929190611885565b8383038482036000828210610db35782610db5565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b60005b83811015610dfb578181015183820152602001610de3565b83811115610e0a576000848401525b50505050565b6000610e1a825190565b808452602084019350610e31818560208601610de0565b601f01601f19169290920192915050565b602080825281016106dc8184610e10565b600073ffffffffffffffffffffffffffffffffffffffff8216610cf0565b610e7a81610e53565b8114610e8557600080fd5b50565b8035610cf081610e71565b80610e7a565b8035610cf081610e93565b600080600060608486031215610ebc57610ebc600080fd5b6000610ec88686610e88565b9350506020610ed986828701610e99565b9250506040610eea86828701610e99565b9150509250925092565b7fffffffff000000000000000000000000000000000000000000000000000000008116610e7a565b8035610cf081610ef4565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610f6357610f63610f27565b6040525050565b6000610f7560405190565b9050610f818282610f3d565b919050565b600067ffffffffffffffff821115610fa057610fa0610f27565b5060209081020190565b600067ffffffffffffffff821115610fc457610fc4610f27565b601f19601f83011660200192915050565b82818337506000910152565b6000610ff4610fef84610faa565b610f6a565b90508281526020810184848401111561100f5761100f600080fd5b61101a848285610fd5565b509392505050565b600082601f83011261103657611036600080fd5b8135610aae848260208601610fe1565b6000611054610fef84610f86565b8381529050602080820190840283018581111561107357611073600080fd5b835b818110156110b257803567ffffffffffffffff81111561109757611097600080fd5b85016110a38882611022565b84525060209283019201611075565b5050509392505050565b600082601f8301126110d0576110d0600080fd5b8135610aae848260208601611046565b600080600080608085870312156110f9576110f9600080fd5b60006111058787610f1c565b945050602085013567ffffffffffffffff81111561112557611125600080fd5b611131878288016110bc565b935050604061114287828801610e99565b925050606061115387828801610e99565b91505092959194509250565b60006020828403121561117457611174600080fd5b813567ffffffffffffffff81111561118e5761118e600080fd5b610aae84828501611022565b60006106dc8383610e10565b60006111b0825190565b808452602084019350836020820285016111ca8560200190565b60005b848110156111fe57838303885281516111e6848261119a565b935050602082016020989098019791506001016111cd565b50909695505050505050565b6000611214825190565b8084526020840193508360208202850161122e8560200190565b60005b848110156111fe578383038852815161124a848261119a565b93505060208201602098909801979150600101611231565b60006106dc838361120a565b6000611278825190565b808452602084019350836020820285016112928560200190565b60005b848110156111fe57838303885281516112ae8482611262565b93505060208201602098909801979150600101611295565b606080825281016112d78186610e10565b905081810360208301526112eb81856111a6565b905081810360408301526112ff818461126e565b95945050505050565b6000806040838503121561131e5761131e600080fd5b823567ffffffffffffffff81111561133857611338600080fd5b61134485828601611022565b925050602083013567ffffffffffffffff81111561136457611364600080fd5b611370858286016110bc565b9150509250929050565b6000806040838503121561139057611390600080fd5b60006113448585610f1c565b61ffff8116610e7a565b8051610cf08161139c565b6000602082840312156113c6576113c6600080fd5b6000610aae84846113a6565b634e487b7160e01b600052601160045260246000fd5b61ffff9182169116600082821015611402576114026113d2565b500390565b805b82525050565b60208101610cf08284611407565b6000816000190483118215151615611437576114376113d2565b500290565b6000821982111561144f5761144f6113d2565b500190565b61ffff8116905061ffff8216915060008261ffff0382111561144f5761144f6113d2565b6000610cf06114848381565b90565b61140981611478565b604080825281016114a18185610e10565b90506106dc6020830184611487565b60006114be610fef84610faa565b9050828152602081018484840111156114d9576114d9600080fd5b61101a848285610de0565b600082601f8301126114f8576114f8600080fd5b8151610aae8482602086016114b0565b60006020828403121561151d5761151d600080fd5b815167ffffffffffffffff81111561153757611537600080fd5b610aae848285016114e4565b634e487b7160e01b600052603260045260246000fd5b6000611563825190565b611571818560208601610de0565b9290920192915050565b611585818d611559565b9050611591818c611559565b905061159d818b611559565b90506115a9818a611559565b90506115b58189611559565b90506115c18188611559565b90506115cd8187611559565b90506115d98186611559565b90506115e58185611559565b90506115f18184611559565b90506115fd8183611559565b9c9b505050505050505050505050565b600061161b610fef84610f86565b8381529050602080820190840283018581111561163a5761163a600080fd5b835b818110156110b257805167ffffffffffffffff81111561165e5761165e600080fd5b850161166a88826114e4565b8452506020928301920161163c565b600082601f83011261168d5761168d600080fd5b8151610aae84826020860161160d565b60006116ab610fef84610f86565b838152905060208082019084028301858111156116ca576116ca600080fd5b835b818110156110b257805167ffffffffffffffff8111156116ee576116ee600080fd5b85016116fa8882611679565b845250602092830192016116cc565b600082601f83011261171d5761171d600080fd5b8151610aae84826020860161169d565b60008060006060848603121561174557611745600080fd5b835167ffffffffffffffff81111561175f5761175f600080fd5b61176b868287016114e4565b935050602084015167ffffffffffffffff81111561178b5761178b600080fd5b61179786828701611679565b925050604084015167ffffffffffffffff8111156117b7576117b7600080fd5b610eea86828701611709565b634e487b7160e01b600052601260045260246000fd5b6000826117e8576117e86117c3565b500690565b6000826117fc576117fc6117c3565b500490565b604080825281016118128185610e10565b90506106dc6020830184611407565b63ffffffff8116610e7a565b8051610cf081611821565b60006020828403121561184d5761184d600080fd5b6000610aae848461182d565b600060001982141561186d5761186d6113d2565b5060010190565b602080825281016106dc81846111a6565b606081016118938286611407565b6118a06020830185611407565b610aae604083018461140756fea264697066735822122000fa654eea0785ffffe8b39d6a0601348200e1749e42cb4c78297f856486de2a64736f6c634300080c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100d35760003560e01c80635e99a6301161008b578063999086e311610065578063999086e314610262578063b674b76114610275578063f258feb1146102b157600080fd5b80635e99a630146101f15780636102cd041461020457806369db9ed01461022657600080fd5b80634239abe4116100bc5780634239abe41461016657806343c8ecbe146101795780634d32bd7d146101b557600080fd5b8063146f9480146100d8578063407134de1461012a575b600080fd5b6101146040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525081565b6040516101219190610e42565b60405180910390f35b6101146040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b610114610174366004610ea4565b6102c4565b6101146040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525081565b6101146040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b6101146101ff3660046110e0565b6106e3565b61021761021236600461115f565b610ab6565b604051610121939291906112c6565b6101146040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b610114610270366004611308565b610adc565b6101146040518060400160405280601181526020017f25323725323066696c6c3d25323725323300000000000000000000000000000081525081565b6101146102bf36600461137a565b610cf6565b606060006102d58560006002610d05565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae9161030b9190600401610e42565b602060405180830381865af4158015610328573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034c91906113b1565b90508361035a6001836113e8565b61ffff1610156103a157836040517f475e8192000000000000000000000000000000000000000000000000000000008152600401610398919061140f565b60405180910390fd5b60006103e3866103b287600261141d565b6103bd90600261143c565b6103c888600261141d565b6103d390600261143c565b6103de90600261143c565b610d05565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae916104199190600401610e42565b602060405180830381865af4158015610436573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045a91906113b1565b90506000600161047d8861ffff8516610474866002611454565b61ffff16610d05565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae916104b39190600401610e42565b602060405180830381865af41580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f491906113b1565b6104fe91906113e8565b90508461050c6001836113e8565b61ffff16101561054a57846040517fab074d52000000000000000000000000000000000000000000000000000000008152600401610398919061140f565b60006105a38861055b88600261141d565b610566866002611454565b61ffff16610574919061143c565b61057f89600261141d565b61058a876002611454565b61ffff16610598919061143c565b6103de90600461143c565b6040517fbe8b34300000000000000000000000000000000000000000000000000000000081529091506106d590899073__$dcaad1777d2b99f53d9a752b008027c0a6$__9063be8b3430906105ff908690600090600401611490565b602060405180830381865af415801561061c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064091906113b1565b61064a9086611454565b61ffff168373__$dcaad1777d2b99f53d9a752b008027c0a6$__63be8b3430909160026040518363ffffffff1660e01b815260040161068a929190611490565b602060405180830381865af41580156106a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cb91906113b1565b6104749087611454565b9450505050505b9392505050565b60408051808201909152600f81527f25336372656374253230783d253237000000000000000000000000000000000060208201526060906107288460fa88901c61143c565b60405163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__91636900a3ae9161075e919060040161140f565b600060405180830381865af415801561077b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107a39190810190611508565b60408051808201909152600b81527f253237253230793d25323700000000000000000000000000000000000000000060208201526107e885603f60f48b901c1661143c565b60405163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__91636900a3ae9161081e919060040161140f565b600060405180830381865af415801561083b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108639190810190611508565b604080518082018252600f81527f25323725323077696474683d25323700000000000000000000000000000000006020820152905163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__90636900a3ae906108d390603f60ee8f901c169060040161140f565b600060405180830381865af41580156108f0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109189190810190611508565b6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525060088c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60e01c603f1660ff1673__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__636900a3ae90916040518263ffffffff1660e01b81526004016109b3919061140f565b600060405180830381865af41580156109d0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109f89190810190611508565b60408051808201909152601181527f25323725323066696c6c3d25323725323300000000000000000000000000000060208201528c8e6003825191901a908110610a4457610a44611543565b60200260200101516040518060400160405280600781526020017f2532372f25336500000000000000000000000000000000000000000000000000815250604051602001610a9c9b9a9998979695949392919061157b565b60405160208183030381529060405290505b949350505050565b606080606083806020019051810190610acf919061172d565b9250925092509193909250565b606060048351610aec91906117d9565b15610b265782516040517fc67eee4b000000000000000000000000000000000000000000000000000000008152600401610398919061140f565b600060048451610b3691906117ed565b905060008167ffffffffffffffff811115610b5357610b53610f27565b604051908082528060200260200182016040528015610b8657816020015b6060815260200190600190039081610b715790505b50905060005b8151811015610c5557610c2573__$dcaad1777d2b99f53d9a752b008027c0a6$__6305d3bb7488610bbe85600461141d565b6040518363ffffffff1660e01b8152600401610bdb929190611801565b602060405180830381865af4158015610bf8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c1c9190611838565b60e01b86610cf6565b828281518110610c3757610c37611543565b60200260200101819052508080610c4d90611859565b915050610b8c565b506040517f9bce4e1400000000000000000000000000000000000000000000000000000000815273__$3d939fd680257e7df63fc3436eced304ff$__90639bce4e1490610ca6908490600401611874565b600060405180830381865af4158015610cc3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ceb9190810190611508565b925050505b92915050565b60606106dc83836000806106e3565b6060610aae84610d1685600161143c565b610d2185600161143c565b6060833b80610d405750506040805160208101909152600081526106dc565b80841115610d5e5750506040805160208101909152600081526106dc565b83831015610d9e578084846040517f2c4a89fa00000000000000000000000000000000000000000000000000000000815260040161039893929190611885565b8383038482036000828210610db35782610db5565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b60005b83811015610dfb578181015183820152602001610de3565b83811115610e0a576000848401525b50505050565b6000610e1a825190565b808452602084019350610e31818560208601610de0565b601f01601f19169290920192915050565b602080825281016106dc8184610e10565b600073ffffffffffffffffffffffffffffffffffffffff8216610cf0565b610e7a81610e53565b8114610e8557600080fd5b50565b8035610cf081610e71565b80610e7a565b8035610cf081610e93565b600080600060608486031215610ebc57610ebc600080fd5b6000610ec88686610e88565b9350506020610ed986828701610e99565b9250506040610eea86828701610e99565b9150509250925092565b7fffffffff000000000000000000000000000000000000000000000000000000008116610e7a565b8035610cf081610ef4565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610f6357610f63610f27565b6040525050565b6000610f7560405190565b9050610f818282610f3d565b919050565b600067ffffffffffffffff821115610fa057610fa0610f27565b5060209081020190565b600067ffffffffffffffff821115610fc457610fc4610f27565b601f19601f83011660200192915050565b82818337506000910152565b6000610ff4610fef84610faa565b610f6a565b90508281526020810184848401111561100f5761100f600080fd5b61101a848285610fd5565b509392505050565b600082601f83011261103657611036600080fd5b8135610aae848260208601610fe1565b6000611054610fef84610f86565b8381529050602080820190840283018581111561107357611073600080fd5b835b818110156110b257803567ffffffffffffffff81111561109757611097600080fd5b85016110a38882611022565b84525060209283019201611075565b5050509392505050565b600082601f8301126110d0576110d0600080fd5b8135610aae848260208601611046565b600080600080608085870312156110f9576110f9600080fd5b60006111058787610f1c565b945050602085013567ffffffffffffffff81111561112557611125600080fd5b611131878288016110bc565b935050604061114287828801610e99565b925050606061115387828801610e99565b91505092959194509250565b60006020828403121561117457611174600080fd5b813567ffffffffffffffff81111561118e5761118e600080fd5b610aae84828501611022565b60006106dc8383610e10565b60006111b0825190565b808452602084019350836020820285016111ca8560200190565b60005b848110156111fe57838303885281516111e6848261119a565b935050602082016020989098019791506001016111cd565b50909695505050505050565b6000611214825190565b8084526020840193508360208202850161122e8560200190565b60005b848110156111fe578383038852815161124a848261119a565b93505060208201602098909801979150600101611231565b60006106dc838361120a565b6000611278825190565b808452602084019350836020820285016112928560200190565b60005b848110156111fe57838303885281516112ae8482611262565b93505060208201602098909801979150600101611295565b606080825281016112d78186610e10565b905081810360208301526112eb81856111a6565b905081810360408301526112ff818461126e565b95945050505050565b6000806040838503121561131e5761131e600080fd5b823567ffffffffffffffff81111561133857611338600080fd5b61134485828601611022565b925050602083013567ffffffffffffffff81111561136457611364600080fd5b611370858286016110bc565b9150509250929050565b6000806040838503121561139057611390600080fd5b60006113448585610f1c565b61ffff8116610e7a565b8051610cf08161139c565b6000602082840312156113c6576113c6600080fd5b6000610aae84846113a6565b634e487b7160e01b600052601160045260246000fd5b61ffff9182169116600082821015611402576114026113d2565b500390565b805b82525050565b60208101610cf08284611407565b6000816000190483118215151615611437576114376113d2565b500290565b6000821982111561144f5761144f6113d2565b500190565b61ffff8116905061ffff8216915060008261ffff0382111561144f5761144f6113d2565b6000610cf06114848381565b90565b61140981611478565b604080825281016114a18185610e10565b90506106dc6020830184611487565b60006114be610fef84610faa565b9050828152602081018484840111156114d9576114d9600080fd5b61101a848285610de0565b600082601f8301126114f8576114f8600080fd5b8151610aae8482602086016114b0565b60006020828403121561151d5761151d600080fd5b815167ffffffffffffffff81111561153757611537600080fd5b610aae848285016114e4565b634e487b7160e01b600052603260045260246000fd5b6000611563825190565b611571818560208601610de0565b9290920192915050565b611585818d611559565b9050611591818c611559565b905061159d818b611559565b90506115a9818a611559565b90506115b58189611559565b90506115c18188611559565b90506115cd8187611559565b90506115d98186611559565b90506115e58185611559565b90506115f18184611559565b90506115fd8183611559565b9c9b505050505050505050505050565b600061161b610fef84610f86565b8381529050602080820190840283018581111561163a5761163a600080fd5b835b818110156110b257805167ffffffffffffffff81111561165e5761165e600080fd5b850161166a88826114e4565b8452506020928301920161163c565b600082601f83011261168d5761168d600080fd5b8151610aae84826020860161160d565b60006116ab610fef84610f86565b838152905060208082019084028301858111156116ca576116ca600080fd5b835b818110156110b257805167ffffffffffffffff8111156116ee576116ee600080fd5b85016116fa8882611679565b845250602092830192016116cc565b600082601f83011261171d5761171d600080fd5b8151610aae84826020860161169d565b60008060006060848603121561174557611745600080fd5b835167ffffffffffffffff81111561175f5761175f600080fd5b61176b868287016114e4565b935050602084015167ffffffffffffffff81111561178b5761178b600080fd5b61179786828701611679565b925050604084015167ffffffffffffffff8111156117b7576117b7600080fd5b610eea86828701611709565b634e487b7160e01b600052601260045260246000fd5b6000826117e8576117e86117c3565b500690565b6000826117fc576117fc6117c3565b500490565b604080825281016118128185610e10565b90506106dc6020830184611407565b63ffffffff8116610e7a565b8051610cf081611821565b60006020828403121561184d5761184d600080fd5b6000610aae848461182d565b600060001982141561186d5761186d6113d2565b5060010190565b602080825281016106dc81846111a6565b606081016118938286611407565b6118a06020830185611407565b610aae604083018461140756fea264697066735822122000fa654eea0785ffffe8b39d6a0601348200e1749e42cb4c78297f856486de2a64736f6c634300080c0033",
  "libraries": {
    "Array": "0x1FA6A2152871D5A4D1f56511110C9a353CA48339",
    "Bytes": "0xB0464EBF65D8F453a9056eEFE11167411B1d1855",
    "Integers": "0xFD60cDD345feB6011fDeb4Dc3d69aD2319f8508C"
  },
  "devdoc": {
    "author": "Clement Walter <clement0walter@gmail.com>",
    "kind": "dev",
    "methods": {
      "getTraitBytes(address,uint256,uint256)": {
        "details": "Retrieve the bytes for the given trait from the traits storage.",
        "params": {
          "characteristicIndex": "The index of the characteristic in the collection.",
          "pointer": "The pointer to the traits stored with SSTORE2.",
          "traitIndex": "The index of the trait in the characteristic."
        },
        "returns": {
          "_0": "The bytes of the trait."
        }
      }
    },
    "title": "RectRenderer   This library can be used to render on-chain images stored as a layering of rectangles.   The returned images is an url safe encoded image uri.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}