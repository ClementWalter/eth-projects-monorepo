{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_preBytes",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_postBytes",
          "type": "bytes"
        }
      ],
      "name": "equal",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_length",
          "type": "uint256"
        }
      ],
      "name": "slice",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "tmp",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toByes7",
      "outputs": [
        {
          "internalType": "bytes7",
          "name": "tmp",
          "type": "bytes7"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toBytes1",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "tmp",
          "type": "bytes1"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toBytes12",
      "outputs": [
        {
          "internalType": "bytes12",
          "name": "tmp",
          "type": "bytes12"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toBytes16",
      "outputs": [
        {
          "internalType": "bytes12",
          "name": "tmp",
          "type": "bytes12"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toBytes2",
      "outputs": [
        {
          "internalType": "bytes2",
          "name": "tmp",
          "type": "bytes2"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toBytes3",
      "outputs": [
        {
          "internalType": "bytes3",
          "name": "tmp",
          "type": "bytes3"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toBytes32",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "tmp",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toBytes4",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "tmp",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toBytes5",
      "outputs": [
        {
          "internalType": "bytes5",
          "name": "tmp",
          "type": "bytes5"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toBytes6",
      "outputs": [
        {
          "internalType": "bytes6",
          "name": "tmp",
          "type": "bytes6"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toBytes8",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "tmp",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint128",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "tmp",
          "type": "uint128"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        }
      ],
      "name": "toUint16",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "tmp",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint16",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "tmp",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint24",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "tmp",
          "type": "uint24"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint256",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "tmp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint32",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "tmp",
          "type": "uint32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint40",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "tmp",
          "type": "uint40"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint48",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "tmp",
          "type": "uint48"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint56",
      "outputs": [
        {
          "internalType": "uint56",
          "name": "tmp",
          "type": "uint56"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint64",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "tmp",
          "type": "uint64"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint8",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "tmp",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_bytes",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "toUint96",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "tmp",
          "type": "uint96"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xca632af1adb5fdedcc0c8a5fed3ae93fc597befcda26659ded649e8c1bff2aea",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1411964",
    "logsBloom": "0x
    "blockHash": "0xb560842e001eb2edab0fe829d4b5ce3688114c21c2743034302921ac17e6ba6c",
    "transactionHash": "0xca632af1adb5fdedcc0c8a5fed3ae93fc597befcda26659ded649e8c1bff2aea",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1411964",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76161a4d293fda067ec40d2b20404a49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_preBytes\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_postBytes\",\"type\":\"bytes\"}],\"name\":\"equal\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_length\",\"type\":\"uint256\"}],\"name\":\"slice\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tmp\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toByes7\",\"outputs\":[{\"internalType\":\"bytes7\",\"name\":\"tmp\",\"type\":\"bytes7\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toBytes1\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"tmp\",\"type\":\"bytes1\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toBytes12\",\"outputs\":[{\"internalType\":\"bytes12\",\"name\":\"tmp\",\"type\":\"bytes12\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toBytes16\",\"outputs\":[{\"internalType\":\"bytes12\",\"name\":\"tmp\",\"type\":\"bytes12\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toBytes2\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"tmp\",\"type\":\"bytes2\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toBytes3\",\"outputs\":[{\"internalType\":\"bytes3\",\"name\":\"tmp\",\"type\":\"bytes3\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toBytes32\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"tmp\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toBytes4\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"tmp\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toBytes5\",\"outputs\":[{\"internalType\":\"bytes5\",\"name\":\"tmp\",\"type\":\"bytes5\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toBytes6\",\"outputs\":[{\"internalType\":\"bytes6\",\"name\":\"tmp\",\"type\":\"bytes6\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toBytes8\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"tmp\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint128\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"tmp\",\"type\":\"uint128\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"}],\"name\":\"toUint16\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tmp\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint16\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"tmp\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint24\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"tmp\",\"type\":\"uint24\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint256\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"tmp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint32\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"tmp\",\"type\":\"uint32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint40\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"tmp\",\"type\":\"uint40\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint48\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"tmp\",\"type\":\"uint48\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint56\",\"outputs\":[{\"internalType\":\"uint56\",\"name\":\"tmp\",\"type\":\"uint56\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint64\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"tmp\",\"type\":\"uint64\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint8\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"tmp\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_bytes\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"toUint96\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"tmp\",\"type\":\"uint96\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/utils/Bytes.sol\":\"Bytes\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/lib/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com> from Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Bytes {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) public pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (address tmp)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint8 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toBytes1(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes1 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toBytes1_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint16 tmp)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x2), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes) public pure returns (uint16 tmp) {\\n        return toUint16(_bytes, 0);\\n    }\\n\\n    function toBytes2(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes2 tmp)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toBytes2_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x2), _start))\\n        }\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint24 tmp)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x3), _start))\\n        }\\n    }\\n\\n    function toBytes3(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes3 tmp)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toBytes3_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x3), _start))\\n        }\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint32 tmp)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x4), _start))\\n        }\\n    }\\n\\n    function toBytes4(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes4 tmp)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toBytes4_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x4), _start))\\n        }\\n    }\\n\\n    function toUint40(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint40 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toUint40_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toBytes5(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes5 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toBytes5_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toUint48(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint48 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toUint48_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toBytes6(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes6 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toBytes6_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toUint56(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint56 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toUint56_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toByes7(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes7 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toBytes7_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toBytes8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toBytes8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint96 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toBytes12(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toBytes12_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint128 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toBytes16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toBytes16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint256 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes32 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xbfd0cd353b06027abbfc1b20891a58f98db3736432675af56622ee3ccb825a55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6118b061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101c35760003560e01c80639ae4c3d111610103578063c29616bd116100a1578063e00413961161007b578063e00413961461047d578063f1142fb31461049d578063f647f8fb146104b0578063f83b670f146104d057600080fd5b8063c29616bd1461041d578063d1ffb5611461043d578063d442584f1461045d57600080fd5b8063a8d8f00f116100dd578063a8d8f00f146103c4578063b5cdf924146103e4578063b63711df146103f7578063be8b34301461040a57600080fd5b80639ae4c3d1146103645780639cee499e14610384578063a5eb31ee146103a457600080fd5b80634a3b8fb71161017057806385581ce31161014a57806385581ce3146102e4578063913c97b41461030457806397e6175c1461032457806399dd9bd71461034457600080fd5b80634a3b8fb7146102845780634d66a2ae146102a45780635ef84930146102c457600080fd5b8063235266d2116101a1578063235266d21461023157806326ccb27014610244578063481377091461026457600080fd5b8063042aa084146101c857806305d3bb74146101f15780631a7431ef14610211575b600080fd5b6101db6101d6366004610c92565b6104f0565b6040516101e89190610d13565b60405180910390f35b6102046101ff366004610c92565b61052f565b6040516101e89190610d2d565b61022461021f366004610d3b565b610565565b6040516101e89190610d91565b61022461023f366004610d9f565b61061b565b610257610252366004610c92565b61067f565b6040516101e89190610e03565b610277610272366004610c92565b6106b5565b6040516101e89190610e1a565b610297610292366004610c92565b6106eb565b6040516101e89190610e50565b6102b76102b2366004610e5e565b610721565b6040516101e89190610ea3565b6102d76102d2366004610c92565b61072e565b6040516101e89190610ebf565b6102f76102f2366004610c92565b61075b565b6040516101e89190610ef5565b610317610312366004610c92565b610788565b6040516101e89190610f1b565b610337610332366004610c92565b6107be565b6040516101e89190610f51565b610357610352366004610c92565b6107f4565b6040516101e89190610f65565b610377610372366004610c92565b61082a565b6040516101e89190610f83565b610397610392366004610c92565b610860565b6040516101e89190610fb9565b6103b76103b2366004610c92565b610896565b6040516101e89190610fd2565b6103d76103d2366004610c92565b6108c3565b6040516101e89190610fef565b6103576103f2366004610c92565b6108f9565b610377610405366004610c92565b610926565b6102b7610418366004610c92565b610953565b61043061042b366004610c92565b610980565b6040516101e89190611025565b61045061044b366004610c92565b6109ad565b6040516101e89190611047565b61047061046b366004610c92565b6109da565b6040516101e89190611062565b61049061048b366004611070565b610a07565b6040516101e8919061113c565b6103376104ab366004610c92565b610acf565b6104c36104be366004610c92565b610afc565b6040516101e8919061117b565b6104e36104de366004610c92565b610b42565b6040516101e891906111b1565b60006104fd8260066111ee565b835110156105265760405162461bcd60e51b815260040161051d9061123a565b60405180910390fd5b50016006015190565b600061053c8260046111ee565b8351101561055c5760405162461bcd60e51b815260040161051d9061127c565b50016004015190565b60008060019050835460026001808316156101000203821604845180821460018114610594576000945061060d565b821561060d5760208310600181146105f257600189600052602060002060208a018581015b6002848284100114156105e95781518354146105d85760009950600093505b6001830192506020820191506105b9565b5050505061060b565b6101008086040294506020880151851461060b57600095505b505b509293505050505b92915050565b8151815160009160019181148083146106375760009250610675565b600160208701838101602088015b6002848385100114156106705780518351146106645760009650600093505b60209283019201610645565b505050505b5090949350505050565b600061068c8260026111ee565b835110156106ac5760405162461bcd60e51b815260040161051d906112be565b50016002015190565b60006106c28260016111ee565b835110156106e25760405162461bcd60e51b815260040161051d90611300565b50016001015190565b60006106f88260036111ee565b835110156107185760405162461bcd60e51b815260040161051d90611342565b50016003015190565b6000610615826000610953565b600061073b8260066111ee565b835110156105265760405162461bcd60e51b815260040161051d90611384565b60006107688260046111ee565b8351101561055c5760405162461bcd60e51b815260040161051d906113c6565b60006107958260106111ee565b835110156107b55760405162461bcd60e51b815260040161051d90611408565b50016010015190565b60006107cb82600c6111ee565b835110156107eb5760405162461bcd60e51b815260040161051d9061144a565b5001600c015190565b60006108018260206111ee565b835110156108215760405162461bcd60e51b815260040161051d9061148c565b50016020015190565b60006108378260086111ee565b835110156108575760405162461bcd60e51b815260040161051d906114ce565b50016008015190565b600061086d8260056111ee565b8351101561088d5760405162461bcd60e51b815260040161051d90611510565b50016005015190565b60006108a38260036111ee565b835110156107185760405162461bcd60e51b815260040161051d90611552565b60006108d08260076111ee565b835110156108f05760405162461bcd60e51b815260040161051d90611594565b50016007015190565b60006109068260206111ee565b835110156108215760405162461bcd60e51b815260040161051d906115d6565b60006109338260086111ee565b835110156108575760405162461bcd60e51b815260040161051d90611618565b60006109608260026111ee565b835110156106ac5760405162461bcd60e51b815260040161051d9061165a565b600061098d8260076111ee565b835110156108f05760405162461bcd60e51b815260040161051d9061169c565b60006109ba82600c6111ee565b835110156107eb5760405162461bcd60e51b815260040161051d906116de565b60006109e78260056111ee565b8351101561088d5760405162461bcd60e51b815260040161051d90611720565b606081610a1581601f6111ee565b1015610a335760405162461bcd60e51b815260040161051d90611762565b610a3d82846111ee565b84511015610a5d5760405162461bcd60e51b815260040161051d906117a4565b606082158015610a7c5760405191506000825260208201604052610ac6565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ab5578051835260209283019201610a9d565b5050858452601f01601f1916604052505b50949350505050565b6000610adc8260106111ee565b835110156107b55760405162461bcd60e51b815260040161051d906117e6565b6000610b098260146111ee565b83511015610b295760405162461bcd60e51b815260040161051d90611828565b5001602001516c01000000000000000000000000900490565b6000610b4f8260016111ee565b835110156106e25760405162461bcd60e51b815260040161051d9061186a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610bc457610bc4610b6f565b6040525050565b6000610bd660405190565b9050610be28282610b9e565b919050565b600067ffffffffffffffff821115610c0157610c01610b6f565b601f19601f83011660200192915050565b82818337506000910152565b6000610c31610c2c84610be7565b610bcb565b905082815260208101848484011115610c4c57610c4c600080fd5b610c57848285610c12565b509392505050565b600082601f830112610c7357610c73600080fd5b8135610c83848260208601610c1e565b949350505050565b8035610615565b60008060408385031215610ca857610ca8600080fd5b823567ffffffffffffffff811115610cc257610cc2600080fd5b610cce85828601610c5f565b9250506020610cdf85828601610c8b565b9150509250929050565b7fffffffffffff000000000000000000000000000000000000000000000000000081165b82525050565b602081016106158284610ce9565b63ffffffff8116610d0d565b602081016106158284610d21565b60008060408385031215610d5157610d51600080fd5b6000610d5d8585610c8b565b925050602083013567ffffffffffffffff811115610d7d57610d7d600080fd5b610cdf85828601610c5f565b801515610d0d565b602081016106158284610d89565b60008060408385031215610db557610db5600080fd5b823567ffffffffffffffff811115610dcf57610dcf600080fd5b610d5d85828601610c5f565b7fffff0000000000000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284610ddb565b60ff8116610d0d565b602081016106158284610e11565b7fffffff00000000000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284610e28565b600060208284031215610e7357610e73600080fd5b813567ffffffffffffffff811115610e8d57610e8d600080fd5b610c8384828501610c5f565b61ffff8116610d0d565b602081016106158284610e99565b65ffffffffffff8116610d0d565b602081016106158284610eb1565b7fffffffff000000000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284610ecd565b6fffffffffffffffffffffffffffffffff8116610d0d565b602081016106158284610f03565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008116610d0d565b602081016106158284610f29565b80610d0d565b602081016106158284610f5f565b67ffffffffffffffff8116610d0d565b602081016106158284610f73565b7fffffffffff0000000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284610f91565b62ffffff8116610d0d565b602081016106158284610fc7565b66ffffffffffffff8116610d0d565b602081016106158284610fe0565b7fffffffffffffff000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284610ffd565b6bffffffffffffffffffffffff8116610d0d565b602081016106158284611033565b64ffffffffff8116610d0d565b602081016106158284611055565b60008060006060848603121561108857611088600080fd5b833567ffffffffffffffff8111156110a2576110a2600080fd5b6110ae86828701610c5f565b93505060206110bf86828701610c8b565b92505060406110d086828701610c8b565b9150509250925092565b60005b838110156110f55781810151838201526020016110dd565b83811115611104576000848401525b50505050565b6000611114825190565b80845260208401935061112b8185602086016110da565b601f01601f19169290920192915050565b6020808252810161114d818461110a565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff8216610615565b610d0d81611154565b602081016106158284611172565b7fff000000000000000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284611189565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115611201576112016111bf565b500190565b60148152602081017f746f4279746573365f6f75744f66426f756e6473000000000000000000000000815290505b60200190565b6020808252810161061581611206565b60148152602081017f746f55696e7433325f6f75744f66426f756e647300000000000000000000000081529050611234565b602080825281016106158161124a565b60148152602081017f746f4279746573325f6f75744f66426f756e647300000000000000000000000081529050611234565b602080825281016106158161128c565b60138152602081017f746f55696e74385f6f75744f66426f756e64730000000000000000000000000081529050611234565b60208082528101610615816112ce565b60148152602081017f746f4279746573335f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611310565b60148152602081017f746f55696e7434385f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611352565b60148152602081017f746f4279746573345f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611394565b60158152602081017f746f55696e743132385f6f75744f66426f756e6473000000000000000000000081529050611234565b60208082528101610615816113d6565b60158152602081017f746f427974657331325f6f75744f66426f756e6473000000000000000000000081529050611234565b6020808252810161061581611418565b60158152602081017f746f427974657333325f6f75744f66426f756e6473000000000000000000000081529050611234565b602080825281016106158161145a565b60148152602081017f746f55696e7436345f6f75744f66426f756e647300000000000000000000000081529050611234565b602080825281016106158161149c565b60148152602081017f746f4279746573355f6f75744f66426f756e647300000000000000000000000081529050611234565b60208082528101610615816114de565b60148152602081017f746f55696e7432345f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611520565b60148152602081017f746f55696e7435365f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611562565b60158152602081017f746f55696e743235365f6f75744f66426f756e6473000000000000000000000081529050611234565b60208082528101610615816115a4565b60148152602081017f746f4279746573385f6f75744f66426f756e647300000000000000000000000081529050611234565b60208082528101610615816115e6565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611628565b60148152602081017f746f4279746573375f6f75744f66426f756e647300000000000000000000000081529050611234565b602080825281016106158161166a565b60148152602081017f746f55696e7439365f6f75744f66426f756e647300000000000000000000000081529050611234565b60208082528101610615816116ac565b60148152602081017f746f55696e7434305f6f75744f66426f756e647300000000000000000000000081529050611234565b60208082528101610615816116ee565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050611234565b6020808252810161061581611730565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050611234565b6020808252810161061581611772565b60158152602081017f746f427974657331365f6f75744f66426f756e6473000000000000000000000081529050611234565b60208082528101610615816117b4565b60158152602081017f746f416464726573735f6f75744f66426f756e6473000000000000000000000081529050611234565b60208082528101610615816117f6565b60148152602081017f746f4279746573315f6f75744f66426f756e647300000000000000000000000081529050611234565b602080825281016106158161183856fea26469706673582212204ac75897dcf21b826fc4272b68ff39789dc72f0ce83b23b984a5c2158749475364736f6c634300080c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101c35760003560e01c80639ae4c3d111610103578063c29616bd116100a1578063e00413961161007b578063e00413961461047d578063f1142fb31461049d578063f647f8fb146104b0578063f83b670f146104d057600080fd5b8063c29616bd1461041d578063d1ffb5611461043d578063d442584f1461045d57600080fd5b8063a8d8f00f116100dd578063a8d8f00f146103c4578063b5cdf924146103e4578063b63711df146103f7578063be8b34301461040a57600080fd5b80639ae4c3d1146103645780639cee499e14610384578063a5eb31ee146103a457600080fd5b80634a3b8fb71161017057806385581ce31161014a57806385581ce3146102e4578063913c97b41461030457806397e6175c1461032457806399dd9bd71461034457600080fd5b80634a3b8fb7146102845780634d66a2ae146102a45780635ef84930146102c457600080fd5b8063235266d2116101a1578063235266d21461023157806326ccb27014610244578063481377091461026457600080fd5b8063042aa084146101c857806305d3bb74146101f15780631a7431ef14610211575b600080fd5b6101db6101d6366004610c92565b6104f0565b6040516101e89190610d13565b60405180910390f35b6102046101ff366004610c92565b61052f565b6040516101e89190610d2d565b61022461021f366004610d3b565b610565565b6040516101e89190610d91565b61022461023f366004610d9f565b61061b565b610257610252366004610c92565b61067f565b6040516101e89190610e03565b610277610272366004610c92565b6106b5565b6040516101e89190610e1a565b610297610292366004610c92565b6106eb565b6040516101e89190610e50565b6102b76102b2366004610e5e565b610721565b6040516101e89190610ea3565b6102d76102d2366004610c92565b61072e565b6040516101e89190610ebf565b6102f76102f2366004610c92565b61075b565b6040516101e89190610ef5565b610317610312366004610c92565b610788565b6040516101e89190610f1b565b610337610332366004610c92565b6107be565b6040516101e89190610f51565b610357610352366004610c92565b6107f4565b6040516101e89190610f65565b610377610372366004610c92565b61082a565b6040516101e89190610f83565b610397610392366004610c92565b610860565b6040516101e89190610fb9565b6103b76103b2366004610c92565b610896565b6040516101e89190610fd2565b6103d76103d2366004610c92565b6108c3565b6040516101e89190610fef565b6103576103f2366004610c92565b6108f9565b610377610405366004610c92565b610926565b6102b7610418366004610c92565b610953565b61043061042b366004610c92565b610980565b6040516101e89190611025565b61045061044b366004610c92565b6109ad565b6040516101e89190611047565b61047061046b366004610c92565b6109da565b6040516101e89190611062565b61049061048b366004611070565b610a07565b6040516101e8919061113c565b6103376104ab366004610c92565b610acf565b6104c36104be366004610c92565b610afc565b6040516101e8919061117b565b6104e36104de366004610c92565b610b42565b6040516101e891906111b1565b60006104fd8260066111ee565b835110156105265760405162461bcd60e51b815260040161051d9061123a565b60405180910390fd5b50016006015190565b600061053c8260046111ee565b8351101561055c5760405162461bcd60e51b815260040161051d9061127c565b50016004015190565b60008060019050835460026001808316156101000203821604845180821460018114610594576000945061060d565b821561060d5760208310600181146105f257600189600052602060002060208a018581015b6002848284100114156105e95781518354146105d85760009950600093505b6001830192506020820191506105b9565b5050505061060b565b6101008086040294506020880151851461060b57600095505b505b509293505050505b92915050565b8151815160009160019181148083146106375760009250610675565b600160208701838101602088015b6002848385100114156106705780518351146106645760009650600093505b60209283019201610645565b505050505b5090949350505050565b600061068c8260026111ee565b835110156106ac5760405162461bcd60e51b815260040161051d906112be565b50016002015190565b60006106c28260016111ee565b835110156106e25760405162461bcd60e51b815260040161051d90611300565b50016001015190565b60006106f88260036111ee565b835110156107185760405162461bcd60e51b815260040161051d90611342565b50016003015190565b6000610615826000610953565b600061073b8260066111ee565b835110156105265760405162461bcd60e51b815260040161051d90611384565b60006107688260046111ee565b8351101561055c5760405162461bcd60e51b815260040161051d906113c6565b60006107958260106111ee565b835110156107b55760405162461bcd60e51b815260040161051d90611408565b50016010015190565b60006107cb82600c6111ee565b835110156107eb5760405162461bcd60e51b815260040161051d9061144a565b5001600c015190565b60006108018260206111ee565b835110156108215760405162461bcd60e51b815260040161051d9061148c565b50016020015190565b60006108378260086111ee565b835110156108575760405162461bcd60e51b815260040161051d906114ce565b50016008015190565b600061086d8260056111ee565b8351101561088d5760405162461bcd60e51b815260040161051d90611510565b50016005015190565b60006108a38260036111ee565b835110156107185760405162461bcd60e51b815260040161051d90611552565b60006108d08260076111ee565b835110156108f05760405162461bcd60e51b815260040161051d90611594565b50016007015190565b60006109068260206111ee565b835110156108215760405162461bcd60e51b815260040161051d906115d6565b60006109338260086111ee565b835110156108575760405162461bcd60e51b815260040161051d90611618565b60006109608260026111ee565b835110156106ac5760405162461bcd60e51b815260040161051d9061165a565b600061098d8260076111ee565b835110156108f05760405162461bcd60e51b815260040161051d9061169c565b60006109ba82600c6111ee565b835110156107eb5760405162461bcd60e51b815260040161051d906116de565b60006109e78260056111ee565b8351101561088d5760405162461bcd60e51b815260040161051d90611720565b606081610a1581601f6111ee565b1015610a335760405162461bcd60e51b815260040161051d90611762565b610a3d82846111ee565b84511015610a5d5760405162461bcd60e51b815260040161051d906117a4565b606082158015610a7c5760405191506000825260208201604052610ac6565b6040519150601f8416801560200281840101858101878315602002848b0101015b81831015610ab5578051835260209283019201610a9d565b5050858452601f01601f1916604052505b50949350505050565b6000610adc8260106111ee565b835110156107b55760405162461bcd60e51b815260040161051d906117e6565b6000610b098260146111ee565b83511015610b295760405162461bcd60e51b815260040161051d90611828565b5001602001516c01000000000000000000000000900490565b6000610b4f8260016111ee565b835110156106e25760405162461bcd60e51b815260040161051d9061186a565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610bc457610bc4610b6f565b6040525050565b6000610bd660405190565b9050610be28282610b9e565b919050565b600067ffffffffffffffff821115610c0157610c01610b6f565b601f19601f83011660200192915050565b82818337506000910152565b6000610c31610c2c84610be7565b610bcb565b905082815260208101848484011115610c4c57610c4c600080fd5b610c57848285610c12565b509392505050565b600082601f830112610c7357610c73600080fd5b8135610c83848260208601610c1e565b949350505050565b8035610615565b60008060408385031215610ca857610ca8600080fd5b823567ffffffffffffffff811115610cc257610cc2600080fd5b610cce85828601610c5f565b9250506020610cdf85828601610c8b565b9150509250929050565b7fffffffffffff000000000000000000000000000000000000000000000000000081165b82525050565b602081016106158284610ce9565b63ffffffff8116610d0d565b602081016106158284610d21565b60008060408385031215610d5157610d51600080fd5b6000610d5d8585610c8b565b925050602083013567ffffffffffffffff811115610d7d57610d7d600080fd5b610cdf85828601610c5f565b801515610d0d565b602081016106158284610d89565b60008060408385031215610db557610db5600080fd5b823567ffffffffffffffff811115610dcf57610dcf600080fd5b610d5d85828601610c5f565b7fffff0000000000000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284610ddb565b60ff8116610d0d565b602081016106158284610e11565b7fffffff00000000000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284610e28565b600060208284031215610e7357610e73600080fd5b813567ffffffffffffffff811115610e8d57610e8d600080fd5b610c8384828501610c5f565b61ffff8116610d0d565b602081016106158284610e99565b65ffffffffffff8116610d0d565b602081016106158284610eb1565b7fffffffff000000000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284610ecd565b6fffffffffffffffffffffffffffffffff8116610d0d565b602081016106158284610f03565b7fffffffffffffffffffffffff00000000000000000000000000000000000000008116610d0d565b602081016106158284610f29565b80610d0d565b602081016106158284610f5f565b67ffffffffffffffff8116610d0d565b602081016106158284610f73565b7fffffffffff0000000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284610f91565b62ffffff8116610d0d565b602081016106158284610fc7565b66ffffffffffffff8116610d0d565b602081016106158284610fe0565b7fffffffffffffff000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284610ffd565b6bffffffffffffffffffffffff8116610d0d565b602081016106158284611033565b64ffffffffff8116610d0d565b602081016106158284611055565b60008060006060848603121561108857611088600080fd5b833567ffffffffffffffff8111156110a2576110a2600080fd5b6110ae86828701610c5f565b93505060206110bf86828701610c8b565b92505060406110d086828701610c8b565b9150509250925092565b60005b838110156110f55781810151838201526020016110dd565b83811115611104576000848401525b50505050565b6000611114825190565b80845260208401935061112b8185602086016110da565b601f01601f19169290920192915050565b6020808252810161114d818461110a565b9392505050565b600073ffffffffffffffffffffffffffffffffffffffff8216610615565b610d0d81611154565b602081016106158284611172565b7fff000000000000000000000000000000000000000000000000000000000000008116610d0d565b602081016106158284611189565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008219821115611201576112016111bf565b500190565b60148152602081017f746f4279746573365f6f75744f66426f756e6473000000000000000000000000815290505b60200190565b6020808252810161061581611206565b60148152602081017f746f55696e7433325f6f75744f66426f756e647300000000000000000000000081529050611234565b602080825281016106158161124a565b60148152602081017f746f4279746573325f6f75744f66426f756e647300000000000000000000000081529050611234565b602080825281016106158161128c565b60138152602081017f746f55696e74385f6f75744f66426f756e64730000000000000000000000000081529050611234565b60208082528101610615816112ce565b60148152602081017f746f4279746573335f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611310565b60148152602081017f746f55696e7434385f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611352565b60148152602081017f746f4279746573345f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611394565b60158152602081017f746f55696e743132385f6f75744f66426f756e6473000000000000000000000081529050611234565b60208082528101610615816113d6565b60158152602081017f746f427974657331325f6f75744f66426f756e6473000000000000000000000081529050611234565b6020808252810161061581611418565b60158152602081017f746f427974657333325f6f75744f66426f756e6473000000000000000000000081529050611234565b602080825281016106158161145a565b60148152602081017f746f55696e7436345f6f75744f66426f756e647300000000000000000000000081529050611234565b602080825281016106158161149c565b60148152602081017f746f4279746573355f6f75744f66426f756e647300000000000000000000000081529050611234565b60208082528101610615816114de565b60148152602081017f746f55696e7432345f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611520565b60148152602081017f746f55696e7435365f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611562565b60158152602081017f746f55696e743235365f6f75744f66426f756e6473000000000000000000000081529050611234565b60208082528101610615816115a4565b60148152602081017f746f4279746573385f6f75744f66426f756e647300000000000000000000000081529050611234565b60208082528101610615816115e6565b60148152602081017f746f55696e7431365f6f75744f66426f756e647300000000000000000000000081529050611234565b6020808252810161061581611628565b60148152602081017f746f4279746573375f6f75744f66426f756e647300000000000000000000000081529050611234565b602080825281016106158161166a565b60148152602081017f746f55696e7439365f6f75744f66426f756e647300000000000000000000000081529050611234565b60208082528101610615816116ac565b60148152602081017f746f55696e7434305f6f75744f66426f756e647300000000000000000000000081529050611234565b60208082528101610615816116ee565b600e8152602081017f736c6963655f6f766572666c6f7700000000000000000000000000000000000081529050611234565b6020808252810161061581611730565b60118152602081017f736c6963655f6f75744f66426f756e647300000000000000000000000000000081529050611234565b6020808252810161061581611772565b60158152602081017f746f427974657331365f6f75744f66426f756e6473000000000000000000000081529050611234565b60208082528101610615816117b4565b60158152602081017f746f416464726573735f6f75744f66426f756e6473000000000000000000000081529050611234565b60208082528101610615816117f6565b60148152602081017f746f4279746573315f6f75744f66426f756e647300000000000000000000000081529050611234565b602080825281016106158161183856fea26469706673582212204ac75897dcf21b826fc4272b68ff39789dc72f0ce83b23b984a5c2158749475364736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}