{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "a",
          "type": "uint256"
        }
      ],
      "name": "_joinReferenceType",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "tempBytes",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes16[]",
          "name": "a",
          "type": "bytes16[]"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "a",
          "type": "bytes[]"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4[]",
          "name": "a",
          "type": "bytes4[]"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "a",
          "type": "bytes32[]"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes3[]",
          "name": "a",
          "type": "bytes3[]"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes8[]",
          "name": "a",
          "type": "bytes8[]"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "a",
          "type": "string[]"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes2[]",
          "name": "a",
          "type": "bytes2[]"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "a",
          "type": "uint16[]"
        }
      ],
      "name": "join",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa00f34eb9af4da158e774eb36cfa1ab6ba8036a182f60d94b868599736548fa7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "745073",
    "logsBloom": "0x
    "blockHash": "0xaa2751336b6c37b499b74e77a5babafaeaca3bbfd831e20150dd47d1d7ceb3be",
    "transactionHash": "0xa00f34eb9af4da158e774eb36cfa1ab6ba8036a182f60d94b868599736548fa7",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "745073",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76161a4d293fda067ec40d2b20404a49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"a\",\"type\":\"uint256\"}],\"name\":\"_joinReferenceType\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"tempBytes\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes16[]\",\"name\":\"a\",\"type\":\"bytes16[]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"a\",\"type\":\"bytes[]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4[]\",\"name\":\"a\",\"type\":\"bytes4[]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"a\",\"type\":\"bytes32[]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes3[]\",\"name\":\"a\",\"type\":\"bytes3[]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes8[]\",\"name\":\"a\",\"type\":\"bytes8[]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"a\",\"type\":\"string[]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes2[]\",\"name\":\"a\",\"type\":\"bytes2[]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"a\",\"type\":\"uint16[]\"}],\"name\":\"join\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"join(uint16[])\":{\"details\":\"Join the underlying array of bytes2 to a string.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/utils/Array.sol\":\"Array\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"contracts/lib/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com>\\n *\\n * @notice An attempt at implementing some of the widely used javascript's Array functions in solidity.\\n */\\npragma solidity ^0.8.12;\\n\\nerror EmptyArray();\\n\\nlibrary Array {\\n    function join(string[] memory a) public pure returns (string memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return string(_joinReferenceType(pointer));\\n    }\\n\\n    function join(bytes[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinReferenceType(pointer);\\n    }\\n\\n    function join(bytes2[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 0);\\n    }\\n\\n    /// @dev Join the underlying array of bytes2 to a string.\\n    function join(uint16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 256 - 16);\\n    }\\n\\n    function join(bytes3[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 3, 0);\\n    }\\n\\n    function join(bytes4[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 4, 0);\\n    }\\n\\n    function join(bytes8[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 8, 0);\\n    }\\n\\n    function join(bytes16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 16, 0);\\n    }\\n\\n    function join(bytes32[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 32, 0);\\n    }\\n\\n    function _joinValueType(\\n        uint256 a,\\n        uint256 typeLength,\\n        uint256 shiftLeft\\n    ) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Initialize the length of the final bytes: length is typeLength x inputLength (array of bytes4)\\n            mstore(tempBytes, mul(inputLength, typeLength))\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Iterate over all bytes4\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentSlot := shl(shiftLeft, mload(pointer))\\n                mstore(memoryPointer, currentSlot)\\n                memoryPointer := add(memoryPointer, typeLength)\\n            }\\n\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n\\n    function _joinReferenceType(uint256 a)\\n        public\\n        pure\\n        returns (bytes memory tempBytes)\\n    {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n            }\\n\\n            mstore(tempBytes, stringLength)\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xce9af799b9822afd98b04a6a909873417cf0b71554d25b624f608b3673feeee1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610c8d61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100c85760003560e01c80638af7caa911610080578063c43b4a8a11610065578063c43b4a8a14610163578063c9fa24d414610176578063f25f142d1461018957600080fd5b80638af7caa9146101425780639bce4e141461015557600080fd5b80632fdc8c20116100b15780632fdc8c20146101095780633e815a641461011c578063754536da1461012f57600080fd5b80632a2b9e11146100cd5780632a7f1c04146100f6575b600080fd5b6100e06100db366004610455565b61019c565b6040516100ed91906104f2565b60405180910390f35b6100e061010436600461062a565b6101b3565b6100e061011736600461070b565b6101bf565b6100e061012a3660046107ca565b6101cf565b6100e061013d3660046108ab565b6101df565b6100e061015036600461098c565b6101ef565b6100e0610104366004610a57565b6100e0610171366004610a92565b6101ff565b6100e0610184366004610b59565b61027f565b6100e0610197366004610c1c565b61028f565b6060816101ac816010600061029b565b9392505050565b6060816101ac816101ff565b6060816101ac816004600061029b565b6060816101ac816020600061029b565b6060816101ac816003600061029b565b6060816101ac816008600061029b565b60405181516020808301918102840181019084016000815b8381101561026b5780518051928301926020918201918104601f821615150160005b8181101561025b578351602082028a0152602084019350600181019050610239565b5050959095019450602001610217565b5084525050601f01601f1916604052919050565b6060816101ac816002600061029b565b6060816101ac81600260f05b60608084516020860160208202810160405193508683028452602084019250815b818110156102d6578051871b8452928701926020016102bc565b505050601f01601f191660405290509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610341576103416102ec565b6040525050565b600061035360405190565b905061035f828261031b565b919050565b600067ffffffffffffffff82111561037e5761037e6102ec565b5060209081020190565b7fffffffffffffffffffffffffffffffff0000000000000000000000000000000081165b81146103b757600080fd5b50565b80356103c581610388565b92915050565b60006103de6103d984610364565b610348565b838152905060208082019084028301858111156103fd576103fd600080fd5b835b8181101561041f5761041187826103ba565b8352602092830192016103ff565b5050509392505050565b600082601f83011261043d5761043d600080fd5b813561044d8482602086016103cb565b949350505050565b60006020828403121561046a5761046a600080fd5b813567ffffffffffffffff81111561048457610484600080fd5b61044d84828501610429565b60005b838110156104ab578181015183820152602001610493565b838111156104ba576000848401525b50505050565b60006104ca825190565b8084526020840193506104e1818560208601610490565b601f01601f19169290920192915050565b602080825281016101ac81846104c0565b600067ffffffffffffffff82111561051d5761051d6102ec565b601f19601f83011660200192915050565b82818337506000910152565b60006105486103d984610503565b90508281526020810184848401111561056357610563600080fd5b61056e84828561052e565b509392505050565b600082601f83011261058a5761058a600080fd5b813561044d84826020860161053a565b60006105a86103d984610364565b838152905060208082019084028301858111156105c7576105c7600080fd5b835b8181101561041f57803567ffffffffffffffff8111156105eb576105eb600080fd5b85016105f78882610576565b845250602092830192016105c9565b600082601f83011261061a5761061a600080fd5b813561044d84826020860161059a565b60006020828403121561063f5761063f600080fd5b813567ffffffffffffffff81111561065957610659600080fd5b61044d84828501610606565b7fffffffff0000000000000000000000000000000000000000000000000000000081166103ac565b80356103c581610665565b60006106a66103d984610364565b838152905060208082019084028301858111156106c5576106c5600080fd5b835b8181101561041f576106d9878261068d565b8352602092830192016106c7565b600082601f8301126106fb576106fb600080fd5b813561044d848260208601610698565b60006020828403121561072057610720600080fd5b813567ffffffffffffffff81111561073a5761073a600080fd5b61044d848285016106e7565b806103ac565b80356103c581610746565b60006107656103d984610364565b8381529050602080820190840283018581111561078457610784600080fd5b835b8181101561041f57610798878261074c565b835260209283019201610786565b600082601f8301126107ba576107ba600080fd5b813561044d848260208601610757565b6000602082840312156107df576107df600080fd5b813567ffffffffffffffff8111156107f9576107f9600080fd5b61044d848285016107a6565b7fffffff000000000000000000000000000000000000000000000000000000000081166103ac565b80356103c581610805565b60006108466103d984610364565b8381529050602080820190840283018581111561086557610865600080fd5b835b8181101561041f57610879878261082d565b835260209283019201610867565b600082601f83011261089b5761089b600080fd5b813561044d848260208601610838565b6000602082840312156108c0576108c0600080fd5b813567ffffffffffffffff8111156108da576108da600080fd5b61044d84828501610887565b7fffffffffffffffff00000000000000000000000000000000000000000000000081166103ac565b80356103c5816108e6565b60006109276103d984610364565b8381529050602080820190840283018581111561094657610946600080fd5b835b8181101561041f5761095a878261090e565b835260209283019201610948565b600082601f83011261097c5761097c600080fd5b813561044d848260208601610919565b6000602082840312156109a1576109a1600080fd5b813567ffffffffffffffff8111156109bb576109bb600080fd5b61044d84828501610968565b60006109d56103d984610364565b838152905060208082019084028301858111156109f4576109f4600080fd5b835b8181101561041f57803567ffffffffffffffff811115610a1857610a18600080fd5b8501610a248882610576565b845250602092830192016109f6565b600082601f830112610a4757610a47600080fd5b813561044d8482602086016109c7565b600060208284031215610a6c57610a6c600080fd5b813567ffffffffffffffff811115610a8657610a86600080fd5b61044d84828501610a33565b600060208284031215610aa757610aa7600080fd5b600061044d848461074c565b7fffff00000000000000000000000000000000000000000000000000000000000081166103ac565b80356103c581610ab3565b6000610af46103d984610364565b83815290506020808201908402830185811115610b1357610b13600080fd5b835b8181101561041f57610b278782610adb565b835260209283019201610b15565b600082601f830112610b4957610b49600080fd5b813561044d848260208601610ae6565b600060208284031215610b6e57610b6e600080fd5b813567ffffffffffffffff811115610b8857610b88600080fd5b61044d84828501610b35565b61ffff81166103ac565b80356103c581610b94565b6000610bb76103d984610364565b83815290506020808201908402830185811115610bd657610bd6600080fd5b835b8181101561041f57610bea8782610b9e565b835260209283019201610bd8565b600082601f830112610c0c57610c0c600080fd5b813561044d848260208601610ba9565b600060208284031215610c3157610c31600080fd5b813567ffffffffffffffff811115610c4b57610c4b600080fd5b61044d84828501610bf856fea2646970667358221220952f9457c383e8fa733d8b22b6ea72d46dca8d785b61897ea907c8ac8807585f64736f6c634300080c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100c85760003560e01c80638af7caa911610080578063c43b4a8a11610065578063c43b4a8a14610163578063c9fa24d414610176578063f25f142d1461018957600080fd5b80638af7caa9146101425780639bce4e141461015557600080fd5b80632fdc8c20116100b15780632fdc8c20146101095780633e815a641461011c578063754536da1461012f57600080fd5b80632a2b9e11146100cd5780632a7f1c04146100f6575b600080fd5b6100e06100db366004610455565b61019c565b6040516100ed91906104f2565b60405180910390f35b6100e061010436600461062a565b6101b3565b6100e061011736600461070b565b6101bf565b6100e061012a3660046107ca565b6101cf565b6100e061013d3660046108ab565b6101df565b6100e061015036600461098c565b6101ef565b6100e0610104366004610a57565b6100e0610171366004610a92565b6101ff565b6100e0610184366004610b59565b61027f565b6100e0610197366004610c1c565b61028f565b6060816101ac816010600061029b565b9392505050565b6060816101ac816101ff565b6060816101ac816004600061029b565b6060816101ac816020600061029b565b6060816101ac816003600061029b565b6060816101ac816008600061029b565b60405181516020808301918102840181019084016000815b8381101561026b5780518051928301926020918201918104601f821615150160005b8181101561025b578351602082028a0152602084019350600181019050610239565b5050959095019450602001610217565b5084525050601f01601f1916604052919050565b6060816101ac816002600061029b565b6060816101ac81600260f05b60608084516020860160208202810160405193508683028452602084019250815b818110156102d6578051871b8452928701926020016102bc565b505050601f01601f191660405290509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610341576103416102ec565b6040525050565b600061035360405190565b905061035f828261031b565b919050565b600067ffffffffffffffff82111561037e5761037e6102ec565b5060209081020190565b7fffffffffffffffffffffffffffffffff0000000000000000000000000000000081165b81146103b757600080fd5b50565b80356103c581610388565b92915050565b60006103de6103d984610364565b610348565b838152905060208082019084028301858111156103fd576103fd600080fd5b835b8181101561041f5761041187826103ba565b8352602092830192016103ff565b5050509392505050565b600082601f83011261043d5761043d600080fd5b813561044d8482602086016103cb565b949350505050565b60006020828403121561046a5761046a600080fd5b813567ffffffffffffffff81111561048457610484600080fd5b61044d84828501610429565b60005b838110156104ab578181015183820152602001610493565b838111156104ba576000848401525b50505050565b60006104ca825190565b8084526020840193506104e1818560208601610490565b601f01601f19169290920192915050565b602080825281016101ac81846104c0565b600067ffffffffffffffff82111561051d5761051d6102ec565b601f19601f83011660200192915050565b82818337506000910152565b60006105486103d984610503565b90508281526020810184848401111561056357610563600080fd5b61056e84828561052e565b509392505050565b600082601f83011261058a5761058a600080fd5b813561044d84826020860161053a565b60006105a86103d984610364565b838152905060208082019084028301858111156105c7576105c7600080fd5b835b8181101561041f57803567ffffffffffffffff8111156105eb576105eb600080fd5b85016105f78882610576565b845250602092830192016105c9565b600082601f83011261061a5761061a600080fd5b813561044d84826020860161059a565b60006020828403121561063f5761063f600080fd5b813567ffffffffffffffff81111561065957610659600080fd5b61044d84828501610606565b7fffffffff0000000000000000000000000000000000000000000000000000000081166103ac565b80356103c581610665565b60006106a66103d984610364565b838152905060208082019084028301858111156106c5576106c5600080fd5b835b8181101561041f576106d9878261068d565b8352602092830192016106c7565b600082601f8301126106fb576106fb600080fd5b813561044d848260208601610698565b60006020828403121561072057610720600080fd5b813567ffffffffffffffff81111561073a5761073a600080fd5b61044d848285016106e7565b806103ac565b80356103c581610746565b60006107656103d984610364565b8381529050602080820190840283018581111561078457610784600080fd5b835b8181101561041f57610798878261074c565b835260209283019201610786565b600082601f8301126107ba576107ba600080fd5b813561044d848260208601610757565b6000602082840312156107df576107df600080fd5b813567ffffffffffffffff8111156107f9576107f9600080fd5b61044d848285016107a6565b7fffffff000000000000000000000000000000000000000000000000000000000081166103ac565b80356103c581610805565b60006108466103d984610364565b8381529050602080820190840283018581111561086557610865600080fd5b835b8181101561041f57610879878261082d565b835260209283019201610867565b600082601f83011261089b5761089b600080fd5b813561044d848260208601610838565b6000602082840312156108c0576108c0600080fd5b813567ffffffffffffffff8111156108da576108da600080fd5b61044d84828501610887565b7fffffffffffffffff00000000000000000000000000000000000000000000000081166103ac565b80356103c5816108e6565b60006109276103d984610364565b8381529050602080820190840283018581111561094657610946600080fd5b835b8181101561041f5761095a878261090e565b835260209283019201610948565b600082601f83011261097c5761097c600080fd5b813561044d848260208601610919565b6000602082840312156109a1576109a1600080fd5b813567ffffffffffffffff8111156109bb576109bb600080fd5b61044d84828501610968565b60006109d56103d984610364565b838152905060208082019084028301858111156109f4576109f4600080fd5b835b8181101561041f57803567ffffffffffffffff811115610a1857610a18600080fd5b8501610a248882610576565b845250602092830192016109f6565b600082601f830112610a4757610a47600080fd5b813561044d8482602086016109c7565b600060208284031215610a6c57610a6c600080fd5b813567ffffffffffffffff811115610a8657610a86600080fd5b61044d84828501610a33565b600060208284031215610aa757610aa7600080fd5b600061044d848461074c565b7fffff00000000000000000000000000000000000000000000000000000000000081166103ac565b80356103c581610ab3565b6000610af46103d984610364565b83815290506020808201908402830185811115610b1357610b13600080fd5b835b8181101561041f57610b278782610adb565b835260209283019201610b15565b600082601f830112610b4957610b49600080fd5b813561044d848260208601610ae6565b600060208284031215610b6e57610b6e600080fd5b813567ffffffffffffffff811115610b8857610b88600080fd5b61044d84828501610b35565b61ffff81166103ac565b80356103c581610b94565b6000610bb76103d984610364565b83815290506020808201908402830185811115610bd657610bd6600080fd5b835b8181101561041f57610bea8782610b9e565b835260209283019201610bd8565b600082601f830112610c0c57610c0c600080fd5b813561044d848260208601610ba9565b600060208284031215610c3157610c31600080fd5b813567ffffffffffffffff811115610c4b57610c4b600080fd5b61044d84828501610bf856fea2646970667358221220952f9457c383e8fa733d8b22b6ea72d46dca8d785b61897ea907c8ac8807585f64736f6c634300080c0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "join(uint16[])": {
        "details": "Join the underlying array of bytes2 to a string."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}