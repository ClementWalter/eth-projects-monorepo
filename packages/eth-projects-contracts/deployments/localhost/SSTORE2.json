{
  "address": "0xfef965908D7Ce9A9fF8dE8401bE39121A17Aa99b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "WriteError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        }
      ],
      "name": "Write",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pointer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pointer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pointer",
          "type": "address"
        }
      ],
      "name": "read",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "write",
      "outputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x582ab28dbdebc1e62593c71f3f102c48301f7d129f55f26a192659b21a49bf1b",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0xfef965908D7Ce9A9fF8dE8401bE39121A17Aa99b",
    "transactionIndex": 0,
    "gasUsed": "449677",
    "logsBloom": "0x
    "blockHash": "0x85d014d2bce1af9a66126c1aeb44b8262a654a0fba69ab7af923c4945e84d5ec",
    "transactionHash": "0x582ab28dbdebc1e62593c71f3f102c48301f7d129f55f26a192659b21a49bf1b",
    "logs": [],
    "blockNumber": 6,
    "cumulativeGasUsed": "449677",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5a4065e98c83db14617d25d1485ebb78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"WriteError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"}],\"name\":\"Write\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pointer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"}],\"name\":\"read\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pointer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"read\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pointer\",\"type\":\"address\"}],\"name\":\"read\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"write\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Agustin Aguilar <aa@horizon.io>\",\"kind\":\"dev\",\"methods\":{\"read(address)\":{\"details\":\"The function is intended for reading pointers generated by `write`\",\"params\":{\"_pointer\":\"to be read\"},\"returns\":{\"_0\":\"data read from `_pointer` contract\"}},\"read(address,uint256)\":{\"details\":\"The function is intended for reading pointers generated by `write`\",\"params\":{\"_pointer\":\"to be read\",\"_start\":\"number of bytes to skip\"},\"returns\":{\"_0\":\"data read from `_pointer` contract\"}},\"read(address,uint256,uint256)\":{\"details\":\"The function is intended for reading pointers generated by `write`\",\"params\":{\"_end\":\"index before which to end extraction\",\"_pointer\":\"to be read\",\"_start\":\"number of bytes to skip\"},\"returns\":{\"_0\":\"data read from `_pointer` contract\"}},\"write(bytes)\":{\"details\":\"The pointer is a contract address with `_data` as code\",\"params\":{\"_data\":\"to be written\"},\"returns\":{\"pointer\":\"Pointer to the written `_data`\"}}},\"title\":\"A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"read(address)\":{\"notice\":\"Reads the contents of the `_pointer` code as data, skips the first byte\"},\"read(address,uint256)\":{\"notice\":\"Reads the contents of the `_pointer` code as data, skips the first byte\"},\"read(address,uint256,uint256)\":{\"notice\":\"Reads the contents of the `_pointer` code as data, skips the first byte\"},\"write(bytes)\":{\"notice\":\"Stores `_data` and returns `pointer` as key for later retrieval\"}},\"notice\":\"This is the exact same code but a contract with public instead of internal visibility. Readme: https://github.com/0xsequence/sstore2#readme\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/test_utils/SSTORE2.sol\":\"SSTORE2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"contracts/test_utils/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n  @notice This is the exact same code but a contract with public instead of internal visibility.\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\ncontract SSTORE2 {\\n    error WriteError();\\n\\n    event Write(address pointer);\\n\\n    /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n    function write(bytes memory _data) public returns (address pointer) {\\n        // Append 00 to _data so contract can't be called\\n        // Build init code\\n        bytes memory code = Bytecode.creationCodeFor(\\n            abi.encodePacked(hex\\\"00\\\", _data)\\n        );\\n\\n        // Deploy contract using create\\n        assembly {\\n            pointer := create(0, add(code, 32), mload(code))\\n        }\\n\\n        // Address MUST be non-zero\\n        if (pointer == address(0)) revert WriteError();\\n\\n        emit Write(pointer);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer) public view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n    function read(address _pointer, uint256 _start)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n    }\\n\\n    /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte\\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n    function read(\\n        address _pointer,\\n        uint256 _start,\\n        uint256 _end\\n    ) public view returns (bytes memory) {\\n        return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n    }\\n}\\n\",\"keccak256\":\"0xf0e4825ebe954513fa057cfd1c503d8afd3cfb9d75b8ce5785475268f82331ae\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610736806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063014c2add146100515780637ed0c3b21461007a5780638937dad81461009a578063a087a87e146100ad575b600080fd5b61006461005f366004610320565b6100c0565b60405161007191906103bf565b60405180910390f35b61008d6100883660046104ec565b6100e2565b6040516100719190610536565b6100646100a8366004610544565b6101a4565b6100646100bb366004610594565b6101cf565b60606100d9836100d18460016105e4565b6000196101db565b90505b92915050565b60008061010d836040516020016100f99190610629565b6040516020818303038152906040526102a3565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff8216610167576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f3d9850d7c40f30357297906847346c1d76b7ab7b248eb505c9b940534a680e57826040516101969190610536565b60405180910390a150919050565b60606101c5846101b58560016105e4565b6101c08560016105e4565b6101db565b90505b9392505050565b60606100dc8260016000195b6060833b806101fa5750506040805160208101909152600081526101c8565b808411156102185750506040805160208101909152600081526101c8565b83831015610261578084846040517f2c4a89fa00000000000000000000000000000000000000000000000000000000815260040161025893929190610644565b60405180910390fd5b83830384820360008282106102765782610278565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b60608151826040516020016102b99291906106af565b6040516020818303038152906040529050919050565b600073ffffffffffffffffffffffffffffffffffffffff82166100dc565b6102f6816102cf565b811461030157600080fd5b50565b80356100dc816102ed565b806102f6565b80356100dc8161030f565b6000806040838503121561033657610336600080fd5b60006103428585610304565b925050602061035385828601610315565b9150509250929050565b60005b83811015610378578181015183820152602001610360565b83811115610387576000848401525b50505050565b6000610397825190565b8084526020840193506103ae81856020860161035d565b601f01601f19169290920192915050565b602080825281016100d9818461038d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610425576104256103d0565b6040525050565b600061043760405190565b905061044382826103ff565b919050565b600067ffffffffffffffff821115610462576104626103d0565b601f19601f83011660200192915050565b82818337506000910152565b600061049261048d84610448565b61042c565b9050828152602081018484840111156104ad576104ad600080fd5b6104b8848285610473565b509392505050565b600082601f8301126104d4576104d4600080fd5b81356104e484826020860161047f565b949350505050565b60006020828403121561050157610501600080fd5b813567ffffffffffffffff81111561051b5761051b600080fd5b6104e4848285016104c0565b610530816102cf565b82525050565b602081016100dc8284610527565b60008060006060848603121561055c5761055c600080fd5b60006105688686610304565b935050602061057986828701610315565b925050604061058a86828701610315565b9150509250925092565b6000602082840312156105a9576105a9600080fd5b60006104e48484610304565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156105f7576105f76105b5565b500190565b600081525b60010190565b6000610611825190565b61061f81856020860161035d565b9290920192915050565b610632816105fc565b90506100dc8183610607565b80610530565b60608101610652828661063e565b61065f602083018561063e565b6104e4604083018461063e565b7f63000000000000000000000000000000000000000000000000000000000000008152610601565b60006100dc8260e01b90565b61053063ffffffff8216610694565b6106b88161066c565b90506106c481846106a0565b6004016106f4817f80600e6000396000f30000000000000000000000000000000000000000000000815260090190565b90506101c8818361060756fea2646970667358221220bc2dfe291285755343b834d6206cc0e078df48963cde7a8935c338b900eb23df64736f6c634300080c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c8063014c2add146100515780637ed0c3b21461007a5780638937dad81461009a578063a087a87e146100ad575b600080fd5b61006461005f366004610320565b6100c0565b60405161007191906103bf565b60405180910390f35b61008d6100883660046104ec565b6100e2565b6040516100719190610536565b6100646100a8366004610544565b6101a4565b6100646100bb366004610594565b6101cf565b60606100d9836100d18460016105e4565b6000196101db565b90505b92915050565b60008061010d836040516020016100f99190610629565b6040516020818303038152906040526102a3565b90508051602082016000f0915073ffffffffffffffffffffffffffffffffffffffff8216610167576040517f08d4abb600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f3d9850d7c40f30357297906847346c1d76b7ab7b248eb505c9b940534a680e57826040516101969190610536565b60405180910390a150919050565b60606101c5846101b58560016105e4565b6101c08560016105e4565b6101db565b90505b9392505050565b60606100dc8260016000195b6060833b806101fa5750506040805160208101909152600081526101c8565b808411156102185750506040805160208101909152600081526101c8565b83831015610261578084846040517f2c4a89fa00000000000000000000000000000000000000000000000000000000815260040161025893929190610644565b60405180910390fd5b83830384820360008282106102765782610278565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b60608151826040516020016102b99291906106af565b6040516020818303038152906040529050919050565b600073ffffffffffffffffffffffffffffffffffffffff82166100dc565b6102f6816102cf565b811461030157600080fd5b50565b80356100dc816102ed565b806102f6565b80356100dc8161030f565b6000806040838503121561033657610336600080fd5b60006103428585610304565b925050602061035385828601610315565b9150509250929050565b60005b83811015610378578181015183820152602001610360565b83811115610387576000848401525b50505050565b6000610397825190565b8084526020840193506103ae81856020860161035d565b601f01601f19169290920192915050565b602080825281016100d9818461038d565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610425576104256103d0565b6040525050565b600061043760405190565b905061044382826103ff565b919050565b600067ffffffffffffffff821115610462576104626103d0565b601f19601f83011660200192915050565b82818337506000910152565b600061049261048d84610448565b61042c565b9050828152602081018484840111156104ad576104ad600080fd5b6104b8848285610473565b509392505050565b600082601f8301126104d4576104d4600080fd5b81356104e484826020860161047f565b949350505050565b60006020828403121561050157610501600080fd5b813567ffffffffffffffff81111561051b5761051b600080fd5b6104e4848285016104c0565b610530816102cf565b82525050565b602081016100dc8284610527565b60008060006060848603121561055c5761055c600080fd5b60006105688686610304565b935050602061057986828701610315565b925050604061058a86828701610315565b9150509250925092565b6000602082840312156105a9576105a9600080fd5b60006104e48484610304565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600082198211156105f7576105f76105b5565b500190565b600081525b60010190565b6000610611825190565b61061f81856020860161035d565b9290920192915050565b610632816105fc565b90506100dc8183610607565b80610530565b60608101610652828661063e565b61065f602083018561063e565b6104e4604083018461063e565b7f63000000000000000000000000000000000000000000000000000000000000008152610601565b60006100dc8260e01b90565b61053063ffffffff8216610694565b6106b88161066c565b90506106c481846106a0565b6004016106f4817f80600e6000396000f30000000000000000000000000000000000000000000000815260090190565b90506101c8818361060756fea2646970667358221220bc2dfe291285755343b834d6206cc0e078df48963cde7a8935c338b900eb23df64736f6c634300080c0033",
  "devdoc": {
    "author": "Agustin Aguilar <aa@horizon.io>",
    "kind": "dev",
    "methods": {
      "read(address)": {
        "details": "The function is intended for reading pointers generated by `write`",
        "params": {
          "_pointer": "to be read"
        },
        "returns": {
          "_0": "data read from `_pointer` contract"
        }
      },
      "read(address,uint256)": {
        "details": "The function is intended for reading pointers generated by `write`",
        "params": {
          "_pointer": "to be read",
          "_start": "number of bytes to skip"
        },
        "returns": {
          "_0": "data read from `_pointer` contract"
        }
      },
      "read(address,uint256,uint256)": {
        "details": "The function is intended for reading pointers generated by `write`",
        "params": {
          "_end": "index before which to end extraction",
          "_pointer": "to be read",
          "_start": "number of bytes to skip"
        },
        "returns": {
          "_0": "data read from `_pointer` contract"
        }
      },
      "write(bytes)": {
        "details": "The pointer is a contract address with `_data` as code",
        "params": {
          "_data": "to be written"
        },
        "returns": {
          "pointer": "Pointer to the written `_data`"
        }
      }
    },
    "title": "A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "read(address)": {
        "notice": "Reads the contents of the `_pointer` code as data, skips the first byte"
      },
      "read(address,uint256)": {
        "notice": "Reads the contents of the `_pointer` code as data, skips the first byte"
      },
      "read(address,uint256,uint256)": {
        "notice": "Reads the contents of the `_pointer` code as data, skips the first byte"
      },
      "write(bytes)": {
        "notice": "Stores `_data` and returns `pointer` as key for later retrieval"
      }
    },
    "notice": "This is the exact same code but a contract with public instead of internal visibility. Readme: https://github.com/0xsequence/sstore2#readme",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}