{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characteristic",
          "type": "uint256"
        }
      ],
      "name": "CharacteristicOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trait",
          "type": "uint256"
        }
      ],
      "name": "TraitOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FILL_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEIGHT_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_END",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_START",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIDTH_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Y_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "rectBytes",
          "type": "bytes4"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "offsetX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offsetY",
          "type": "uint256"
        }
      ],
      "name": "decodeBytes4ToRect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "rectBytes",
          "type": "bytes4"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        }
      ],
      "name": "decodeBytes4ToRect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rectsBytes",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        }
      ],
      "name": "decodeBytesMemoryToRects",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "characteristicIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitIndex",
          "type": "uint256"
        }
      ],
      "name": "getTraitBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3f56dd75bda55f390212694c641b1c728cfc691e9cb7850c821fde1c2e0aeb3a",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "1240928",
    "logsBloom": "0x
    "blockHash": "0x5d805cd0031b79438f7e330900d497171df63087e46814dbeb95b9abdac6820c",
    "transactionHash": "0x3f56dd75bda55f390212694c641b1c728cfc691e9cb7850c821fde1c2e0aeb3a",
    "logs": [],
    "blockNumber": 5,
    "cumulativeGasUsed": "1240928",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "76161a4d293fda067ec40d2b20404a49",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characteristic\",\"type\":\"uint256\"}],\"name\":\"CharacteristicOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trait\",\"type\":\"uint256\"}],\"name\":\"TraitOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FILL_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEIGHT_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIDTH_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Y_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"rectBytes\",\"type\":\"bytes4\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"offsetX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsetY\",\"type\":\"uint256\"}],\"name\":\"decodeBytes4ToRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"rectBytes\",\"type\":\"bytes4\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"}],\"name\":\"decodeBytes4ToRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rectsBytes\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"}],\"name\":\"decodeBytesMemoryToRects\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characteristicIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitIndex\",\"type\":\"uint256\"}],\"name\":\"getTraitBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Clement Walter <clement0walter@gmail.com>\",\"kind\":\"dev\",\"methods\":{\"getTraitBytes(address,uint256,uint256)\":{\"details\":\"Retrieve the bytes for the given trait from the traits storage.\",\"params\":{\"characteristicIndex\":\"The index of the characteristic in the collection.\",\"pointer\":\"The pointer to the traits stored with SSTORE2.\",\"traitIndex\":\"The index of the trait in the characteristic.\"},\"returns\":{\"_0\":\"The bytes of the trait.\"}}},\"title\":\"RectRenderer   This library can be used to render on-chain images stored as a layering of rectangles.   The returned images is an url safe encoded image uri.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/renderers/RectRenderer.sol\":\"RectRenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"contracts/lib/renderers/RectRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Bytes} from \\\"../utils/Bytes.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\nerror InvalidLength(uint256 length);\\nerror CharacteristicOutOfRange(uint256 characteristic);\\nerror TraitOutOfRange(uint256 trait);\\n\\n/**  @title RectRenderer\\n *\\n *   This library can be used to render on-chain images stored as a layering of rectangles.\\n *   The returned images is an url safe encoded image uri.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RectRenderer {\\n    using Integers for uint8;\\n    using Integers for uint256;\\n    using Bytes for bytes;\\n    using Array for string[];\\n\\n    string public constant RECT_TAG_START = \\\"%3crect%20x=%27\\\";\\n    string public constant Y_TAG = \\\"%27%20y=%27\\\";\\n    string public constant WIDTH_TAG = \\\"%27%20width=%27\\\";\\n    string public constant HEIGHT_TAG = \\\"%27%20height=%27\\\";\\n    string public constant FILL_TAG = \\\"%27%20fill=%27%23\\\";\\n    string public constant RECT_TAG_END = \\\"%27/%3e\\\";\\n\\n    /** @dev Retrieve the bytes for the given trait from the traits storage.\\n     *  @param pointer The pointer to the traits stored with SSTORE2.\\n     *  @param characteristicIndex The index of the characteristic in the collection.\\n     *  @param traitIndex The index of the trait in the characteristic.\\n     *  @return The bytes of the trait.\\n     */\\n    function getTraitBytes(\\n        address pointer,\\n        uint256 characteristicIndex,\\n        uint256 traitIndex\\n    ) public view returns (bytes memory) {\\n        uint16 characteristicsLength = SSTORE2.read(pointer, 0, 2).toUint16();\\n\\n        if (characteristicsLength - 1 < characteristicIndex)\\n            revert CharacteristicOutOfRange(characteristicIndex);\\n        uint16 characteristicStart = SSTORE2\\n            .read(\\n                pointer,\\n                2 + 2 * characteristicIndex,\\n                2 + 2 * characteristicIndex + 2\\n            )\\n            .toUint16();\\n        uint16 traitsLength = SSTORE2\\n            .read(pointer, characteristicStart, characteristicStart + 2)\\n            .toUint16() - 1;\\n        if (traitsLength - 1 < traitIndex) revert TraitOutOfRange(traitIndex);\\n        bytes memory _indexes = SSTORE2.read(\\n            pointer,\\n            characteristicStart + 2 + 2 * traitIndex,\\n            characteristicStart + 2 + 2 * traitIndex + 4\\n        );\\n        return\\n            SSTORE2.read(\\n                pointer,\\n                characteristicStart + _indexes.toUint16(0),\\n                characteristicStart + _indexes.toUint16(2)\\n            );\\n    }\\n\\n    function decodeBytes4ToRect(bytes4 rectBytes, string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return decodeBytes4ToRect(rectBytes, palette, 0, 0);\\n    }\\n\\n    function decodeBytes4ToRect(\\n        bytes4 rectBytes,\\n        string[] memory palette,\\n        uint256 offsetX,\\n        uint256 offsetY\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                RECT_TAG_START,\\n                (uint8(uint32(rectBytes >> 26)) + offsetX).toString(),\\n                Y_TAG,\\n                ((uint8(uint32(rectBytes >> 20)) & 0x3f) + offsetY).toString(),\\n                WIDTH_TAG,\\n                (uint8(uint32(rectBytes >> 14)) & 0x3f).toString(),\\n                HEIGHT_TAG,\\n                (uint8(uint32(rectBytes >> 8)) & 0x3f).toString(),\\n                FILL_TAG,\\n                palette[uint8(rectBytes[3])],\\n                RECT_TAG_END\\n            );\\n    }\\n\\n    function decodeBytesMemoryToRects(\\n        bytes memory rectsBytes,\\n        string[] memory palette\\n    ) public pure returns (string memory) {\\n        if (rectsBytes.length % 4 != 0) {\\n            revert InvalidLength(rectsBytes.length);\\n        }\\n        uint256 nbRects = rectsBytes.length / 4;\\n        string[] memory rects = new string[](nbRects);\\n        for (uint256 i = 0; i < rects.length; i++) {\\n            rects[i] = decodeBytes4ToRect(rectsBytes.toBytes4(i * 4), palette);\\n        }\\n        return rects.join();\\n    }\\n}\\n\",\"keccak256\":\"0x1b13a8c931c97dc49896907417137a19e6ae78f9d467a3fae8e3b6c7a40213c7\",\"license\":\"MIT\"},\"contracts/lib/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com>\\n *\\n * @notice An attempt at implementing some of the widely used javascript's Array functions in solidity.\\n */\\npragma solidity ^0.8.12;\\n\\nerror EmptyArray();\\n\\nlibrary Array {\\n    function join(string[] memory a) public pure returns (string memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return string(_joinReferenceType(pointer));\\n    }\\n\\n    function join(bytes[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinReferenceType(pointer);\\n    }\\n\\n    function join(bytes2[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 0);\\n    }\\n\\n    /// @dev Join the underlying array of bytes2 to a string.\\n    function join(uint16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 256 - 16);\\n    }\\n\\n    function join(bytes3[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 3, 0);\\n    }\\n\\n    function join(bytes4[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 4, 0);\\n    }\\n\\n    function join(bytes8[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 8, 0);\\n    }\\n\\n    function join(bytes16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 16, 0);\\n    }\\n\\n    function join(bytes32[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 32, 0);\\n    }\\n\\n    function _joinValueType(\\n        uint256 a,\\n        uint256 typeLength,\\n        uint256 shiftLeft\\n    ) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Initialize the length of the final bytes: length is typeLength x inputLength (array of bytes4)\\n            mstore(tempBytes, mul(inputLength, typeLength))\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Iterate over all bytes4\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentSlot := shl(shiftLeft, mload(pointer))\\n                mstore(memoryPointer, currentSlot)\\n                memoryPointer := add(memoryPointer, typeLength)\\n            }\\n\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n\\n    function _joinReferenceType(uint256 a)\\n        public\\n        pure\\n        returns (bytes memory tempBytes)\\n    {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n            }\\n\\n            mstore(tempBytes, stringLength)\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xce9af799b9822afd98b04a6a909873417cf0b71554d25b624f608b3673feeee1\",\"license\":\"MIT\"},\"contracts/lib/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com> from Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Bytes {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) public pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (address tmp)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint8 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toBytes1(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes1 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toBytes1_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint16 tmp)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x2), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes) public pure returns (uint16 tmp) {\\n        return toUint16(_bytes, 0);\\n    }\\n\\n    function toBytes2(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes2 tmp)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toBytes2_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x2), _start))\\n        }\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint24 tmp)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x3), _start))\\n        }\\n    }\\n\\n    function toBytes3(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes3 tmp)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toBytes3_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x3), _start))\\n        }\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint32 tmp)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x4), _start))\\n        }\\n    }\\n\\n    function toBytes4(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes4 tmp)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toBytes4_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x4), _start))\\n        }\\n    }\\n\\n    function toUint40(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint40 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toUint40_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toBytes5(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes5 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toBytes5_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toUint48(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint48 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toUint48_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toBytes6(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes6 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toBytes6_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toUint56(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint56 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toUint56_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toByes7(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes7 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toBytes7_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toBytes8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toBytes8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint96 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toBytes12(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toBytes12_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint128 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toBytes16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toBytes16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint256 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes32 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xbfd0cd353b06027abbfc1b20891a58f98db3736432675af56622ee3ccb825a55\",\"license\":\"MIT\"},\"contracts/lib/utils/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < res.length; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x547aedd7ff0df60ed3dfaf6a7ec21210ed631beb6319de9e32f689f3fcb47a08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x61159261003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100c85760003560e01c80635e99a63011610080578063999086e311610065578063999086e314610235578063b674b76114610248578063f258feb11461028457600080fd5b80635e99a630146101e657806369db9ed0146101f957600080fd5b80634239abe4116100b15780634239abe41461015b57806343c8ecbe1461016e5780634d32bd7d146101aa57600080fd5b8063146f9480146100cd578063407134de1461011f575b600080fd5b6101096040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525081565b6040516101169190610dec565b60405180910390f35b6101096040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b610109610169366004610e4e565b610297565b6101096040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525081565b6101096040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b6101096101f436600461108a565b6106b6565b6101096040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b610109610243366004611109565b610a89565b6101096040518060400160405280601181526020017f25323725323066696c6c3d25323725323300000000000000000000000000000081525081565b61010961029236600461117b565b610ca0565b606060006102a88560006002610caf565b6040516326b3515760e11b815273e7f1725E7734CE288F8367e1Bb143E90bb3F051291634d66a2ae916102de9190600401610dec565b602060405180830381865af41580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f91906111b2565b90508361032d6001836111e9565b61ffff16101561037457836040517f475e819200000000000000000000000000000000000000000000000000000000815260040161036b9190611210565b60405180910390fd5b60006103b68661038587600261121e565b61039090600261123d565b61039b88600261121e565b6103a690600261123d565b6103b190600261123d565b610caf565b6040516326b3515760e11b815273e7f1725E7734CE288F8367e1Bb143E90bb3F051291634d66a2ae916103ec9190600401610dec565b602060405180830381865af4158015610409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042d91906111b2565b9050600060016104508861ffff8516610447866002611255565b61ffff16610caf565b6040516326b3515760e11b815273e7f1725E7734CE288F8367e1Bb143E90bb3F051291634d66a2ae916104869190600401610dec565b602060405180830381865af41580156104a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c791906111b2565b6104d191906111e9565b9050846104df6001836111e9565b61ffff16101561051d57846040517fab074d5200000000000000000000000000000000000000000000000000000000815260040161036b9190611210565b60006105768861052e88600261121e565b610539866002611255565b61ffff16610547919061123d565b61055289600261121e565b61055d876002611255565b61ffff1661056b919061123d565b6103b190600461123d565b6040517fbe8b34300000000000000000000000000000000000000000000000000000000081529091506106a890899073e7f1725E7734CE288F8367e1Bb143E90bb3F05129063be8b3430906105d2908690600090600401611291565b602060405180830381865af41580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061391906111b2565b61061d9086611255565b61ffff168373e7f1725E7734CE288F8367e1Bb143E90bb3F051263be8b3430909160026040518363ffffffff1660e01b815260040161065d929190611291565b602060405180830381865af415801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e91906111b2565b6104479087611255565b9450505050505b9392505050565b60408051808201909152600f81527f25336372656374253230783d253237000000000000000000000000000000000060208201526060906106fb8460fa88901c61123d565b60405163348051d760e11b8152739fE46736679d2D9a65F0992F2272dE9f3c7fa6e091636900a3ae916107319190600401611210565b600060405180830381865af415801561074e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107769190810190611309565b60408051808201909152600b81527f253237253230793d25323700000000000000000000000000000000000000000060208201526107bb85603f60f48b901c1661123d565b60405163348051d760e11b8152739fE46736679d2D9a65F0992F2272dE9f3c7fa6e091636900a3ae916107f19190600401611210565b600060405180830381865af415801561080e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108369190810190611309565b604080518082018252600f81527f25323725323077696474683d25323700000000000000000000000000000000006020820152905163348051d760e11b8152739fE46736679d2D9a65F0992F2272dE9f3c7fa6e090636900a3ae906108a690603f60ee8f901c1690600401611210565b600060405180830381865af41580156108c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108eb9190810190611309565b6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525060088c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60e01c603f1660ff16739fE46736679d2D9a65F0992F2272dE9f3c7fa6e0636900a3ae90916040518263ffffffff1660e01b81526004016109869190611210565b600060405180830381865af41580156109a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109cb9190810190611309565b60408051808201909152601181527f25323725323066696c6c3d25323725323300000000000000000000000000000060208201528c8e6003825191901a908110610a1757610a17611344565b60200260200101516040518060400160405280600781526020017f2532372f25336500000000000000000000000000000000000000000000000000815250604051602001610a6f9b9a9998979695949392919061137c565b60405160208183030381529060405290505b949350505050565b606060048351610a999190611424565b15610ad35782516040517fc67eee4b00000000000000000000000000000000000000000000000000000000815260040161036b9190611210565b600060048451610ae39190611438565b905060008167ffffffffffffffff811115610b0057610b00610ed1565b604051908082528060200260200182016040528015610b3357816020015b6060815260200190600190039081610b1e5790505b50905060005b8151811015610bff57610bcf73e7f1725E7734CE288F8367e1Bb143E90bb3F05126385581ce388610b6b85600461121e565b6040518363ffffffff1660e01b8152600401610b8892919061144c565b602060405180830381865af4158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc99190611477565b86610ca0565b828281518110610be157610be1611344565b60200260200101819052508080610bf790611498565b915050610b39565b506040517f9bce4e14000000000000000000000000000000000000000000000000000000008152735FbDB2315678afecb367f032d93F642f64180aa390639bce4e1490610c50908490600401611523565b600060405180830381865af4158015610c6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c959190810190611309565b925050505b92915050565b60606106af83836000806106b6565b6060610a8184610cc085600161123d565b610ccb85600161123d565b6060833b80610cea5750506040805160208101909152600081526106af565b80841115610d085750506040805160208101909152600081526106af565b83831015610d48578084846040517f2c4a89fa00000000000000000000000000000000000000000000000000000000815260040161036b93929190611534565b8383038482036000828210610d5d5782610d5f565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b60005b83811015610da5578181015183820152602001610d8d565b83811115610db4576000848401525b50505050565b6000610dc4825190565b808452602084019350610ddb818560208601610d8a565b601f01601f19169290920192915050565b602080825281016106af8184610dba565b600073ffffffffffffffffffffffffffffffffffffffff8216610c9a565b610e2481610dfd565b8114610e2f57600080fd5b50565b8035610c9a81610e1b565b80610e24565b8035610c9a81610e3d565b600080600060608486031215610e6657610e66600080fd5b6000610e728686610e32565b9350506020610e8386828701610e43565b9250506040610e9486828701610e43565b9150509250925092565b7fffffffff000000000000000000000000000000000000000000000000000000008116610e24565b8035610c9a81610e9e565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610f0d57610f0d610ed1565b6040525050565b6000610f1f60405190565b9050610f2b8282610ee7565b919050565b600067ffffffffffffffff821115610f4a57610f4a610ed1565b5060209081020190565b600067ffffffffffffffff821115610f6e57610f6e610ed1565b601f19601f83011660200192915050565b82818337506000910152565b6000610f9e610f9984610f54565b610f14565b905082815260208101848484011115610fb957610fb9600080fd5b610fc4848285610f7f565b509392505050565b600082601f830112610fe057610fe0600080fd5b8135610a81848260208601610f8b565b6000610ffe610f9984610f30565b8381529050602080820190840283018581111561101d5761101d600080fd5b835b8181101561105c57803567ffffffffffffffff81111561104157611041600080fd5b850161104d8882610fcc565b8452506020928301920161101f565b5050509392505050565b600082601f83011261107a5761107a600080fd5b8135610a81848260208601610ff0565b600080600080608085870312156110a3576110a3600080fd5b60006110af8787610ec6565b945050602085013567ffffffffffffffff8111156110cf576110cf600080fd5b6110db87828801611066565b93505060406110ec87828801610e43565b92505060606110fd87828801610e43565b91505092959194509250565b6000806040838503121561111f5761111f600080fd5b823567ffffffffffffffff81111561113957611139600080fd5b61114585828601610fcc565b925050602083013567ffffffffffffffff81111561116557611165600080fd5b61117185828601611066565b9150509250929050565b6000806040838503121561119157611191600080fd5b60006111458585610ec6565b61ffff8116610e24565b8051610c9a8161119d565b6000602082840312156111c7576111c7600080fd5b6000610a8184846111a7565b634e487b7160e01b600052601160045260246000fd5b61ffff9182169116600082821015611203576112036111d3565b500390565b805b82525050565b60208101610c9a8284611208565b6000816000190483118215151615611238576112386111d3565b500290565b60008219821115611250576112506111d3565b500190565b61ffff8116905061ffff8216915060008261ffff03821115611250576112506111d3565b6000610c9a6112858381565b90565b61120a81611279565b604080825281016112a28185610dba565b90506106af6020830184611288565b60006112bf610f9984610f54565b9050828152602081018484840111156112da576112da600080fd5b610fc4848285610d8a565b600082601f8301126112f9576112f9600080fd5b8151610a818482602086016112b1565b60006020828403121561131e5761131e600080fd5b815167ffffffffffffffff81111561133857611338600080fd5b610a81848285016112e5565b634e487b7160e01b600052603260045260246000fd5b6000611364825190565b611372818560208601610d8a565b9290920192915050565b611386818d61135a565b9050611392818c61135a565b905061139e818b61135a565b90506113aa818a61135a565b90506113b6818961135a565b90506113c2818861135a565b90506113ce818761135a565b90506113da818661135a565b90506113e6818561135a565b90506113f2818461135a565b90506113fe818361135a565b9c9b505050505050505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826114335761143361140e565b500690565b6000826114475761144761140e565b500490565b6040808252810161145d8185610dba565b90506106af6020830184611208565b8051610c9a81610e9e565b60006020828403121561148c5761148c600080fd5b6000610a81848461146c565b60006000198214156114ac576114ac6111d3565b5060010190565b60006106af8383610dba565b60006114c9825190565b808452602084019350836020820285016114e38560200190565b60005b8481101561151757838303885281516114ff84826114b3565b935050602082016020989098019791506001016114e6565b50909695505050505050565b602080825281016106af81846114bf565b606081016115428286611208565b61154f6020830185611208565b610a81604083018461120856fea26469706673582212203326c0ee13c5648d5a54a5558f39ddcf02437cb03a149281e9e6ed36c2ffc50564736f6c634300080c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100c85760003560e01c80635e99a63011610080578063999086e311610065578063999086e314610235578063b674b76114610248578063f258feb11461028457600080fd5b80635e99a630146101e657806369db9ed0146101f957600080fd5b80634239abe4116100b15780634239abe41461015b57806343c8ecbe1461016e5780634d32bd7d146101aa57600080fd5b8063146f9480146100cd578063407134de1461011f575b600080fd5b6101096040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525081565b6040516101169190610dec565b60405180910390f35b6101096040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b610109610169366004610e4e565b610297565b6101096040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525081565b6101096040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b6101096101f436600461108a565b6106b6565b6101096040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b610109610243366004611109565b610a89565b6101096040518060400160405280601181526020017f25323725323066696c6c3d25323725323300000000000000000000000000000081525081565b61010961029236600461117b565b610ca0565b606060006102a88560006002610caf565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae916102de9190600401610dec565b602060405180830381865af41580156102fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031f91906111b2565b90508361032d6001836111e9565b61ffff16101561037457836040517f475e819200000000000000000000000000000000000000000000000000000000815260040161036b9190611210565b60405180910390fd5b60006103b68661038587600261121e565b61039090600261123d565b61039b88600261121e565b6103a690600261123d565b6103b190600261123d565b610caf565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae916103ec9190600401610dec565b602060405180830381865af4158015610409573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061042d91906111b2565b9050600060016104508861ffff8516610447866002611255565b61ffff16610caf565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae916104869190600401610dec565b602060405180830381865af41580156104a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c791906111b2565b6104d191906111e9565b9050846104df6001836111e9565b61ffff16101561051d57846040517fab074d5200000000000000000000000000000000000000000000000000000000815260040161036b9190611210565b60006105768861052e88600261121e565b610539866002611255565b61ffff16610547919061123d565b61055289600261121e565b61055d876002611255565b61ffff1661056b919061123d565b6103b190600461123d565b6040517fbe8b34300000000000000000000000000000000000000000000000000000000081529091506106a890899073__$dcaad1777d2b99f53d9a752b008027c0a6$__9063be8b3430906105d2908690600090600401611291565b602060405180830381865af41580156105ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061391906111b2565b61061d9086611255565b61ffff168373__$dcaad1777d2b99f53d9a752b008027c0a6$__63be8b3430909160026040518363ffffffff1660e01b815260040161065d929190611291565b602060405180830381865af415801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e91906111b2565b6104479087611255565b9450505050505b9392505050565b60408051808201909152600f81527f25336372656374253230783d253237000000000000000000000000000000000060208201526060906106fb8460fa88901c61123d565b60405163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__91636900a3ae916107319190600401611210565b600060405180830381865af415801561074e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107769190810190611309565b60408051808201909152600b81527f253237253230793d25323700000000000000000000000000000000000000000060208201526107bb85603f60f48b901c1661123d565b60405163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__91636900a3ae916107f19190600401611210565b600060405180830381865af415801561080e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108369190810190611309565b604080518082018252600f81527f25323725323077696474683d25323700000000000000000000000000000000006020820152905163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__90636900a3ae906108a690603f60ee8f901c1690600401611210565b600060405180830381865af41580156108c3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108eb9190810190611309565b6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525060088c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60e01c603f1660ff1673__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__636900a3ae90916040518263ffffffff1660e01b81526004016109869190611210565b600060405180830381865af41580156109a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109cb9190810190611309565b60408051808201909152601181527f25323725323066696c6c3d25323725323300000000000000000000000000000060208201528c8e6003825191901a908110610a1757610a17611344565b60200260200101516040518060400160405280600781526020017f2532372f25336500000000000000000000000000000000000000000000000000815250604051602001610a6f9b9a9998979695949392919061137c565b60405160208183030381529060405290505b949350505050565b606060048351610a999190611424565b15610ad35782516040517fc67eee4b00000000000000000000000000000000000000000000000000000000815260040161036b9190611210565b600060048451610ae39190611438565b905060008167ffffffffffffffff811115610b0057610b00610ed1565b604051908082528060200260200182016040528015610b3357816020015b6060815260200190600190039081610b1e5790505b50905060005b8151811015610bff57610bcf73__$dcaad1777d2b99f53d9a752b008027c0a6$__6385581ce388610b6b85600461121e565b6040518363ffffffff1660e01b8152600401610b8892919061144c565b602060405180830381865af4158015610ba5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc99190611477565b86610ca0565b828281518110610be157610be1611344565b60200260200101819052508080610bf790611498565b915050610b39565b506040517f9bce4e1400000000000000000000000000000000000000000000000000000000815273__$3d939fd680257e7df63fc3436eced304ff$__90639bce4e1490610c50908490600401611523565b600060405180830381865af4158015610c6d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c959190810190611309565b925050505b92915050565b60606106af83836000806106b6565b6060610a8184610cc085600161123d565b610ccb85600161123d565b6060833b80610cea5750506040805160208101909152600081526106af565b80841115610d085750506040805160208101909152600081526106af565b83831015610d48578084846040517f2c4a89fa00000000000000000000000000000000000000000000000000000000815260040161036b93929190611534565b8383038482036000828210610d5d5782610d5f565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b60005b83811015610da5578181015183820152602001610d8d565b83811115610db4576000848401525b50505050565b6000610dc4825190565b808452602084019350610ddb818560208601610d8a565b601f01601f19169290920192915050565b602080825281016106af8184610dba565b600073ffffffffffffffffffffffffffffffffffffffff8216610c9a565b610e2481610dfd565b8114610e2f57600080fd5b50565b8035610c9a81610e1b565b80610e24565b8035610c9a81610e3d565b600080600060608486031215610e6657610e66600080fd5b6000610e728686610e32565b9350506020610e8386828701610e43565b9250506040610e9486828701610e43565b9150509250925092565b7fffffffff000000000000000000000000000000000000000000000000000000008116610e24565b8035610c9a81610e9e565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610f0d57610f0d610ed1565b6040525050565b6000610f1f60405190565b9050610f2b8282610ee7565b919050565b600067ffffffffffffffff821115610f4a57610f4a610ed1565b5060209081020190565b600067ffffffffffffffff821115610f6e57610f6e610ed1565b601f19601f83011660200192915050565b82818337506000910152565b6000610f9e610f9984610f54565b610f14565b905082815260208101848484011115610fb957610fb9600080fd5b610fc4848285610f7f565b509392505050565b600082601f830112610fe057610fe0600080fd5b8135610a81848260208601610f8b565b6000610ffe610f9984610f30565b8381529050602080820190840283018581111561101d5761101d600080fd5b835b8181101561105c57803567ffffffffffffffff81111561104157611041600080fd5b850161104d8882610fcc565b8452506020928301920161101f565b5050509392505050565b600082601f83011261107a5761107a600080fd5b8135610a81848260208601610ff0565b600080600080608085870312156110a3576110a3600080fd5b60006110af8787610ec6565b945050602085013567ffffffffffffffff8111156110cf576110cf600080fd5b6110db87828801611066565b93505060406110ec87828801610e43565b92505060606110fd87828801610e43565b91505092959194509250565b6000806040838503121561111f5761111f600080fd5b823567ffffffffffffffff81111561113957611139600080fd5b61114585828601610fcc565b925050602083013567ffffffffffffffff81111561116557611165600080fd5b61117185828601611066565b9150509250929050565b6000806040838503121561119157611191600080fd5b60006111458585610ec6565b61ffff8116610e24565b8051610c9a8161119d565b6000602082840312156111c7576111c7600080fd5b6000610a8184846111a7565b634e487b7160e01b600052601160045260246000fd5b61ffff9182169116600082821015611203576112036111d3565b500390565b805b82525050565b60208101610c9a8284611208565b6000816000190483118215151615611238576112386111d3565b500290565b60008219821115611250576112506111d3565b500190565b61ffff8116905061ffff8216915060008261ffff03821115611250576112506111d3565b6000610c9a6112858381565b90565b61120a81611279565b604080825281016112a28185610dba565b90506106af6020830184611288565b60006112bf610f9984610f54565b9050828152602081018484840111156112da576112da600080fd5b610fc4848285610d8a565b600082601f8301126112f9576112f9600080fd5b8151610a818482602086016112b1565b60006020828403121561131e5761131e600080fd5b815167ffffffffffffffff81111561133857611338600080fd5b610a81848285016112e5565b634e487b7160e01b600052603260045260246000fd5b6000611364825190565b611372818560208601610d8a565b9290920192915050565b611386818d61135a565b9050611392818c61135a565b905061139e818b61135a565b90506113aa818a61135a565b90506113b6818961135a565b90506113c2818861135a565b90506113ce818761135a565b90506113da818661135a565b90506113e6818561135a565b90506113f2818461135a565b90506113fe818361135a565b9c9b505050505050505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826114335761143361140e565b500690565b6000826114475761144761140e565b500490565b6040808252810161145d8185610dba565b90506106af6020830184611208565b8051610c9a81610e9e565b60006020828403121561148c5761148c600080fd5b6000610a81848461146c565b60006000198214156114ac576114ac6111d3565b5060010190565b60006106af8383610dba565b60006114c9825190565b808452602084019350836020820285016114e38560200190565b60005b8481101561151757838303885281516114ff84826114b3565b935050602082016020989098019791506001016114e6565b50909695505050505050565b602080825281016106af81846114bf565b606081016115428286611208565b61154f6020830185611208565b610a81604083018461120856fea26469706673582212203326c0ee13c5648d5a54a5558f39ddcf02437cb03a149281e9e6ed36c2ffc50564736f6c634300080c0033",
  "libraries": {
    "Array": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "Bytes": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "Integers": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"
  },
  "devdoc": {
    "author": "Clement Walter <clement0walter@gmail.com>",
    "kind": "dev",
    "methods": {
      "getTraitBytes(address,uint256,uint256)": {
        "details": "Retrieve the bytes for the given trait from the traits storage.",
        "params": {
          "characteristicIndex": "The index of the characteristic in the collection.",
          "pointer": "The pointer to the traits stored with SSTORE2.",
          "traitIndex": "The index of the trait in the characteristic."
        },
        "returns": {
          "_0": "The bytes of the trait."
        }
      }
    },
    "title": "RectRenderer   This library can be used to render on-chain images stored as a layering of rectangles.   The returned images is an url safe encoded image uri.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}