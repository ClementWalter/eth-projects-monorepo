{
  "address": "0x9F04Fa4a9e2acFd40569E344A6A84408140D2395",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characteristic",
          "type": "uint256"
        }
      ],
      "name": "CharacteristicOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "coordinate",
          "type": "uint256"
        }
      ],
      "name": "CoordinatesOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trait",
          "type": "uint256"
        }
      ],
      "name": "TraitOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FILL_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEIGHT_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_END",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_START",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIDTH_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Y_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "rectBytes",
          "type": "bytes4"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "offsetX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offsetY",
          "type": "uint256"
        }
      ],
      "name": "decodeBytes4ToRect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "rectBytes",
          "type": "bytes4"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        }
      ],
      "name": "decodeBytes4ToRect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rectsBytes",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        }
      ],
      "name": "decodeBytesMemoryToRects",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint32",
                      "name": "x",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "y",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "width",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "height",
                      "type": "uint32"
                    },
                    {
                      "internalType": "uint32",
                      "name": "fillIndex",
                      "type": "uint32"
                    }
                  ],
                  "internalType": "struct Rect[]",
                  "name": "rects",
                  "type": "tuple[]"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct Trait[]",
              "name": "traits",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct Characteristic",
          "name": "characteristic",
          "type": "tuple"
        }
      ],
      "name": "encodeCharacteristic",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "traits",
              "type": "bytes"
            },
            {
              "internalType": "string[]",
              "name": "names",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct CharacteristicEncoded",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "components": [
                    {
                      "components": [
                        {
                          "internalType": "uint32",
                          "name": "x",
                          "type": "uint32"
                        },
                        {
                          "internalType": "uint32",
                          "name": "y",
                          "type": "uint32"
                        },
                        {
                          "internalType": "uint32",
                          "name": "width",
                          "type": "uint32"
                        },
                        {
                          "internalType": "uint32",
                          "name": "height",
                          "type": "uint32"
                        },
                        {
                          "internalType": "uint32",
                          "name": "fillIndex",
                          "type": "uint32"
                        }
                      ],
                      "internalType": "struct Rect[]",
                      "name": "rects",
                      "type": "tuple[]"
                    },
                    {
                      "internalType": "string",
                      "name": "name",
                      "type": "string"
                    }
                  ],
                  "internalType": "struct Trait[]",
                  "name": "traits",
                  "type": "tuple[]"
                },
                {
                  "internalType": "string",
                  "name": "name",
                  "type": "string"
                }
              ],
              "internalType": "struct Characteristic[]",
              "name": "characteristics",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct Collection",
          "name": "collection",
          "type": "tuple"
        }
      ],
      "name": "encodeCollection",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "traits",
              "type": "bytes"
            },
            {
              "internalType": "string[][]",
              "name": "traitNames",
              "type": "string[][]"
            },
            {
              "internalType": "string[]",
              "name": "characteristicNames",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct CollectionEncoded",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "x",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "y",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "width",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "height",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "fillIndex",
              "type": "uint32"
            }
          ],
          "internalType": "struct Rect",
          "name": "rect",
          "type": "tuple"
        }
      ],
      "name": "encodeRect",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint32",
                  "name": "x",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "y",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "width",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "height",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "fillIndex",
                  "type": "uint32"
                }
              ],
              "internalType": "struct Rect[]",
              "name": "rects",
              "type": "tuple[]"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct Trait",
          "name": "trait",
          "type": "tuple"
        }
      ],
      "name": "encodeTrait",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes",
              "name": "rects",
              "type": "bytes"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            }
          ],
          "internalType": "struct TraitEncoded",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "characteristicIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitIndex",
          "type": "uint256"
        }
      ],
      "name": "getTraitBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xcb7a6823b5c95872174044bc3a4f5e62fe3af274a6d1ef1c4b1e6caf6ea916c8",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0x9F04Fa4a9e2acFd40569E344A6A84408140D2395",
    "transactionIndex": 0,
    "gasUsed": "2309014",
    "logsBloom": "0x
    "blockHash": "0xe36c5ca8b8ca26fbee5bc3409a04c44786c9f9a02f806c5767f53f10342bb1b5",
    "transactionHash": "0xcb7a6823b5c95872174044bc3a4f5e62fe3af274a6d1ef1c4b1e6caf6ea916c8",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "2309014",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5a4065e98c83db14617d25d1485ebb78",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characteristic\",\"type\":\"uint256\"}],\"name\":\"CharacteristicOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"coordinate\",\"type\":\"uint256\"}],\"name\":\"CoordinatesOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trait\",\"type\":\"uint256\"}],\"name\":\"TraitOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FILL_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEIGHT_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIDTH_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Y_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"rectBytes\",\"type\":\"bytes4\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"offsetX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsetY\",\"type\":\"uint256\"}],\"name\":\"decodeBytes4ToRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"rectBytes\",\"type\":\"bytes4\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"}],\"name\":\"decodeBytes4ToRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rectsBytes\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"}],\"name\":\"decodeBytesMemoryToRects\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"x\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"y\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct Rect[]\",\"name\":\"rects\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Characteristic\",\"name\":\"characteristic\",\"type\":\"tuple\"}],\"name\":\"encodeCharacteristic\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"traits\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"names\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct CharacteristicEncoded\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"x\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"y\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct Rect[]\",\"name\":\"rects\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Trait[]\",\"name\":\"traits\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Characteristic[]\",\"name\":\"characteristics\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct Collection\",\"name\":\"collection\",\"type\":\"tuple\"}],\"name\":\"encodeCollection\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"traits\",\"type\":\"bytes\"},{\"internalType\":\"string[][]\",\"name\":\"traitNames\",\"type\":\"string[][]\"},{\"internalType\":\"string[]\",\"name\":\"characteristicNames\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct CollectionEncoded\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"x\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"y\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct Rect\",\"name\":\"rect\",\"type\":\"tuple\"}],\"name\":\"encodeRect\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"x\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"y\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"width\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"height\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"fillIndex\",\"type\":\"uint32\"}],\"internalType\":\"struct Rect[]\",\"name\":\"rects\",\"type\":\"tuple[]\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct Trait\",\"name\":\"trait\",\"type\":\"tuple\"}],\"name\":\"encodeTrait\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes\",\"name\":\"rects\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"internalType\":\"struct TraitEncoded\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characteristicIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitIndex\",\"type\":\"uint256\"}],\"name\":\"getTraitBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Clement Walter <clement0walter@gmail.com>\",\"kind\":\"dev\",\"methods\":{\"encodeCharacteristic(Characteristic)\":{\"details\":\"Use this function to encode a characteristic, i.e. a list of traits belongings to the same group. Note that       there is no intrinsic difference between a characteristic and a whole collection (all the traits of all the       characteristics) but it's how it's used and expected today so we keep the wording here.       Use this off-chain and push the result using RendererCommon.storeBytes\",\"params\":{\"characteristic\":\"The list of Trait constituting the characteristic.\"},\"returns\":{\"_0\":\"The encoded characteristic (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)\"}},\"encodeCollection(Collection)\":{\"details\":\"Use this function to encode a full collection, i.e. a list of characteristics.       Use this off-chain and push the result using RendererCommon.storeBytes\",\"params\":{\"collection\":\"The list of Characteristic constituting the collection. The description is just returned in the        new object and can be used to store the description of the collection.\"},\"returns\":{\"_0\":\"The encoded collection (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)\"}},\"encodeRect(Rect)\":{\"details\":\"Use this function to encode a single <rect> as expected by the renderer. Use this off-chain!\",\"params\":{\"rect\":\"The <rect> to encode\"},\"returns\":{\"_0\":\"The encoded rectangle as a bytes4\"}},\"encodeTrait(Trait)\":{\"details\":\"Use this function to encode a _trait_, i.e. a list of <rect>s with a name, as expected by the renderer.       Use this off-chain!\",\"params\":{\"trait\":\"The list of <rect>s to encode with a given name; should be shorter than 32 char.\"},\"returns\":{\"_0\":\"The encoded list of rectangle\"}},\"getTraitBytes(address,uint256,uint256)\":{\"details\":\"Retrieve the bytes for the given trait from the traits storage.\",\"params\":{\"characteristicIndex\":\"The index of the characteristic in the collection.\",\"pointer\":\"The pointer to the traits stored with SSTORE2.\",\"traitIndex\":\"The index of the trait in the characteristic.\"},\"returns\":{\"_0\":\"The bytes of the trait.\"}}},\"title\":\"RectRenderer   This library can be used to render on-chain images stored as a layering of rectangles.   The returned images is an url safe encoded image uri.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/renderers/RectRenderer.sol\":\"RectRenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"contracts/lib/renderers/RectRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Bytes} from \\\"../utils/Bytes.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\nerror InvalidLength(uint256 length);\\nerror CoordinatesOutOfRange(uint256 coordinate);\\nerror CharacteristicOutOfRange(uint256 characteristic);\\nerror TraitOutOfRange(uint256 trait);\\n\\nstruct Rect {\\n    uint32 x;\\n    uint32 y;\\n    uint32 width;\\n    uint32 height;\\n    uint32 fillIndex;\\n}\\n\\nstruct Trait {\\n    Rect[] rects;\\n    string name;\\n}\\n\\nstruct TraitEncoded {\\n    bytes rects;\\n    string name;\\n}\\n\\nstruct Characteristic {\\n    Trait[] traits;\\n    string name;\\n}\\n\\nstruct CharacteristicEncoded {\\n    bytes traits;\\n    string[] names;\\n    string name;\\n}\\n\\nstruct Collection {\\n    Characteristic[] characteristics;\\n    string description;\\n}\\n\\nstruct CollectionEncoded {\\n    bytes traits;\\n    string[][] traitNames;\\n    string[] characteristicNames;\\n    string description;\\n}\\n\\n/**  @title RectRenderer\\n *\\n *   This library can be used to render on-chain images stored as a layering of rectangles.\\n *   The returned images is an url safe encoded image uri.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RectRenderer {\\n    using Integers for uint8;\\n    using Integers for uint32;\\n    using Integers for uint256;\\n    using Bytes for bytes;\\n    using Array for string[];\\n    using Array for bytes[];\\n    using Array for uint16[];\\n    using Array for bytes4[];\\n\\n    string public constant RECT_TAG_START = \\\"%3crect%20x=%27\\\";\\n    string public constant Y_TAG = \\\"%27%20y=%27\\\";\\n    string public constant WIDTH_TAG = \\\"%27%20width=%27\\\";\\n    string public constant HEIGHT_TAG = \\\"%27%20height=%27\\\";\\n    string public constant FILL_TAG = \\\"%27%20fill=%27%23\\\";\\n    string public constant RECT_TAG_END = \\\"%27/%3e\\\";\\n\\n    /** @dev Use this function to encode a single <rect> as expected by the renderer. Use this off-chain!\\n     *\\n     * @param rect The <rect> to encode\\n     * @return The encoded rectangle as a bytes4\\n     */\\n    function encodeRect(Rect memory rect) public pure returns (bytes4) {\\n        // each coordinates should use only 6 bits and is consequently stored like 00nnnnnn\\n        if (rect.x > 63) revert CoordinatesOutOfRange(rect.x);\\n        if (rect.y > 63) revert CoordinatesOutOfRange(rect.y);\\n        if (rect.width > 63) revert CoordinatesOutOfRange(rect.width);\\n        if (rect.height > 63) revert CoordinatesOutOfRange(rect.height);\\n        return\\n            bytes4(rect.x << 26) |\\n            bytes4(rect.y << 20) |\\n            bytes4(rect.width << 14) |\\n            bytes4(rect.height << 8) |\\n            bytes4(rect.fillIndex);\\n    }\\n\\n    /** @dev Use this function to encode a _trait_, i.e. a list of <rect>s with a name, as expected by the renderer.\\n     *       Use this off-chain!\\n     *\\n     * @param trait The list of <rect>s to encode with a given name; should be shorter than 32 char.\\n     * @return The encoded list of rectangle\\n     */\\n    function encodeTrait(Trait memory trait)\\n        public\\n        pure\\n        returns (TraitEncoded memory)\\n    {\\n        bytes4[] memory rects = new bytes4[](trait.rects.length);\\n        for (uint256 i = 0; i < trait.rects.length; i++) {\\n            rects[i] = encodeRect(trait.rects[i]);\\n        }\\n        return TraitEncoded(rects.join(), trait.name);\\n    }\\n\\n    /** @dev Use this function to encode a characteristic, i.e. a list of traits belongings to the same group. Note that\\n     *       there is no intrinsic difference between a characteristic and a whole collection (all the traits of all the\\n     *       characteristics) but it's how it's used and expected today so we keep the wording here.\\n     *       Use this off-chain and push the result using RendererCommon.storeBytes\\n     *  @param characteristic The list of Trait constituting the characteristic.\\n     *  @return The encoded characteristic (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)\\n     */\\n    function encodeCharacteristic(Characteristic memory characteristic)\\n        public\\n        pure\\n        returns (CharacteristicEncoded memory)\\n    {\\n        bytes[] memory rects = new bytes[](characteristic.traits.length);\\n        string[] memory names = new string[](characteristic.traits.length);\\n        uint16[] memory lengths = new uint16[](\\n            characteristic.traits.length + 1\\n        );\\n        uint16 cumSum = 4 +\\n            2 *\\n            uint16(characteristic.traits.length % type(uint16).max); // 2 extra bytes for storing start & end for each trait\\n        for (uint256 i = 0; i < characteristic.traits.length; i++) {\\n            TraitEncoded memory tmp = encodeTrait(characteristic.traits[i]);\\n            rects[i] = tmp.rects;\\n            names[i] = tmp.name;\\n            lengths[i] = cumSum;\\n            cumSum += uint16(rects[i].length % type(uint16).max);\\n        }\\n        lengths[characteristic.traits.length] = cumSum;\\n        return (\\n            CharacteristicEncoded(\\n                bytes.concat(\\n                    bytes2(\\n                        uint16(\\n                            (characteristic.traits.length + 1) %\\n                                type(uint16).max\\n                        )\\n                    ),\\n                    lengths.join(),\\n                    rects.join()\\n                ),\\n                names,\\n                characteristic.name\\n            )\\n        );\\n    }\\n\\n    /** @dev Use this function to encode a full collection, i.e. a list of characteristics.\\n     *       Use this off-chain and push the result using RendererCommon.storeBytes\\n     *\\n     * @param collection The list of Characteristic constituting the collection. The description is just returned in the\\n     *        new object and can be used to store the description of the collection.\\n     * @return The encoded collection (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)\\n     */\\n    function encodeCollection(Collection memory collection)\\n        public\\n        pure\\n        returns (CollectionEncoded memory)\\n    {\\n        bytes[] memory traits = new bytes[](collection.characteristics.length);\\n        string[] memory characteristicNames = new string[](\\n            collection.characteristics.length\\n        );\\n        string[][] memory traitNames = new string[][](\\n            collection.characteristics.length\\n        );\\n        uint16[] memory lengths = new uint16[](\\n            collection.characteristics.length\\n        );\\n        // init characteristic pointer shift with 2 bytes for length + 2 bytes per characteristic\\n        uint16 cumSum = 2 +\\n            2 *\\n            uint16(collection.characteristics.length % type(uint16).max);\\n        for (uint256 i = 0; i < collection.characteristics.length; i++) {\\n            CharacteristicEncoded memory tmp = encodeCharacteristic(\\n                collection.characteristics[i]\\n            );\\n            lengths[i] = cumSum;\\n            traits[i] = tmp.traits;\\n            traitNames[i] = tmp.names;\\n            characteristicNames[i] = tmp.name;\\n            cumSum += uint16(traits[i].length % type(uint16).max);\\n        }\\n        return (\\n            CollectionEncoded(\\n                bytes.concat(\\n                    bytes2(\\n                        uint16(\\n                            collection.characteristics.length % type(uint16).max\\n                        )\\n                    ),\\n                    lengths.join(),\\n                    traits.join()\\n                ),\\n                traitNames,\\n                characteristicNames,\\n                collection.description\\n            )\\n        );\\n    }\\n\\n    /** @dev Retrieve the bytes for the given trait from the traits storage.\\n     *  @param pointer The pointer to the traits stored with SSTORE2.\\n     *  @param characteristicIndex The index of the characteristic in the collection.\\n     *  @param traitIndex The index of the trait in the characteristic.\\n     *  @return The bytes of the trait.\\n     */\\n    function getTraitBytes(\\n        address pointer,\\n        uint256 characteristicIndex,\\n        uint256 traitIndex\\n    ) public view returns (bytes memory) {\\n        uint16 characteristicsLength = SSTORE2.read(pointer, 0, 2).toUint16();\\n\\n        if (characteristicsLength - 1 < characteristicIndex)\\n            revert CharacteristicOutOfRange(characteristicIndex);\\n        uint16 characteristicStart = SSTORE2\\n            .read(\\n                pointer,\\n                2 + 2 * characteristicIndex,\\n                2 + 2 * characteristicIndex + 2\\n            )\\n            .toUint16();\\n        uint16 traitsLength = SSTORE2\\n            .read(pointer, characteristicStart, characteristicStart + 2)\\n            .toUint16() - 1;\\n        if (traitsLength - 1 < traitIndex) revert TraitOutOfRange(traitIndex);\\n        bytes memory _indexes = SSTORE2.read(\\n            pointer,\\n            characteristicStart + 2 + 2 * traitIndex,\\n            characteristicStart + 2 + 2 * traitIndex + 4\\n        );\\n        return\\n            SSTORE2.read(\\n                pointer,\\n                characteristicStart + _indexes.toUint16(0),\\n                characteristicStart + _indexes.toUint16(2)\\n            );\\n    }\\n\\n    function decodeBytes4ToRect(bytes4 rectBytes, string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return decodeBytes4ToRect(rectBytes, palette, 0, 0);\\n    }\\n\\n    function decodeBytes4ToRect(\\n        bytes4 rectBytes,\\n        string[] memory palette,\\n        uint256 offsetX,\\n        uint256 offsetY\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                RECT_TAG_START,\\n                (uint8(uint32(rectBytes >> 26)) + offsetX).toString(),\\n                Y_TAG,\\n                ((uint8(uint32(rectBytes >> 20)) & 0x3f) + offsetY).toString(),\\n                WIDTH_TAG,\\n                (uint8(uint32(rectBytes >> 14)) & 0x3f).toString(),\\n                HEIGHT_TAG,\\n                (uint8(uint32(rectBytes >> 8)) & 0x3f).toString(),\\n                FILL_TAG,\\n                palette[uint8(rectBytes[3])],\\n                RECT_TAG_END\\n            );\\n    }\\n\\n    function decodeBytesMemoryToRects(\\n        bytes memory rectsBytes,\\n        string[] memory palette\\n    ) public pure returns (string memory) {\\n        if (rectsBytes.length % 4 != 0) {\\n            revert InvalidLength(rectsBytes.length);\\n        }\\n        uint256 nbRects = rectsBytes.length / 4;\\n        string[] memory rects = new string[](nbRects);\\n        for (uint256 i = 0; i < rects.length; i++) {\\n            rects[i] = decodeBytes4ToRect(rectsBytes.toBytes4(i * 4), palette);\\n        }\\n        return rects.join();\\n    }\\n}\\n\",\"keccak256\":\"0x4f56e682ba8af262b3505b2c7cc2f26d89fb66c6cd4f08d979e009b80ecadc91\",\"license\":\"MIT\"},\"contracts/lib/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com>\\n *\\n * @notice An attempt at implementing some of the widely used javascript's Array functions in solidity.\\n */\\npragma solidity ^0.8.12;\\n\\nerror EmptyArray();\\n\\nlibrary Array {\\n    function join(string[] memory a) public pure returns (string memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return string(_joinReferenceType(pointer));\\n    }\\n\\n    function join(bytes[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinReferenceType(pointer);\\n    }\\n\\n    function join(bytes2[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 0);\\n    }\\n\\n    /// @dev Join the underlying array of bytes2 to a string.\\n    function join(uint16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 256 - 16);\\n    }\\n\\n    function join(bytes3[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 3, 0);\\n    }\\n\\n    function join(bytes4[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 4, 0);\\n    }\\n\\n    function join(bytes8[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 8, 0);\\n    }\\n\\n    function join(bytes16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 16, 0);\\n    }\\n\\n    function join(bytes32[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 32, 0);\\n    }\\n\\n    function _joinValueType(\\n        uint256 a,\\n        uint256 typeLength,\\n        uint256 shiftLeft\\n    ) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Initialize the length of the final bytes: length is typeLength x inputLength (array of bytes4)\\n            mstore(tempBytes, mul(inputLength, typeLength))\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Iterate over all bytes4\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentSlot := shl(shiftLeft, mload(pointer))\\n                mstore(memoryPointer, currentSlot)\\n                memoryPointer := add(memoryPointer, typeLength)\\n            }\\n\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n\\n    function _joinReferenceType(uint256 a)\\n        public\\n        pure\\n        returns (bytes memory tempBytes)\\n    {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n            }\\n\\n            mstore(tempBytes, stringLength)\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xce9af799b9822afd98b04a6a909873417cf0b71554d25b624f608b3673feeee1\",\"license\":\"MIT\"},\"contracts/lib/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com> from Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Bytes {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) public pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (address tmp)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint8 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toBytes1(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes1 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toBytes1_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint16 tmp)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x2), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes) public pure returns (uint16 tmp) {\\n        return toUint16(_bytes, 0);\\n    }\\n\\n    function toBytes2(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes2 tmp)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toBytes2_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x2), _start))\\n        }\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint24 tmp)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x3), _start))\\n        }\\n    }\\n\\n    function toBytes3(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes3 tmp)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toBytes3_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x3), _start))\\n        }\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint32 tmp)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x4), _start))\\n        }\\n    }\\n\\n    function toBytes4(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes4 tmp)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toBytes4_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x4), _start))\\n        }\\n    }\\n\\n    function toUint40(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint40 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toUint40_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toBytes5(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes5 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toBytes5_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toUint48(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint48 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toUint48_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toBytes6(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes6 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toBytes6_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toUint56(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint56 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toUint56_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toByes7(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes7 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toBytes7_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toBytes8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toBytes8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint96 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toBytes12(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toBytes12_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint128 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toBytes16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toBytes16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint256 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes32 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xbfd0cd353b06027abbfc1b20891a58f98db3736432675af56622ee3ccb825a55\",\"license\":\"MIT\"},\"contracts/lib/utils/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < res.length; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x547aedd7ff0df60ed3dfaf6a7ec21210ed631beb6319de9e32f689f3fcb47a08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6128ed61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c80637307855111610096578063a6aabcbd11610070578063a6aabcbd146102b4578063b674b761146102d4578063bd0aa58614610310578063f258feb11461033057600080fd5b80637307855114610261578063999086e3146102815780639cd4bb381461029457600080fd5b806343c8ecbe116100d257806343c8ecbe1461019a5780634d32bd7d146101d65780635e99a6301461021257806369db9ed01461022557600080fd5b8063146f9480146100f9578063407134de1461014b5780634239abe414610187575b600080fd5b6101356040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525081565b604051610142919061195b565b60405180910390f35b6101356040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b6101356101953660046119bd565b610343565b6101356040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525081565b6101356040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b610135610220366004611bf9565b610762565b6101356040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b61027461026f366004611fb0565b610b35565b604051610142919061212e565b61013561028f36600461213f565b610f62565b6102a76102a23660046121b1565b611179565b60405161014291906121fc565b6102c76102c236600461220a565b61129b565b6040516101429190612291565b6101356040518060400160405280601181526020017f25323725323066696c6c3d25323725323300000000000000000000000000000081525081565b61032361031e3660046122a2565b611677565b604051610142919061230f565b61013561033e366004612320565b61180f565b60606000610354856000600261181e565b6040516326b3515760e11b8152732eFa2743B863F3Bd6f624Ac0d58445bC5fB62bf691634d66a2ae9161038a919060040161195b565b602060405180830381865af41580156103a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cb9190612357565b9050836103d960018361238e565b61ffff16101561042057836040517f475e819200000000000000000000000000000000000000000000000000000000815260040161041791906123b3565b60405180910390fd5b6000610462866104318760026123c1565b61043c9060026123e0565b6104478860026123c1565b6104529060026123e0565b61045d9060026123e0565b61181e565b6040516326b3515760e11b8152732eFa2743B863F3Bd6f624Ac0d58445bC5fB62bf691634d66a2ae91610498919060040161195b565b602060405180830381865af41580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d99190612357565b9050600060016104fc8861ffff85166104f38660026123f8565b61ffff1661181e565b6040516326b3515760e11b8152732eFa2743B863F3Bd6f624Ac0d58445bC5fB62bf691634d66a2ae91610532919060040161195b565b602060405180830381865af415801561054f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105739190612357565b61057d919061238e565b90508461058b60018361238e565b61ffff1610156105c957846040517fab074d5200000000000000000000000000000000000000000000000000000000815260040161041791906123b3565b6000610622886105da8860026123c1565b6105e58660026123f8565b61ffff166105f391906123e0565b6105fe8960026123c1565b6106098760026123f8565b61ffff1661061791906123e0565b61045d9060046123e0565b6040517fbe8b3430000000000000000000000000000000000000000000000000000000008152909150610754908990732eFa2743B863F3Bd6f624Ac0d58445bC5fB62bf69063be8b34309061067e908690600090600401612434565b602060405180830381865af415801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190612357565b6106c990866123f8565b61ffff1683732eFa2743B863F3Bd6f624Ac0d58445bC5fB62bf663be8b3430909160026040518363ffffffff1660e01b8152600401610709929190612434565b602060405180830381865af4158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190612357565b6104f390876123f8565b9450505050505b9392505050565b60408051808201909152600f81527f25336372656374253230783d253237000000000000000000000000000000000060208201526060906107a78460fa88901c6123e0565b60405163348051d760e11b815273f4B0EbA794Ab6A7803686398a782c909E45c0bD891636900a3ae916107dd91906004016123b3565b600060405180830381865af41580156107fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082291908101906124ac565b60408051808201909152600b81527f253237253230793d253237000000000000000000000000000000000000000000602082015261086785603f60f48b901c166123e0565b60405163348051d760e11b815273f4B0EbA794Ab6A7803686398a782c909E45c0bD891636900a3ae9161089d91906004016123b3565b600060405180830381865af41580156108ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e291908101906124ac565b604080518082018252600f81527f25323725323077696474683d25323700000000000000000000000000000000006020820152905163348051d760e11b815273f4B0EbA794Ab6A7803686398a782c909E45c0bD890636900a3ae9061095290603f60ee8f901c16906004016123b3565b600060405180830381865af415801561096f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099791908101906124ac565b6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525060088c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60e01c603f1660ff1673f4B0EbA794Ab6A7803686398a782c909E45c0bD8636900a3ae90916040518263ffffffff1660e01b8152600401610a3291906123b3565b600060405180830381865af4158015610a4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7791908101906124ac565b60408051808201909152601181527f25323725323066696c6c3d25323725323300000000000000000000000000000060208201528c8e6003825191901a908110610ac357610ac36124e7565b60200260200101516040518060400160405280600781526020017f2532372f25336500000000000000000000000000000000000000000000000000815250604051602001610b1b9b9a9998979695949392919061251f565b60405160208183030381529060405290505b949350505050565b610b606040518060800160405280606081526020016060815260200160608152602001606081525090565b81515160009067ffffffffffffffff811115610b7e57610b7e611a40565b604051908082528060200260200182016040528015610bb157816020015b6060815260200190600190039081610b9c5790505b509050600083600001515167ffffffffffffffff811115610bd457610bd4611a40565b604051908082528060200260200182016040528015610c0757816020015b6060815260200190600190039081610bf25790505b509050600084600001515167ffffffffffffffff811115610c2a57610c2a611a40565b604051908082528060200260200182016040528015610c5d57816020015b6060815260200190600190039081610c485790505b509050600085600001515167ffffffffffffffff811115610c8057610c80611a40565b604051908082528060200260200182016040528015610ca9578160200160208202803683370190505b50865151909150600090610cc09061ffff906125c7565b610ccb9060026125db565b610cd69060026123f8565b905060005b875151811015610de8576000610d0d89600001518381518110610d0057610d006124e7565b602002602001015161129b565b905082848381518110610d2257610d226124e7565b602002602001019061ffff16908161ffff16815250508060000151878381518110610d4f57610d4f6124e7565b60200260200101819052508060200151858381518110610d7157610d716124e7565b60200260200101819052508060400151868381518110610d9357610d936124e7565b602002602001018190525061ffff8016878381518110610db557610db56124e7565b602002602001015151610dc891906125c7565b610dd290846123f8565b9250508080610de090612603565b915050610cdb565b5060408051608081019091528751518190610e069061ffff906125c7565b60f01b8473824d304b7C17FF1E03bEA9b0f752BA9A2aff342663f25f142d90916040518263ffffffff1660e01b8152600401610e429190612680565b600060405180830381865af4158015610e5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e8791908101906124ac565b6040517f2a7f1c0400000000000000000000000000000000000000000000000000000000815273824d304b7C17FF1E03bEA9b0f752BA9A2aff342690632a7f1c0490610ed7908c906004016126e9565b600060405180830381865af4158015610ef4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f1c91908101906124ac565b604051602001610f2e93929190612722565b6040516020818303038152906040528152602001848152602001858152602001886020015181525095505050505050919050565b606060048351610f7291906125c7565b15610fac5782516040517fc67eee4b00000000000000000000000000000000000000000000000000000000815260040161041791906123b3565b600060048451610fbc9190612745565b905060008167ffffffffffffffff811115610fd957610fd9611a40565b60405190808252806020026020018201604052801561100c57816020015b6060815260200190600190039081610ff75790505b50905060005b81518110156110d8576110a8732eFa2743B863F3Bd6f624Ac0d58445bC5fB62bf66385581ce3886110448560046123c1565b6040518363ffffffff1660e01b8152600401611061929190612759565b602060405180830381865af415801561107e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a29190612784565b8661180f565b8282815181106110ba576110ba6124e7565b602002602001018190525080806110d090612603565b915050611012565b506040517f9bce4e1400000000000000000000000000000000000000000000000000000000815273824d304b7C17FF1E03bEA9b0f752BA9A2aff342690639bce4e14906111299084906004016127fd565b600060405180830381865af4158015611146573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261116e91908101906124ac565b925050505b92915050565b6000603f826000015163ffffffff1611156111aa578151604051630b51c4b160e41b81526104179190600401612829565b603f826020015163ffffffff1611156111dc578160200151604051630b51c4b160e41b81526004016104179190612829565b603f826040015163ffffffff16111561120e578160400151604051630b51c4b160e41b81526004016104179190612829565b603f826060015163ffffffff161115611240578160600151604051630b51c4b160e41b81526004016104179190612829565b816080015160e01b6008836060015163ffffffff16901b60e01b600e846040015163ffffffff16901b60e01b6014856020015163ffffffff16901b60e01b601a866000015163ffffffff16901b60e01b171717179050919050565b6112bf60405180606001604052806060815260200160608152602001606081525090565b81515160009067ffffffffffffffff8111156112dd576112dd611a40565b60405190808252806020026020018201604052801561131057816020015b60608152602001906001900390816112fb5790505b509050600083600001515167ffffffffffffffff81111561133357611333611a40565b60405190808252806020026020018201604052801561136657816020015b60608152602001906001900390816113515790505b5084515190915060009061137b9060016123e0565b67ffffffffffffffff81111561139357611393611a40565b6040519080825280602002602001820160405280156113bc578160200160208202803683370190505b508551519091506000906113d39061ffff906125c7565b6113de9060026125db565b6113e99060046123f8565b905060005b8651518110156114d157600061142088600001518381518110611413576114136124e7565b6020026020010151611677565b90508060000151868381518110611439576114396124e7565b6020026020010181905250806020015185838151811061145b5761145b6124e7565b602002602001018190525082848381518110611479576114796124e7565b61ffff9283166020918202929092010152865187908490811061149e5761149e6124e7565b6020026020010151516114b191906125c7565b6114bb90846123f8565b92505080806114c990612603565b9150506113ee565b508082876000015151815181106114ea576114ea6124e7565b61ffff92831660209182029290920101526040805160608101909152875151909182916115189060016123e0565b61152291906125c7565b60f01b8473824d304b7C17FF1E03bEA9b0f752BA9A2aff342663f25f142d90916040518263ffffffff1660e01b815260040161155e9190612680565b600060405180830381865af415801561157b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115a391908101906124ac565b6040517f2a7f1c0400000000000000000000000000000000000000000000000000000000815273824d304b7C17FF1E03bEA9b0f752BA9A2aff342690632a7f1c04906115f3908b906004016126e9565b600060405180830381865af4158015611610573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261163891908101906124ac565b60405160200161164a93929190612722565b60405160208183030381529060405281526020018481526020018760200151815250945050505050919050565b604080518082019091526060808252602082015281515160009067ffffffffffffffff8111156116a9576116a9611a40565b6040519080825280602002602001820160405280156116d2578160200160208202803683370190505b50905060005b83515181101561175d57611708846000015182815181106116fb576116fb6124e7565b6020026020010151611179565b82828151811061171a5761171a6124e7565b7fffffffff00000000000000000000000000000000000000000000000000000000909216602092830291909101909101528061175581612603565b9150506116d8565b5060408051808201918290527f2fdc8c20000000000000000000000000000000000000000000000000000000009091528073824d304b7C17FF1E03bEA9b0f752BA9A2aff3426632fdc8c206117b5856044850161287e565b600060405180830381865af41580156117d2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117fa91908101906124ac565b81526020018460200151815250915050919050565b606061075b8383600080610762565b6060610b2d8461182f8560016123e0565b61183a8560016123e0565b6060833b8061185957505060408051602081019091526000815261075b565b8084111561187757505060408051602081019091526000815261075b565b838310156118b7578084846040517f2c4a89fa0000000000000000000000000000000000000000000000000000000081526004016104179392919061288f565b83830384820360008282106118cc57826118ce565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b60005b838110156119145781810151838201526020016118fc565b83811115611923576000848401525b50505050565b6000611933825190565b80845260208401935061194a8185602086016118f9565b601f01601f19169290920192915050565b6020808252810161075b8184611929565b600073ffffffffffffffffffffffffffffffffffffffff8216611173565b6119938161196c565b811461199e57600080fd5b50565b80356111738161198a565b80611993565b8035611173816119ac565b6000806000606084860312156119d5576119d5600080fd5b60006119e186866119a1565b93505060206119f2868287016119b2565b9250506040611a03868287016119b2565b9150509250925092565b7fffffffff000000000000000000000000000000000000000000000000000000008116611993565b803561117381611a0d565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715611a7c57611a7c611a40565b6040525050565b6000611a8e60405190565b9050611a9a8282611a56565b919050565b600067ffffffffffffffff821115611ab957611ab9611a40565b5060209081020190565b600067ffffffffffffffff821115611add57611add611a40565b601f19601f83011660200192915050565b82818337506000910152565b6000611b0d611b0884611ac3565b611a83565b905082815260208101848484011115611b2857611b28600080fd5b611b33848285611aee565b509392505050565b600082601f830112611b4f57611b4f600080fd5b8135610b2d848260208601611afa565b6000611b6d611b0884611a9f565b83815290506020808201908402830185811115611b8c57611b8c600080fd5b835b81811015611bcb57803567ffffffffffffffff811115611bb057611bb0600080fd5b8501611bbc8882611b3b565b84525060209283019201611b8e565b5050509392505050565b600082601f830112611be957611be9600080fd5b8135610b2d848260208601611b5f565b60008060008060808587031215611c1257611c12600080fd5b6000611c1e8787611a35565b945050602085013567ffffffffffffffff811115611c3e57611c3e600080fd5b611c4a87828801611bd5565b9350506040611c5b878288016119b2565b9250506060611c6c878288016119b2565b91505092959194509250565b63ffffffff8116611993565b803561117381611c78565b600060a08284031215611ca457611ca4600080fd5b611cae60a0611a83565b90506000611cbc8484611c84565b908201526020611cce84848301611c84565b908201526040611ce084848301611c84565b908201526060611cf284848301611c84565b908201526080611d0484848301611c84565b9082015292915050565b6000611d1c611b0884611a9f565b83815290506020810160a08402830185811115611d3b57611d3b600080fd5b835b81811015611bcb57611d4f8782611c8f565b835260209092019160a001611d3d565b600082601f830112611d7357611d73600080fd5b8135610b2d848260208601611d0e565b600060408284031215611d9857611d98600080fd5b611da26040611a83565b9050813567ffffffffffffffff811115611dbe57611dbe600080fd5b611dca84828501611d5f565b825250602082013567ffffffffffffffff811115611dea57611dea600080fd5b611df684828501611b3b565b60208301525092915050565b6000611e10611b0884611a9f565b83815290506020808201908402830185811115611e2f57611e2f600080fd5b835b81811015611bcb57803567ffffffffffffffff811115611e5357611e53600080fd5b8501611e5f8882611d83565b84525060209283019201611e31565b600082601f830112611e8257611e82600080fd5b8135610b2d848260208601611e02565b600060408284031215611ea757611ea7600080fd5b611eb16040611a83565b9050813567ffffffffffffffff811115611ecd57611ecd600080fd5b611dca84828501611e6e565b6000611ee7611b0884611a9f565b83815290506020808201908402830185811115611f0657611f06600080fd5b835b81811015611bcb57803567ffffffffffffffff811115611f2a57611f2a600080fd5b8501611f368882611e92565b84525060209283019201611f08565b600082601f830112611f5957611f59600080fd5b8135610b2d848260208601611ed9565b600060408284031215611f7e57611f7e600080fd5b611f886040611a83565b9050813567ffffffffffffffff811115611fa457611fa4600080fd5b611dca84828501611f45565b600060208284031215611fc557611fc5600080fd5b813567ffffffffffffffff811115611fdf57611fdf600080fd5b610b2d84828501611f69565b600061075b8383611929565b6000612001825190565b8084526020840193508360208202850161201b8560200190565b60005b8481101561204f57838303885281516120378482611feb565b9350506020820160209890980197915060010161201e565b50909695505050505050565b600061075b8383611ff7565b6000612071825190565b8084526020840193508360208202850161208b8560200190565b60005b8481101561204f57838303885281516120a7848261205b565b9350506020820160209890980197915060010161208e565b80516080808452600091908401906120d78282611929565b915050602083015184820360208601526120f18282612067565b9150506040830151848203604086015261210b8282611ff7565b915050606083015184820360608601526121258282611929565b95945050505050565b6020808252810161075b81846120bf565b6000806040838503121561215557612155600080fd5b823567ffffffffffffffff81111561216f5761216f600080fd5b61217b85828601611b3b565b925050602083013567ffffffffffffffff81111561219b5761219b600080fd5b6121a785828601611bd5565b9150509250929050565b600060a082840312156121c6576121c6600080fd5b6000610b2d8484611c8f565b7fffffffff0000000000000000000000000000000000000000000000000000000081165b82525050565b6020810161117382846121d2565b60006020828403121561221f5761221f600080fd5b813567ffffffffffffffff81111561223957612239600080fd5b610b2d84828501611e92565b805160608084526000919084019061225d8282611929565b915050602083015184820360208601526122778282611ff7565b915050604083015184820360408601526121258282611929565b6020808252810161075b8184612245565b6000602082840312156122b7576122b7600080fd5b813567ffffffffffffffff8111156122d1576122d1600080fd5b610b2d84828501611d83565b80516040808452600091908401906122f58282611929565b915050602083015184820360208601526121258282611929565b6020808252810161075b81846122dd565b6000806040838503121561233657612336600080fd5b600061217b8585611a35565b61ffff8116611993565b805161117381612342565b60006020828403121561236c5761236c600080fd5b6000610b2d848461234c565b634e487b7160e01b600052601160045260246000fd5b61ffff91821691166000828210156123a8576123a8612378565b500390565b806121f6565b6020810161117382846123ad565b60008160001904831182151516156123db576123db612378565b500290565b600082198211156123f3576123f3612378565b500190565b61ffff8116905061ffff8216915060008261ffff038211156123f3576123f3612378565b60006111736124288381565b90565b6121f68161241c565b604080825281016124458185611929565b905061075b602083018461242b565b6000612462611b0884611ac3565b90508281526020810184848401111561247d5761247d600080fd5b611b338482856118f9565b600082601f83011261249c5761249c600080fd5b8151610b2d848260208601612454565b6000602082840312156124c1576124c1600080fd5b815167ffffffffffffffff8111156124db576124db600080fd5b610b2d84828501612488565b634e487b7160e01b600052603260045260246000fd5b6000612507825190565b6125158185602086016118f9565b9290920192915050565b612529818d6124fd565b9050612535818c6124fd565b9050612541818b6124fd565b905061254d818a6124fd565b905061255981896124fd565b905061256581886124fd565b905061257181876124fd565b905061257d81866124fd565b905061258981856124fd565b905061259581846124fd565b90506125a181836124fd565b9c9b505050505050505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826125d6576125d66125b1565b500690565b61ffff8116905061ffff8216915060008161ffff04831182151516156123db576123db612378565b600060001982141561261757612617612378565b5060010190565b61ffff81166121f6565b612632828261261e565b5060200190565b6000612643825190565b808452602093840193830160005b828110156126765781516126658782612628565b965050602082019150600101612651565b5093949350505050565b6020808252810161075b8184612639565b600061269b825190565b808452602084019350836020820285016126b58560200190565b60005b8481101561204f57838303885281516126d18482611feb565b935050602082016020989098019791506001016126b8565b6020808252810161075b8184612691565b7fffff00000000000000000000000000000000000000000000000000000000000081166121f6565b61272c81856126fa565b60020161273981846124fd565b9050610b2d81836124fd565b600082612754576127546125b1565b500490565b6040808252810161276a8185611929565b905061075b60208301846123ad565b805161117381611a0d565b60006020828403121561279957612799600080fd5b6000610b2d8484612779565b60006127af825190565b808452602084019350836020820285016127c98560200190565b60005b8481101561204f57838303885281516127e58482611feb565b935050602082016020989098019791506001016127cc565b6020808252810161075b81846127a5565b600061117361242863ffffffff841681565b6121f68161280e565b602081016111738284612820565b61263282826121d2565b600061284b825190565b808452602093840193830160005b8281101561267657815161286d8782612837565b965050602082019150600101612859565b6020808252810161075b8184612841565b6060810161289d82866123ad565b6128aa60208301856123ad565b610b2d60408301846123ad56fea2646970667358221220342b9e104c2f709f292cbd753d162709553f5fd7adb0cef87f99b2274338d64f64736f6c634300080c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100f45760003560e01c80637307855111610096578063a6aabcbd11610070578063a6aabcbd146102b4578063b674b761146102d4578063bd0aa58614610310578063f258feb11461033057600080fd5b80637307855114610261578063999086e3146102815780639cd4bb381461029457600080fd5b806343c8ecbe116100d257806343c8ecbe1461019a5780634d32bd7d146101d65780635e99a6301461021257806369db9ed01461022557600080fd5b8063146f9480146100f9578063407134de1461014b5780634239abe414610187575b600080fd5b6101356040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525081565b604051610142919061195b565b60405180910390f35b6101356040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b6101356101953660046119bd565b610343565b6101356040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525081565b6101356040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b610135610220366004611bf9565b610762565b6101356040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b61027461026f366004611fb0565b610b35565b604051610142919061212e565b61013561028f36600461213f565b610f62565b6102a76102a23660046121b1565b611179565b60405161014291906121fc565b6102c76102c236600461220a565b61129b565b6040516101429190612291565b6101356040518060400160405280601181526020017f25323725323066696c6c3d25323725323300000000000000000000000000000081525081565b61032361031e3660046122a2565b611677565b604051610142919061230f565b61013561033e366004612320565b61180f565b60606000610354856000600261181e565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae9161038a919060040161195b565b602060405180830381865af41580156103a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103cb9190612357565b9050836103d960018361238e565b61ffff16101561042057836040517f475e819200000000000000000000000000000000000000000000000000000000815260040161041791906123b3565b60405180910390fd5b6000610462866104318760026123c1565b61043c9060026123e0565b6104478860026123c1565b6104529060026123e0565b61045d9060026123e0565b61181e565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae91610498919060040161195b565b602060405180830381865af41580156104b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d99190612357565b9050600060016104fc8861ffff85166104f38660026123f8565b61ffff1661181e565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae91610532919060040161195b565b602060405180830381865af415801561054f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105739190612357565b61057d919061238e565b90508461058b60018361238e565b61ffff1610156105c957846040517fab074d5200000000000000000000000000000000000000000000000000000000815260040161041791906123b3565b6000610622886105da8860026123c1565b6105e58660026123f8565b61ffff166105f391906123e0565b6105fe8960026123c1565b6106098760026123f8565b61ffff1661061791906123e0565b61045d9060046123e0565b6040517fbe8b343000000000000000000000000000000000000000000000000000000000815290915061075490899073__$dcaad1777d2b99f53d9a752b008027c0a6$__9063be8b34309061067e908690600090600401612434565b602060405180830381865af415801561069b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bf9190612357565b6106c990866123f8565b61ffff168373__$dcaad1777d2b99f53d9a752b008027c0a6$__63be8b3430909160026040518363ffffffff1660e01b8152600401610709929190612434565b602060405180830381865af4158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190612357565b6104f390876123f8565b9450505050505b9392505050565b60408051808201909152600f81527f25336372656374253230783d253237000000000000000000000000000000000060208201526060906107a78460fa88901c6123e0565b60405163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__91636900a3ae916107dd91906004016123b3565b600060405180830381865af41580156107fa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261082291908101906124ac565b60408051808201909152600b81527f253237253230793d253237000000000000000000000000000000000000000000602082015261086785603f60f48b901c166123e0565b60405163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__91636900a3ae9161089d91906004016123b3565b600060405180830381865af41580156108ba573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108e291908101906124ac565b604080518082018252600f81527f25323725323077696474683d25323700000000000000000000000000000000006020820152905163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__90636900a3ae9061095290603f60ee8f901c16906004016123b3565b600060405180830381865af415801561096f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261099791908101906124ac565b6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525060088c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60e01c603f1660ff1673__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__636900a3ae90916040518263ffffffff1660e01b8152600401610a3291906123b3565b600060405180830381865af4158015610a4f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7791908101906124ac565b60408051808201909152601181527f25323725323066696c6c3d25323725323300000000000000000000000000000060208201528c8e6003825191901a908110610ac357610ac36124e7565b60200260200101516040518060400160405280600781526020017f2532372f25336500000000000000000000000000000000000000000000000000815250604051602001610b1b9b9a9998979695949392919061251f565b60405160208183030381529060405290505b949350505050565b610b606040518060800160405280606081526020016060815260200160608152602001606081525090565b81515160009067ffffffffffffffff811115610b7e57610b7e611a40565b604051908082528060200260200182016040528015610bb157816020015b6060815260200190600190039081610b9c5790505b509050600083600001515167ffffffffffffffff811115610bd457610bd4611a40565b604051908082528060200260200182016040528015610c0757816020015b6060815260200190600190039081610bf25790505b509050600084600001515167ffffffffffffffff811115610c2a57610c2a611a40565b604051908082528060200260200182016040528015610c5d57816020015b6060815260200190600190039081610c485790505b509050600085600001515167ffffffffffffffff811115610c8057610c80611a40565b604051908082528060200260200182016040528015610ca9578160200160208202803683370190505b50865151909150600090610cc09061ffff906125c7565b610ccb9060026125db565b610cd69060026123f8565b905060005b875151811015610de8576000610d0d89600001518381518110610d0057610d006124e7565b602002602001015161129b565b905082848381518110610d2257610d226124e7565b602002602001019061ffff16908161ffff16815250508060000151878381518110610d4f57610d4f6124e7565b60200260200101819052508060200151858381518110610d7157610d716124e7565b60200260200101819052508060400151868381518110610d9357610d936124e7565b602002602001018190525061ffff8016878381518110610db557610db56124e7565b602002602001015151610dc891906125c7565b610dd290846123f8565b9250508080610de090612603565b915050610cdb565b5060408051608081019091528751518190610e069061ffff906125c7565b60f01b8473__$3d939fd680257e7df63fc3436eced304ff$__63f25f142d90916040518263ffffffff1660e01b8152600401610e429190612680565b600060405180830381865af4158015610e5f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e8791908101906124ac565b6040517f2a7f1c0400000000000000000000000000000000000000000000000000000000815273__$3d939fd680257e7df63fc3436eced304ff$__90632a7f1c0490610ed7908c906004016126e9565b600060405180830381865af4158015610ef4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f1c91908101906124ac565b604051602001610f2e93929190612722565b6040516020818303038152906040528152602001848152602001858152602001886020015181525095505050505050919050565b606060048351610f7291906125c7565b15610fac5782516040517fc67eee4b00000000000000000000000000000000000000000000000000000000815260040161041791906123b3565b600060048451610fbc9190612745565b905060008167ffffffffffffffff811115610fd957610fd9611a40565b60405190808252806020026020018201604052801561100c57816020015b6060815260200190600190039081610ff75790505b50905060005b81518110156110d8576110a873__$dcaad1777d2b99f53d9a752b008027c0a6$__6385581ce3886110448560046123c1565b6040518363ffffffff1660e01b8152600401611061929190612759565b602060405180830381865af415801561107e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a29190612784565b8661180f565b8282815181106110ba576110ba6124e7565b602002602001018190525080806110d090612603565b915050611012565b506040517f9bce4e1400000000000000000000000000000000000000000000000000000000815273__$3d939fd680257e7df63fc3436eced304ff$__90639bce4e14906111299084906004016127fd565b600060405180830381865af4158015611146573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261116e91908101906124ac565b925050505b92915050565b6000603f826000015163ffffffff1611156111aa578151604051630b51c4b160e41b81526104179190600401612829565b603f826020015163ffffffff1611156111dc578160200151604051630b51c4b160e41b81526004016104179190612829565b603f826040015163ffffffff16111561120e578160400151604051630b51c4b160e41b81526004016104179190612829565b603f826060015163ffffffff161115611240578160600151604051630b51c4b160e41b81526004016104179190612829565b816080015160e01b6008836060015163ffffffff16901b60e01b600e846040015163ffffffff16901b60e01b6014856020015163ffffffff16901b60e01b601a866000015163ffffffff16901b60e01b171717179050919050565b6112bf60405180606001604052806060815260200160608152602001606081525090565b81515160009067ffffffffffffffff8111156112dd576112dd611a40565b60405190808252806020026020018201604052801561131057816020015b60608152602001906001900390816112fb5790505b509050600083600001515167ffffffffffffffff81111561133357611333611a40565b60405190808252806020026020018201604052801561136657816020015b60608152602001906001900390816113515790505b5084515190915060009061137b9060016123e0565b67ffffffffffffffff81111561139357611393611a40565b6040519080825280602002602001820160405280156113bc578160200160208202803683370190505b508551519091506000906113d39061ffff906125c7565b6113de9060026125db565b6113e99060046123f8565b905060005b8651518110156114d157600061142088600001518381518110611413576114136124e7565b6020026020010151611677565b90508060000151868381518110611439576114396124e7565b6020026020010181905250806020015185838151811061145b5761145b6124e7565b602002602001018190525082848381518110611479576114796124e7565b61ffff9283166020918202929092010152865187908490811061149e5761149e6124e7565b6020026020010151516114b191906125c7565b6114bb90846123f8565b92505080806114c990612603565b9150506113ee565b508082876000015151815181106114ea576114ea6124e7565b61ffff92831660209182029290920101526040805160608101909152875151909182916115189060016123e0565b61152291906125c7565b60f01b8473__$3d939fd680257e7df63fc3436eced304ff$__63f25f142d90916040518263ffffffff1660e01b815260040161155e9190612680565b600060405180830381865af415801561157b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115a391908101906124ac565b6040517f2a7f1c0400000000000000000000000000000000000000000000000000000000815273__$3d939fd680257e7df63fc3436eced304ff$__90632a7f1c04906115f3908b906004016126e9565b600060405180830381865af4158015611610573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261163891908101906124ac565b60405160200161164a93929190612722565b60405160208183030381529060405281526020018481526020018760200151815250945050505050919050565b604080518082019091526060808252602082015281515160009067ffffffffffffffff8111156116a9576116a9611a40565b6040519080825280602002602001820160405280156116d2578160200160208202803683370190505b50905060005b83515181101561175d57611708846000015182815181106116fb576116fb6124e7565b6020026020010151611179565b82828151811061171a5761171a6124e7565b7fffffffff00000000000000000000000000000000000000000000000000000000909216602092830291909101909101528061175581612603565b9150506116d8565b5060408051808201918290527f2fdc8c20000000000000000000000000000000000000000000000000000000009091528073__$3d939fd680257e7df63fc3436eced304ff$",
  "libraries": {
    "Array": "0x824d304b7C17FF1E03bEA9b0f752BA9A2aff3426",
    "Bytes": "0x2eFa2743B863F3Bd6f624Ac0d58445bC5fB62bf6",
    "Integers": "0xf4B0EbA794Ab6A7803686398a782c909E45c0bD8"
  },
  "devdoc": {
    "author": "Clement Walter <clement0walter@gmail.com>",
    "kind": "dev",
    "methods": {
      "encodeCharacteristic(Characteristic)": {
        "details": "Use this function to encode a characteristic, i.e. a list of traits belongings to the same group. Note that       there is no intrinsic difference between a characteristic and a whole collection (all the traits of all the       characteristics) but it's how it's used and expected today so we keep the wording here.       Use this off-chain and push the result using RendererCommon.storeBytes",
        "params": {
          "characteristic": "The list of Trait constituting the characteristic."
        },
        "returns": {
          "_0": "The encoded characteristic (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)"
        }
      },
      "encodeCollection(Collection)": {
        "details": "Use this function to encode a full collection, i.e. a list of characteristics.       Use this off-chain and push the result using RendererCommon.storeBytes",
        "params": {
          "collection": "The list of Characteristic constituting the collection. The description is just returned in the        new object and can be used to store the description of the collection."
        },
        "returns": {
          "_0": "The encoded collection (mainly a bytes memory whose encoding somehow follows solidity memory storage rules.)"
        }
      },
      "encodeRect(Rect)": {
        "details": "Use this function to encode a single <rect> as expected by the renderer. Use this off-chain!",
        "params": {
          "rect": "The <rect> to encode"
        },
        "returns": {
          "_0": "The encoded rectangle as a bytes4"
        }
      },
      "encodeTrait(Trait)": {
        "details": "Use this function to encode a _trait_, i.e. a list of <rect>s with a name, as expected by the renderer.       Use this off-chain!",
        "params": {
          "trait": "The list of <rect>s to encode with a given name; should be shorter than 32 char."
        },
        "returns": {
          "_0": "The encoded list of rectangle"
        }
      },
      "getTraitBytes(address,uint256,uint256)": {
        "details": "Retrieve the bytes for the given trait from the traits storage.",
        "params": {
          "characteristicIndex": "The index of the characteristic in the collection.",
          "pointer": "The pointer to the traits stored with SSTORE2.",
          "traitIndex": "The index of the trait in the characteristic."
        },
        "returns": {
          "_0": "The bytes of the trait."
        }
      }
    },
    "title": "RectRenderer   This library can be used to render on-chain images stored as a layering of rectangles.   The returned images is an url safe encoded image uri.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}