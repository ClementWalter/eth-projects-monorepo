{
  "address": "0x88e41790a4577De919aCB7E384EEd6534d58Cdc1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        }
      ],
      "name": "BytesStored",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DATA_URI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NUMBER_SIGN",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "QUOTE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SPACE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAG_END",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TAG_START",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "XMLNS_HEADER",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "names",
          "type": "bytes"
        }
      ],
      "name": "decodeNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "characteristicNames",
          "type": "string[]"
        },
        {
          "internalType": "string[][]",
          "name": "traitNames",
          "type": "string[][]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        }
      ],
      "name": "decodeNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "characteristicNames",
          "type": "string[]"
        },
        {
          "internalType": "string[][]",
          "name": "traitNames",
          "type": "string[][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "characteristicNames",
          "type": "string[]"
        },
        {
          "internalType": "string[][]",
          "name": "traitNames",
          "type": "string[][]"
        }
      ],
      "name": "encodeNames",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        }
      ],
      "name": "encodePalette",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "palette",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFill",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFill",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        }
      ],
      "name": "getPalette",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "palette",
          "type": "bytes"
        }
      ],
      "name": "getPalette",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "",
          "type": "string[]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "items",
          "type": "uint256[]"
        }
      ],
      "name": "tokenData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "image",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "trait_type",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "value",
                  "type": "string"
                }
              ],
              "internalType": "struct Attribute[]",
              "name": "attributes",
              "type": "tuple[]"
            }
          ],
          "internalType": "struct TokenData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "items",
          "type": "uint256[]"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0a511acebe298f900c383ee0a549fe0a26ed42fefd0f7c6c360ac7c5a4f9a611",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0x88e41790a4577De919aCB7E384EEd6534d58Cdc1",
    "transactionIndex": 359,
    "gasUsed": "1733983",
    "logsBloom": "0x
    "blockHash": "0xf0e07ddd4318999682dc4dd8fbee089536cad832452ef3a1ae885005e11c8fae",
    "transactionHash": "0x0a511acebe298f900c383ee0a549fe0a26ed42fefd0f7c6c360ac7c5a4f9a611",
    "logs": [],
    "blockNumber": 14722822,
    "cumulativeGasUsed": "25176741",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cf4062d6e14cbd44f5db31ab6a3c9f76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"}],\"name\":\"BytesStored\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DATA_URI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NUMBER_SIGN\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"QUOTE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPACE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XMLNS_HEADER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"names\",\"type\":\"bytes\"}],\"name\":\"decodeNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"characteristicNames\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"traitNames\",\"type\":\"string[][]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"}],\"name\":\"decodeNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"characteristicNames\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"traitNames\",\"type\":\"string[][]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"characteristicNames\",\"type\":\"string[]\"},{\"internalType\":\"string[][]\",\"name\":\"traitNames\",\"type\":\"string[][]\"}],\"name\":\"encodeNames\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"}],\"name\":\"encodePalette\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"palette\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFill\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFill\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"}],\"name\":\"getPalette\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"palette\",\"type\":\"bytes\"}],\"name\":\"getPalette\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"\",\"type\":\"string[]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"name\":\"tokenData\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"trait_type\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"value\",\"type\":\"string\"}],\"internalType\":\"struct Attribute[]\",\"name\":\"attributes\",\"type\":\"tuple[]\"}],\"internalType\":\"struct TokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Clement Walter <clement0walter@gmail.com>\",\"kind\":\"dev\",\"methods\":{\"decodeNames(address)\":{\"details\":\"Retrieve the names encoded with the collection: description, characteristics and traits names array.\",\"params\":{\"pointer\":\"The address of the SSTORE2 contract for the names.\"}},\"decodeNames(bytes)\":{\"details\":\"Retrieve the names encoded with the collection: description, characteristics and traits names array.\",\"params\":{\"names\":\"The bytes the names encoded by the RectEncoder.\"}},\"encodeNames(string,string[],string[][])\":{\"details\":\"This is just a direct call to abi.encode to insure standard encoding scheme for the names across renders.\",\"params\":{\"characteristicNames\":\"The names of the characteristics.\",\"description\":\"The description of the collection.\",\"traitNames\":\"The names of the traits.\"},\"returns\":{\"_0\":\"The encoded bytes.\"}},\"encodePalette(string[])\":{\"details\":\"Usually colors are already defined in hex color space so we just concat all the colors. No check is made      and this function only concatenates the input colors.\",\"params\":{\"palette\":\"The list of colors as hex strings, without the leading #.\"},\"returns\":{\"_0\":\"The concatenated colors as string. To be used as bytes afterwards.\"}},\"getFill(address,uint256)\":{\"details\":\"Returns one single color reading directly from the storage.\",\"params\":{\"index\":\"The index of the color to retrieve\",\"pointer\":\"The pointer to the palette bytes array where each color is R, G, B at storage i, i+1, i+2.\"},\"returns\":{\"_0\":\"The hexstring representation of the color, e.g. \\\"a3120f\\\".\"}},\"getFill(bytes,uint256)\":{\"details\":\"Returns one single color from a pre-loaded whole palette as a bytes array.\",\"params\":{\"index\":\"The index of the color to retrieve\",\"palette\":\"A bytes array encoding several RGB colors. Length should be a multiple of 3.\"},\"returns\":{\"_0\":\"The hexstring representation of the color, e.g. \\\"a3120f\\\".\"}},\"getPalette(address)\":{\"details\":\"Decode the whole palette once for all and returns an array of hexstrings.\",\"params\":{\"pointer\":\"The pointer to the palette bytes array where each color is at storage at i, i+1, i+2.\"},\"returns\":{\"_0\":\"An array of hexstring representation of the color, e.g. \\\"a3120f\\\".\"}}},\"title\":\"BaseRenderer   This library contains shared functionality and constants for the renderers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/renderers/RendererCommons.sol\":\"RendererCommons\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"contracts/lib/renderers/RendererCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\nstruct Attribute {\\n    string trait_type;\\n    string value;\\n}\\n\\nstruct TokenData {\\n    string image;\\n    string description;\\n    string name;\\n    Attribute[] attributes;\\n}\\n\\n/**  @title BaseRenderer\\n *\\n *   This library contains shared functionality and constants for the renderers.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RendererCommons {\\n    using Integers for uint256;\\n    using Integers for uint8;\\n    using Array for string[];\\n\\n    string public constant DATA_URI = \\\"data:image/svg+xml,\\\";\\n    string public constant XMLNS_HEADER =\\n        \\\"xmlns=%27http://www.w3.org/2000/svg%27\\\";\\n    string public constant SPACE = \\\"%20\\\";\\n    string public constant QUOTE = \\\"%27\\\";\\n    string public constant NUMBER_SIGN = \\\"%23\\\";\\n    string public constant TAG_START = \\\"%3c\\\";\\n    string public constant TAG_END = \\\"/%3e\\\";\\n\\n    event BytesStored(address pointer);\\n\\n    /**\\n     * @dev Usually colors are already defined in hex color space so we just concat all the colors. No check is made\\n     *      and this function only concatenates the input colors.\\n     * @param palette The list of colors as hex strings, without the leading #.\\n     * @return The concatenated colors as string. To be used as bytes afterwards.\\n     */\\n    function encodePalette(string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"0x\\\", palette.join());\\n    }\\n\\n    /** @dev Returns one single color reading directly from the storage.\\n     * @param pointer The pointer to the palette bytes array where each color is R, G, B at storage i, i+1, i+2.\\n     * @param index The index of the color to retrieve\\n     * @return The hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getFill(address pointer, uint256 index)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        bytes memory palette = SSTORE2.read(pointer, 3 * index, 3 * index + 3);\\n\\n        return\\n            string.concat(\\n                uint8(palette[0]).toString(16, 2),\\n                uint8(palette[1]).toString(16, 2),\\n                uint8(palette[2]).toString(16, 2)\\n            );\\n    }\\n\\n    /** @dev Returns one single color from a pre-loaded whole palette as a bytes array.\\n     * @param palette A bytes array encoding several RGB colors. Length should be a multiple of 3.\\n     * @param index The index of the color to retrieve\\n     * @return The hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getFill(bytes memory palette, uint256 index)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                uint8(palette[3 * index]).toString(16, 2),\\n                uint8(palette[3 * index + 1]).toString(16, 2),\\n                uint8(palette[3 * index + 2]).toString(16, 2)\\n            );\\n    }\\n\\n    /** @dev Decode the whole palette once for all and returns an array of hexstrings.\\n     * @param pointer The pointer to the palette bytes array where each color is at storage at i, i+1, i+2.\\n     * @return An array of hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getPalette(address pointer) public view returns (string[] memory) {\\n        bytes memory palette = SSTORE2.read(pointer);\\n        return getPalette(palette);\\n    }\\n\\n    function getPalette(bytes memory palette)\\n        public\\n        pure\\n        returns (string[] memory)\\n    {\\n        uint256 paletteSize = palette.length / 3;\\n        string[] memory paletteHex = new string[](paletteSize);\\n        for (uint256 i = 0; i < paletteSize; i++) {\\n            paletteHex[i] = getFill(palette, i);\\n        }\\n        return paletteHex;\\n    }\\n\\n    /** @dev Retrieve the names encoded with the collection: description, characteristics and traits names array.\\n     * @param names The bytes the names encoded by the RectEncoder.\\n     */\\n    function decodeNames(bytes memory names)\\n        public\\n        pure\\n        returns (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        )\\n    {\\n        return abi.decode(names, (string, string[], string[][]));\\n    }\\n\\n    /** @dev Retrieve the names encoded with the collection: description, characteristics and traits names array.\\n     * @param pointer The address of the SSTORE2 contract for the names.\\n     */\\n    function decodeNames(address pointer)\\n        public\\n        view\\n        returns (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        )\\n    {\\n        return decodeNames(SSTORE2.read(pointer));\\n    }\\n\\n\\n    /** @dev This is just a direct call to abi.encode to insure standard encoding scheme for the names across renders.\\n     * @param description The description of the collection.\\n     * @param characteristicNames The names of the characteristics.\\n     * @param traitNames The names of the traits.\\n     * @return The encoded bytes.\\n     */\\n    function encodeNames(string memory description, string[] memory characteristicNames, string[][] memory traitNames)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(\\n            description, characteristicNames, traitNames\\n        );\\n    }\\n\\n    function tokenData(address pointer, uint256[] memory items)\\n        public\\n        view\\n        returns (TokenData memory)\\n    {\\n        (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        ) = decodeNames(SSTORE2.read(pointer));\\n        Attribute[] memory attributes = new Attribute[](items.length);\\n        for (uint256 i = 0; i < items.length; i++) {\\n            attributes[i] = Attribute(\\n                characteristicNames[i],\\n                traitNames[i][items[i]]\\n            );\\n        }\\n        return TokenData(\\\"\\\", description, \\\"\\\", attributes);\\n    }\\n\\n    function tokenURI(address pointer, uint256[] memory items) public view returns (string memory) {\\n        TokenData memory _tokenData = tokenData(pointer, items);\\n        string[] memory attributes = new string[](_tokenData.attributes.length);\\n        for (uint256 i = 0; i < _tokenData.attributes.length; i++) {\\n            attributes[i] = string.concat(\\n                '{\\\"trait_type\\\": \\\"',\\n                _tokenData.attributes[i].trait_type,\\n                '\\\", \\\"value\\\": \\\"',\\n                _tokenData.attributes[i].value,\\n                '\\\"}'\\n            );\\n        }\\n        return\\n            string.concat(\\n                \\\"data:application/json,\\\",\\n                '{\\\"image\\\": \\\"',\\n                _tokenData.image,\\n                '\\\"',\\n                ',\\\"description\\\": \\\"',\\n                _tokenData.description,\\n                '\\\"',\\n                ',\\\"name\\\": \\\"',\\n                _tokenData.name,\\n                '\\\"',\\n                ',\\\"attributes\\\": ',\\n                \\\"[\\\",\\n                attributes.join(\\\",\\\"),\\n                \\\"]\\\",\\n                \\\"}\\\"\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x820304854dc8a3a83f61a2606ecba1ea7c363258dd4bfa047edcafff8e006831\",\"license\":\"MIT\"},\"contracts/lib/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com>\\n *\\n * @notice An attempt at implementing some of the widely used javascript's Array functions in solidity.\\n */\\npragma solidity ^0.8.12;\\n\\nerror EmptyArray();\\nerror GlueOutOfBounds(uint256 length);\\n\\nlibrary Array {\\n    function join(string[] memory a, string memory glue)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return string(_joinReferenceType(inputPointer, gluePointer));\\n    }\\n\\n    function join(string[] memory a) public pure returns (string memory) {\\n        return join(a, \\\"\\\");\\n    }\\n\\n    function join(bytes[] memory a, bytes memory glue)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return _joinReferenceType(inputPointer, gluePointer);\\n    }\\n\\n    function join(bytes[] memory a) public pure returns (bytes memory) {\\n        return join(a, bytes(\\\"\\\"));\\n    }\\n\\n    function join(bytes2[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 0);\\n    }\\n\\n    /// @dev Join the underlying array of bytes2 to a string.\\n    function join(uint16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 256 - 16);\\n    }\\n\\n    function join(bytes3[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 3, 0);\\n    }\\n\\n    function join(bytes4[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 4, 0);\\n    }\\n\\n    function join(bytes8[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 8, 0);\\n    }\\n\\n    function join(bytes16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 16, 0);\\n    }\\n\\n    function join(bytes32[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 32, 0);\\n    }\\n\\n    function _joinValueType(\\n        uint256 a,\\n        uint256 typeLength,\\n        uint256 shiftLeft\\n    ) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Initialize the length of the final bytes: length is typeLength x inputLength (array of bytes4)\\n            mstore(tempBytes, mul(inputLength, typeLength))\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Iterate over all bytes4\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentSlot := shl(shiftLeft, mload(pointer))\\n                mstore(memoryPointer, currentSlot)\\n                memoryPointer := add(memoryPointer, typeLength)\\n            }\\n\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n\\n    function _joinReferenceType(uint256 inputPointer, uint256 gluePointer)\\n        public\\n        pure\\n        returns (bytes memory tempBytes)\\n    {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load glue\\n            let glueLength := mload(gluePointer)\\n            if gt(glueLength, 0x20) {\\n                revert(gluePointer, 0x20)\\n            }\\n            let glue := mload(add(gluePointer, 0x20))\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(inputPointer)\\n            let inputData := add(inputPointer, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n                mstore(memoryPointer, glue)\\n                memoryPointer := add(memoryPointer, glueLength)\\n            }\\n\\n            mstore(\\n                tempBytes,\\n                add(stringLength, mul(sub(inputLength, 1), glueLength))\\n            )\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb288e323d09e12efda2e53871a119c33ef9f5eb9b7a16f7f2f3a01fa61cb3ca8\",\"license\":\"MIT\"},\"contracts/lib/utils/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < res.length; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x547aedd7ff0df60ed3dfaf6a7ec21210ed631beb6319de9e32f689f3fcb47a08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611e8461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106101255760003560e01c80637df16521116100bc578063b3e74d801161008b578063d1741f6811610070578063d1741f68146102ff578063df5f0e0e1461031f578063e0c9ae691461035b57600080fd5b8063b3e74d80146102d9578063c030f08d146102ec57600080fd5b80637df1652114610212578063890a161a1461024e5780639ad21855146102615780639c5798391461029d57600080fd5b8063519513ba116100f8578063519513ba146101b55780636102cd04146101c8578063657fb2e1146101ea5780637be266cc1461020a57600080fd5b8063067b7f9e1461012a57806315cb3a0514610153578063310880911461018f5780633774c798146101a2575b600080fd5b61013d610138366004611024565b610397565b60405161014a91906110c1565b60405180910390f35b61013d6040518060400160405280600481526020017f2f2533650000000000000000000000000000000000000000000000000000000081525081565b61013d61019d366004611196565b610455565b61013d6101b03660046111ee565b61062e565b61013d6101c33660046112cb565b61085e565b6101db6101d636600461136b565b61088e565b60405161014a939291906114d8565b6101fd6101f836600461151a565b6108b4565b60405161014a919061153b565b61013d6108cc565b61013d6040518060400160405280600381526020017f253363000000000000000000000000000000000000000000000000000000000081525081565b61013d61025c36600461154c565b6108e8565b61013d6040518060400160405280601381526020017f646174613a696d6167652f7376672b786d6c2c0000000000000000000000000081525081565b61013d6040518060400160405280600381526020017f253237000000000000000000000000000000000000000000000000000000000081525081565b6101db6102e736600461151a565b610b16565b6101fd6102fa36600461136b565b610b27565b61031261030d366004611196565b610bd9565b60405161014a919061166a565b61013d6040518060400160405280600381526020017f253233000000000000000000000000000000000000000000000000000000000081525081565b61013d6040518060400160405280600381526020017f253230000000000000000000000000000000000000000000000000000000000081525081565b6040517f9bce4e14000000000000000000000000000000000000000000000000000000008152606090735e69930621ea0B346151Cc56A57977E73E13507390639bce4e14906103ea90859060040161153b565b600060405180830381865af4158015610407573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261042f91908101906116d3565b60405160200161043f9190611730565b6040516020818303038152906040529050919050565b606060006104638484610bd9565b9050600081606001515167ffffffffffffffff81111561048557610485610e73565b6040519080825280602002602001820160405280156104b857816020015b60608152602001906001900390816104a35790505b50905060005b82606001515181101561055f57826060015181815181106104e1576104e1611760565b6020026020010151600001518360600151828151811061050357610503611760565b602002602001015160200151604051602001610520929190611776565b60405160208183030381529060405282828151811061054157610541611760565b602002602001018190525080806105579061181b565b9150506104be565b508151602083015160408085015190517ffca1c0b9000000000000000000000000000000000000000000000000000000008152735e69930621ea0B346151Cc56A57977E73E1350739063fca1c0b9906105bc908790600401611868565b600060405180830381865af41580156105d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261060191908101906116d3565b604051602001610614949392919061188c565b604051602081830303815290604052925050505b92915050565b60608261063c836003611a36565b8151811061064c5761064c611760565b016020015160405163c1338a6960e01b8152738C535FD2f6766869c512DDb996875Cb25c24b1579163c1338a69916106909160f81c90601090600290600401611a71565b600060405180830381865af41580156106ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106d591908101906116d3565b836106e1846003611a36565b6106ec906001611a99565b815181106106fc576106fc611760565b016020015160405163c1338a6960e01b8152738C535FD2f6766869c512DDb996875Cb25c24b1579163c1338a69916107409160f81c90601090600290600401611a71565b600060405180830381865af415801561075d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078591908101906116d3565b84610791856003611a36565b61079c906002611a99565b815181106107ac576107ac611760565b016020015160405163c1338a6960e01b8152738C535FD2f6766869c512DDb996875Cb25c24b1579163c1338a69916107f09160f81c90601090600290600401611a71565b600060405180830381865af415801561080d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261083591908101906116d3565b60405160200161084793929190611ab1565b604051602081830303815290604052905092915050565b606083838360405160200161087593929190611be7565b60405160208183030381529060405290505b9392505050565b6060806060838060200190518101906108a79190611d40565b9250925092509193909250565b606060006108c183610d72565b905061088781610b27565b604051806060016040528060268152602001611e296026913981565b60606000610916846108fb856003611a36565b610906866003611a36565b610911906003611a99565b610d82565b90508060008151811061092b5761092b611760565b016020015160405163c1338a6960e01b8152738C535FD2f6766869c512DDb996875Cb25c24b1579163c1338a699161096f9160f81c90601090600290600401611a71565b600060405180830381865af415801561098c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b491908101906116d3565b816001815181106109c7576109c7611760565b016020015160405163c1338a6960e01b8152738C535FD2f6766869c512DDb996875Cb25c24b1579163c1338a6991610a0b9160f81c90601090600290600401611a71565b600060405180830381865af4158015610a28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5091908101906116d3565b82600281518110610a6357610a63611760565b016020015160405163c1338a6960e01b8152738C535FD2f6766869c512DDb996875Cb25c24b1579163c1338a6991610aa79160f81c90601090600290600401611a71565b600060405180830381865af4158015610ac4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610aec91908101906116d3565b604051602001610afe93929190611ab1565b60405160208183030381529060405291505092915050565b60608060606108a76101d685610d72565b6060600060038351610b399190611dec565b905060008167ffffffffffffffff811115610b5657610b56610e73565b604051908082528060200260200182016040528015610b8957816020015b6060815260200190600190039081610b745790505b50905060005b82811015610bd157610ba1858261062e565b828281518110610bb357610bb3611760565b60200260200101819052508080610bc99061181b565b915050610b8f565b509392505050565b610c046040518060800160405280606081526020016060815260200160608152602001606081525090565b6000806000610c156101d687610d72565b9250925092506000855167ffffffffffffffff811115610c3757610c37610e73565b604051908082528060200260200182016040528015610c7c57816020015b6040805180820190915260608082526020820152815260200190600190039081610c555790505b50905060005b8651811015610d34576040518060400160405280858381518110610ca857610ca8611760565b60200260200101518152602001848381518110610cc757610cc7611760565b6020026020010151898481518110610ce157610ce1611760565b602002602001015181518110610cf957610cf9611760565b6020026020010151815250828281518110610d1657610d16611760565b60200260200101819052508080610d2c9061181b565b915050610c82565b506040805160a08101825260006080820181815282526020808301979097528251968701835286529081019490945260608401525090949350505050565b6060610628826001600019610dab565b6060610da384610d93856001611a99565b610d9e856001611a99565b610dab565b949350505050565b6060833b80610dca575050604080516020810190915260008152610887565b80841115610de8575050604080516020810190915260008152610887565b83831015610e31578084846040517f2c4a89fa000000000000000000000000000000000000000000000000000000008152600401610e2893929190611e00565b60405180910390fd5b8383038482036000828210610e465782610e48565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff82111715610eaf57610eaf610e73565b6040525050565b6000610ec160405190565b9050610ecd8282610e89565b919050565b600067ffffffffffffffff821115610eec57610eec610e73565b5060209081020190565b600067ffffffffffffffff821115610f1057610f10610e73565b601f19601f83011660200192915050565b82818337506000910152565b6000610f40610f3b84610ef6565b610eb6565b905082815260208101848484011115610f5b57610f5b600080fd5b610bd1848285610f21565b600082601f830112610f7a57610f7a600080fd5b8135610da3848260208601610f2d565b6000610f98610f3b84610ed2565b83815290506020808201908402830185811115610fb757610fb7600080fd5b835b81811015610ff657803567ffffffffffffffff811115610fdb57610fdb600080fd5b8501610fe78882610f66565b84525060209283019201610fb9565b5050509392505050565b600082601f83011261101457611014600080fd5b8135610da3848260208601610f8a565b60006020828403121561103957611039600080fd5b813567ffffffffffffffff81111561105357611053600080fd5b610da384828501611000565b60005b8381101561107a578181015183820152602001611062565b83811115611089576000848401525b50505050565b6000611099825190565b8084526020840193506110b081856020860161105f565b601f01601f19169290920192915050565b60208082528101610887818461108f565b600073ffffffffffffffffffffffffffffffffffffffff8216610628565b6110f9816110d2565b811461110457600080fd5b50565b8035610628816110f0565b806110f9565b803561062881611112565b6000611131610f3b84610ed2565b8381529050602080820190840283018581111561115057611150600080fd5b835b81811015610ff6576111648782611118565b835260209283019201611152565b600082601f83011261118657611186600080fd5b8135610da3848260208601611123565b600080604083850312156111ac576111ac600080fd5b60006111b88585611107565b925050602083013567ffffffffffffffff8111156111d8576111d8600080fd5b6111e485828601611172565b9150509250929050565b6000806040838503121561120457611204600080fd5b823567ffffffffffffffff81111561121e5761121e600080fd5b61122a85828601610f66565b92505060206111e485828601611118565b6000611249610f3b84610ed2565b8381529050602080820190840283018581111561126857611268600080fd5b835b81811015610ff657803567ffffffffffffffff81111561128c5761128c600080fd5b85016112988882611000565b8452506020928301920161126a565b600082601f8301126112bb576112bb600080fd5b8135610da384826020860161123b565b6000806000606084860312156112e3576112e3600080fd5b833567ffffffffffffffff8111156112fd576112fd600080fd5b61130986828701610f66565b935050602084013567ffffffffffffffff81111561132957611329600080fd5b61133586828701611000565b925050604084013567ffffffffffffffff81111561135557611355600080fd5b611361868287016112a7565b9150509250925092565b60006020828403121561138057611380600080fd5b813567ffffffffffffffff81111561139a5761139a600080fd5b610da384828501610f66565b6000610887838361108f565b60200190565b60006113c2825190565b808452602084019350836020820285016113dc8560200190565b60005b8481101561141057838303885281516113f884826113a6565b935050602082016020989098019791506001016113df565b50909695505050505050565b6000611426825190565b808452602084019350836020820285016114408560200190565b60005b84811015611410578383038852815161145c84826113a6565b93505060208201602098909801979150600101611443565b6000610887838361141c565b600061148a825190565b808452602084019350836020820285016114a48560200190565b60005b8481101561141057838303885281516114c08482611474565b935050602082016020989098019791506001016114a7565b606080825281016114e9818661108f565b905081810360208301526114fd81856113b8565b905081810360408301526115118184611480565b95945050505050565b60006020828403121561152f5761152f600080fd5b6000610da38484611107565b6020808252810161088781846113b8565b6000806040838503121561156257611562600080fd5b600061122a8585611107565b8051604080845260009190840190611586828261108f565b91505060208301518482036020860152611511828261108f565b6000610887838361156e565b60006115b6825190565b808452602084019350836020820285016115d08560200190565b60005b8481101561141057838303885281516115ec84826115a0565b935050602082016020989098019791506001016115d3565b805160808084526000919084019061161c828261108f565b91505060208301518482036020860152611636828261108f565b91505060408301518482036040860152611650828261108f565b9150506060830151848203606086015261151182826115ac565b602080825281016108878184611604565b6000611689610f3b84610ef6565b9050828152602081018484840111156116a4576116a4600080fd5b610bd184828561105f565b600082601f8301126116c3576116c3600080fd5b8151610da384826020860161167b565b6000602082840312156116e8576116e8600080fd5b815167ffffffffffffffff81111561170257611702600080fd5b610da3848285016116af565b6000611718825190565b61172681856020860161105f565b9290920192915050565b7f30780000000000000000000000000000000000000000000000000000000000008152600201610628818361170e565b634e487b7160e01b600052603260045260246000fd5b7f7b2274726169745f74797065223a20220000000000000000000000000000000081526010016117a6818461170e565b7f222c202276616c7565223a20220000000000000000000000000000000000000081529050600d016117d8818361170e565b7f227d00000000000000000000000000000000000000000000000000000000000081526002019392505050565b634e487b7160e01b600052601160045260246000fd5b600060001982141561182f5761182f611805565b5060010190565b60018152602081017f2c00000000000000000000000000000000000000000000000000000000000000815290506113b2565b6040808252810161187981846113b8565b9050818103602083015261088781611836565b7f646174613a6170706c69636174696f6e2f6a736f6e2c0000000000000000000081526016016118db817f7b22696d616765223a20220000000000000000000000000000000000000000009052565b600b016118e8818661170e565b601160f91b8152905060010161191d817f2c226465736372697074696f6e223a20220000000000000000000000000000009052565b60110161192a818561170e565b601160f91b8152905060010161195f817f2c226e616d65223a2022000000000000000000000000000000000000000000009052565b600a0161196c818461170e565b601160f91b815290506001016119a1817f2c2261747472696275746573223a2000000000000000000000000000000000009052565b600f016119cd817f5b000000000000000000000000000000000000000000000000000000000000009052565b6001016119da818361170e565b7f5d0000000000000000000000000000000000000000000000000000000000000081529050600101611a2b817f7d000000000000000000000000000000000000000000000000000000000000009052565b600101949350505050565b6000816000190483118215151615611a5057611a50611805565b500290565b805b82525050565b600060ff8216610628565b611a5781611a5d565b60608101611a7f8286611a55565b611a8c6020830185611a68565b610da36040830184611a68565b60008219821115611aac57611aac611805565b500190565b611abb818561170e565b9050611ac7818461170e565b9050610da3818361170e565b6000611add825190565b80845260208401935083602082028501611af78560200190565b60005b848110156114105783830388528151611b1384826113a6565b93505060208201602098909801979150600101611afa565b6000611b35825190565b80845260208401935083602082028501611b4f8560200190565b60005b848110156114105783830388528151611b6b84826113a6565b93505060208201602098909801979150600101611b52565b60006108878383611b2b565b6000611b99825190565b80845260208401935083602082028501611bb38560200190565b60005b848110156114105783830388528151611bcf8482611b83565b93505060208201602098909801979150600101611bb6565b60608082528101611bf8818661108f565b90508181036020830152611c0c8185611ad3565b905081810360408301526115118184611b8f565b6000611c2e610f3b84610ed2565b83815290506020808201908402830185811115611c4d57611c4d600080fd5b835b81811015610ff657805167ffffffffffffffff811115611c7157611c71600080fd5b8501611c7d88826116af565b84525060209283019201611c4f565b600082601f830112611ca057611ca0600080fd5b8151610da3848260208601611c20565b6000611cbe610f3b84610ed2565b83815290506020808201908402830185811115611cdd57611cdd600080fd5b835b81811015610ff657805167ffffffffffffffff811115611d0157611d01600080fd5b8501611d0d8882611c8c565b84525060209283019201611cdf565b600082601f830112611d3057611d30600080fd5b8151610da3848260208601611cb0565b600080600060608486031215611d5857611d58600080fd5b835167ffffffffffffffff811115611d7257611d72600080fd5b611d7e868287016116af565b935050602084015167ffffffffffffffff811115611d9e57611d9e600080fd5b611daa86828701611c8c565b925050604084015167ffffffffffffffff811115611dca57611dca600080fd5b61136186828701611d1c565b634e487b7160e01b600052601260045260246000fd5b600082611dfb57611dfb611dd6565b500490565b60608101611e0e8286611a55565b611e1b6020830185611a55565b610da36040830184611a5556fe786d6c6e733d253237687474703a2f2f7777772e77332e6f72672f323030302f737667253237a26469706673582212205725269289d423856d5faaf525d39a7efad3704bf6c42caab423a848d0991e5c64736f6c634300080c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106101255760003560e01c80637df16521116100bc578063b3e74d801161008b578063d1741f6811610070578063d1741f68146102ff578063df5f0e0e1461031f578063e0c9ae691461035b57600080fd5b8063b3e74d80146102d9578063c030f08d146102ec57600080fd5b80637df1652114610212578063890a161a1461024e5780639ad21855146102615780639c5798391461029d57600080fd5b8063519513ba116100f8578063519513ba146101b55780636102cd04146101c8578063657fb2e1146101ea5780637be266cc1461020a57600080fd5b8063067b7f9e1461012a57806315cb3a0514610153578063310880911461018f5780633774c798146101a2575b600080fd5b61013d610138366004611024565b610397565b60405161014a91906110c1565b60405180910390f35b61013d6040518060400160405280600481526020017f2f2533650000000000000000000000000000000000000000000000000000000081525081565b61013d61019d366004611196565b610455565b61013d6101b03660046111ee565b61062e565b61013d6101c33660046112cb565b61085e565b6101db6101d636600461136b565b61088e565b60405161014a939291906114d8565b6101fd6101f836600461151a565b6108b4565b60405161014a919061153b565b61013d6108cc565b61013d6040518060400160405280600381526020017f253363000000000000000000000000000000000000000000000000000000000081525081565b61013d61025c36600461154c565b6108e8565b61013d6040518060400160405280601381526020017f646174613a696d6167652f7376672b786d6c2c0000000000000000000000000081525081565b61013d6040518060400160405280600381526020017f253237000000000000000000000000000000000000000000000000000000000081525081565b6101db6102e736600461151a565b610b16565b6101fd6102fa36600461136b565b610b27565b61031261030d366004611196565b610bd9565b60405161014a919061166a565b61013d6040518060400160405280600381526020017f253233000000000000000000000000000000000000000000000000000000000081525081565b61013d6040518060400160405280600381526020017f253230000000000000000000000000000000000000000000000000000000000081525081565b6040517f9bce4e1400000000000000000000000000000000000000000000000000000000815260609073__$3d939fd680257e7df63fc3436eced304ff$__90639bce4e14906103ea90859060040161153b565b600060405180830381865af4158015610407573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261042f91908101906116d3565b60405160200161043f9190611730565b6040516020818303038152906040529050919050565b606060006104638484610bd9565b9050600081606001515167ffffffffffffffff81111561048557610485610e73565b6040519080825280602002602001820160405280156104b857816020015b60608152602001906001900390816104a35790505b50905060005b82606001515181101561055f57826060015181815181106104e1576104e1611760565b6020026020010151600001518360600151828151811061050357610503611760565b602002602001015160200151604051602001610520929190611776565b60405160208183030381529060405282828151811061054157610541611760565b602002602001018190525080806105579061181b565b9150506104be565b508151602083015160408085015190517ffca1c0b900000000000000000000000000000000000000000000000000000000815273__$3d939fd680257e7df63fc3436eced304ff$__9063fca1c0b9906105bc908790600401611868565b600060405180830381865af41580156105d9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261060191908101906116d3565b604051602001610614949392919061188c565b604051602081830303815290604052925050505b92915050565b60608261063c836003611a36565b8151811061064c5761064c611760565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a69916106909160f81c90601090600290600401611a71565b600060405180830381865af41580156106ad573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106d591908101906116d3565b836106e1846003611a36565b6106ec906001611a99565b815181106106fc576106fc611760565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a69916107409160f81c90601090600290600401611a71565b600060405180830381865af415801561075d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261078591908101906116d3565b84610791856003611a36565b61079c906002611a99565b815181106107ac576107ac611760565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a69916107f09160f81c90601090600290600401611a71565b600060405180830381865af415801561080d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261083591908101906116d3565b60405160200161084793929190611ab1565b604051602081830303815290604052905092915050565b606083838360405160200161087593929190611be7565b60405160208183030381529060405290505b9392505050565b6060806060838060200190518101906108a79190611d40565b9250925092509193909250565b606060006108c183610d72565b905061088781610b27565b604051806060016040528060268152602001611e296026913981565b60606000610916846108fb856003611a36565b610906866003611a36565b610911906003611a99565b610d82565b90508060008151811061092b5761092b611760565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a699161096f9160f81c90601090600290600401611a71565b600060405180830381865af415801561098c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109b491908101906116d3565b816001815181106109c7576109c7611760565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__9163c1338a6991610a0b9160f81c90601090600290600401611a71565b600060405180830381865af4158015610a28573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a5091908101906116d3565b82600281518110610a6357610a63611760565b016020015160405163c1338a6960e01b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$",
  "libraries": {
    "Integers": "0x8C535FD2f6766869c512DDb996875Cb25c24b157",
    "Array": "0x5e69930621ea0B346151Cc56A57977E73E135073"
  },
  "devdoc": {
    "author": "Clement Walter <clement0walter@gmail.com>",
    "kind": "dev",
    "methods": {
      "decodeNames(address)": {
        "details": "Retrieve the names encoded with the collection: description, characteristics and traits names array.",
        "params": {
          "pointer": "The address of the SSTORE2 contract for the names."
        }
      },
      "decodeNames(bytes)": {
        "details": "Retrieve the names encoded with the collection: description, characteristics and traits names array.",
        "params": {
          "names": "The bytes the names encoded by the RectEncoder."
        }
      },
      "encodeNames(string,string[],string[][])": {
        "details": "This is just a direct call to abi.encode to insure standard encoding scheme for the names across renders.",
        "params": {
          "characteristicNames": "The names of the characteristics.",
          "description": "The description of the collection.",
          "traitNames": "The names of the traits."
        },
        "returns": {
          "_0": "The encoded bytes."
        }
      },
      "encodePalette(string[])": {
        "details": "Usually colors are already defined in hex color space so we just concat all the colors. No check is made      and this function only concatenates the input colors.",
        "params": {
          "palette": "The list of colors as hex strings, without the leading #."
        },
        "returns": {
          "_0": "The concatenated colors as string. To be used as bytes afterwards."
        }
      },
      "getFill(address,uint256)": {
        "details": "Returns one single color reading directly from the storage.",
        "params": {
          "index": "The index of the color to retrieve",
          "pointer": "The pointer to the palette bytes array where each color is R, G, B at storage i, i+1, i+2."
        },
        "returns": {
          "_0": "The hexstring representation of the color, e.g. \"a3120f\"."
        }
      },
      "getFill(bytes,uint256)": {
        "details": "Returns one single color from a pre-loaded whole palette as a bytes array.",
        "params": {
          "index": "The index of the color to retrieve",
          "palette": "A bytes array encoding several RGB colors. Length should be a multiple of 3."
        },
        "returns": {
          "_0": "The hexstring representation of the color, e.g. \"a3120f\"."
        }
      },
      "getPalette(address)": {
        "details": "Decode the whole palette once for all and returns an array of hexstrings.",
        "params": {
          "pointer": "The pointer to the palette bytes array where each color is at storage at i, i+1, i+2."
        },
        "returns": {
          "_0": "An array of hexstring representation of the color, e.g. \"a3120f\"."
        }
      }
    },
    "title": "BaseRenderer   This library contains shared functionality and constants for the renderers.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}