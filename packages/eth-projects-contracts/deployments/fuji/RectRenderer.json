{
  "address": "0x5f97B42D6dd85a32AD84406154cCDbCFd1701E26",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "characteristic",
          "type": "uint256"
        }
      ],
      "name": "CharacteristicOutOfRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_start",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_end",
          "type": "uint256"
        }
      ],
      "name": "InvalidCodeAtRange",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "InvalidLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "trait",
          "type": "uint256"
        }
      ],
      "name": "TraitOutOfRange",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FILL_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HEIGHT_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_END",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RECT_TAG_START",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WIDTH_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Y_TAG",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "rectBytes",
          "type": "bytes4"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "offsetX",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "offsetY",
          "type": "uint256"
        }
      ],
      "name": "decodeBytes4ToRect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "rectBytes",
          "type": "bytes4"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        }
      ],
      "name": "decodeBytes4ToRect",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "rectsBytes",
          "type": "bytes"
        },
        {
          "internalType": "string[]",
          "name": "palette",
          "type": "string[]"
        }
      ],
      "name": "decodeBytesMemoryToRects",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collectionPointer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "palettePointer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "items",
          "type": "uint256[]"
        }
      ],
      "name": "decodeImage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "characteristicIndex",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "traitIndex",
          "type": "uint256"
        }
      ],
      "name": "getTraitBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pointer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "items",
          "type": "uint256[]"
        }
      ],
      "name": "imageBytes",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4d795706d5a4b7c01ff01d8320625c0049d2b29382d2ea88a0a9d40c399ed86",
  "receipt": {
    "to": null,
    "from": "0x6966Bdb480e7f7A48A7f6B198eE8b9462A265401",
    "contractAddress": "0x5f97B42D6dd85a32AD84406154cCDbCFd1701E26",
    "transactionIndex": 1,
    "gasUsed": "1499760",
    "logsBloom": "0x
    "blockHash": "0xc2d889a91e9e5482074cd4c5581893415d11b45481ec02b2ccaa21385942cc0c",
    "transactionHash": "0xf4d795706d5a4b7c01ff01d8320625c0049d2b29382d2ea88a0a9d40c399ed86",
    "logs": [],
    "blockNumber": 9483105,
    "cumulativeGasUsed": "1642783",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cf4062d6e14cbd44f5db31ab6a3c9f76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"characteristic\",\"type\":\"uint256\"}],\"name\":\"CharacteristicOutOfRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_end\",\"type\":\"uint256\"}],\"name\":\"InvalidCodeAtRange\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"InvalidLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"trait\",\"type\":\"uint256\"}],\"name\":\"TraitOutOfRange\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FILL_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HEIGHT_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_END\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RECT_TAG_START\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WIDTH_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Y_TAG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"rectBytes\",\"type\":\"bytes4\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"offsetX\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"offsetY\",\"type\":\"uint256\"}],\"name\":\"decodeBytes4ToRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"rectBytes\",\"type\":\"bytes4\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"}],\"name\":\"decodeBytes4ToRect\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"rectsBytes\",\"type\":\"bytes\"},{\"internalType\":\"string[]\",\"name\":\"palette\",\"type\":\"string[]\"}],\"name\":\"decodeBytesMemoryToRects\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionPointer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"palettePointer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"name\":\"decodeImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"characteristicIndex\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"traitIndex\",\"type\":\"uint256\"}],\"name\":\"getTraitBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pointer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"items\",\"type\":\"uint256[]\"}],\"name\":\"imageBytes\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Clement Walter <clement0walter@gmail.com>\",\"kind\":\"dev\",\"methods\":{\"decodeBytesMemoryToRects(bytes,string[])\":{\"details\":\"Decode a bytes array.\",\"params\":{\"palette\":\"The image palette.\",\"rectsBytes\":\"The bytes concatenating several rects, typically from getTraitsBytes\"},\"returns\":{\"_0\":\"A string of all the decoded rects.\"}},\"decodeImage(address,address,uint256[])\":{\"details\":\"Get the inner part (without the header) of an image, ie the concatenated list of <rect>s.\",\"params\":{\"collectionPointer\":\"The address of the SSTORE2 contract for the traits.\",\"items\":\"A list of trait indexes, should be of the same length as the number of characteristics.\",\"palettePointer\":\"The address of the SSTORE2 contract for the palette.\"},\"returns\":{\"_0\":\"The inner part of the svg as a string.\"}},\"getTraitBytes(address,uint256,uint256)\":{\"details\":\"Retrieve the bytes for the given trait from the traits storage.\",\"params\":{\"characteristicIndex\":\"The index of the characteristic in the collection.\",\"pointer\":\"The pointer to the traits stored with SSTORE2.\",\"traitIndex\":\"The index of the trait in the characteristic.\"},\"returns\":{\"_0\":\"The bytes of the trait.\"}},\"imageBytes(address,uint256[])\":{\"details\":\"Usually, an image is made of a selection of one trait in each characteristic. This function can then be  used to get the single bytes array containing all the data for a given token (set of traits).\",\"params\":{\"items\":\"A list of trait indexes, should be of the same length as the number of characteristics.\",\"pointer\":\"The address of the SSTORE2 contract.\"},\"returns\":{\"_0\":\"The bytes array for the whole image.\"}}},\"title\":\"RectRenderer   This library can be used to render on-chain images stored as a layering of rectangles.   The returned images is an url safe encoded image uri.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/lib/renderers/RectRenderer.sol\":\"RectRenderer\"},\"evmVersion\":\"london\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":true,\"yulDetails\":{\"optimizerSteps\":\"dhfoDgvulfnTUtnIf\",\"stackAllocation\":true}},\"runs\":2000},\"remappings\":[]},\"sources\":{\"@0xsequence/sstore2/contracts/SSTORE2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./utils/Bytecode.sol\\\";\\n\\n/**\\n  @title A key-value storage with auto-generated keys for storing chunks of data with a lower write & read cost.\\n  @author Agustin Aguilar <aa@horizon.io>\\n\\n  Readme: https://github.com/0xsequence/sstore2#readme\\n*/\\nlibrary SSTORE2 {\\n  error WriteError();\\n\\n  /**\\n    @notice Stores `_data` and returns `pointer` as key for later retrieval\\n    @dev The pointer is a contract address with `_data` as code\\n    @param _data to be written\\n    @return pointer Pointer to the written `_data`\\n  */\\n  function write(bytes memory _data) internal returns (address pointer) {\\n    // Append 00 to _data so contract can't be called\\n    // Build init code\\n    bytes memory code = Bytecode.creationCodeFor(\\n      abi.encodePacked(\\n        hex'00',\\n        _data\\n      )\\n    );\\n\\n    // Deploy contract using create\\n    assembly { pointer := create(0, add(code, 32), mload(code)) }\\n\\n    // Address MUST be non-zero\\n    if (pointer == address(0)) revert WriteError();\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, type(uint256).max);\\n  }\\n\\n  /**\\n    @notice Reads the contents of the `_pointer` code as data, skips the first byte \\n    @dev The function is intended for reading pointers generated by `write`\\n    @param _pointer to be read\\n    @param _start number of bytes to skip\\n    @param _end index before which to end extraction\\n    @return data read from `_pointer` contract\\n  */\\n  function read(address _pointer, uint256 _start, uint256 _end) internal view returns (bytes memory) {\\n    return Bytecode.codeAt(_pointer, _start + 1, _end + 1);\\n  }\\n}\\n\",\"keccak256\":\"0x79e6f5c7bb6b22d142ad0ec37e00930cdbef28ab405214f7c0f94cbd58255383\",\"license\":\"MIT\"},\"@0xsequence/sstore2/contracts/utils/Bytecode.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n\\nlibrary Bytecode {\\n  error InvalidCodeAtRange(uint256 _size, uint256 _start, uint256 _end);\\n\\n  /**\\n    @notice Generate a creation code that results on a contract with `_code` as bytecode\\n    @param _code The returning value of the resulting `creationCode`\\n    @return creationCode (constructor) for new contract\\n  */\\n  function creationCodeFor(bytes memory _code) internal pure returns (bytes memory) {\\n    /*\\n      0x00    0x63         0x63XXXXXX  PUSH4 _code.length  size\\n      0x01    0x80         0x80        DUP1                size size\\n      0x02    0x60         0x600e      PUSH1 14            14 size size\\n      0x03    0x60         0x6000      PUSH1 00            0 14 size size\\n      0x04    0x39         0x39        CODECOPY            size\\n      0x05    0x60         0x6000      PUSH1 00            0 size\\n      0x06    0xf3         0xf3        RETURN\\n      <CODE>\\n    */\\n\\n    return abi.encodePacked(\\n      hex\\\"63\\\",\\n      uint32(_code.length),\\n      hex\\\"80_60_0E_60_00_39_60_00_F3\\\",\\n      _code\\n    );\\n  }\\n\\n  /**\\n    @notice Returns the size of the code on a given address\\n    @param _addr Address that may or may not contain code\\n    @return size of the code on the given `_addr`\\n  */\\n  function codeSize(address _addr) internal view returns (uint256 size) {\\n    assembly { size := extcodesize(_addr) }\\n  }\\n\\n  /**\\n    @notice Returns the code of a given address\\n    @dev It will fail if `_end < _start`\\n    @param _addr Address that may or may not contain code\\n    @param _start number of bytes of code to skip on read\\n    @param _end index before which to end extraction\\n    @return oCode read from `_addr` deployed bytecode\\n\\n    Forked from: https://gist.github.com/KardanovIR/fe98661df9338c842b4a30306d507fbd\\n  */\\n  function codeAt(address _addr, uint256 _start, uint256 _end) internal view returns (bytes memory oCode) {\\n    uint256 csize = codeSize(_addr);\\n    if (csize == 0) return bytes(\\\"\\\");\\n\\n    if (_start > csize) return bytes(\\\"\\\");\\n    if (_end < _start) revert InvalidCodeAtRange(csize, _start, _end); \\n\\n    unchecked {\\n      uint256 reqSize = _end - _start;\\n      uint256 maxSize = csize - _start;\\n\\n      uint256 size = maxSize < reqSize ? maxSize : reqSize;\\n\\n      assembly {\\n        // allocate output byte array - this could also be done without assembly\\n        // by using o_code = new bytes(size)\\n        oCode := mload(0x40)\\n        // new \\\"memory end\\\" including padding\\n        mstore(0x40, add(oCode, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n        // store length in memory\\n        mstore(oCode, size)\\n        // actually retrieve the code, this needs assembly\\n        extcodecopy(_addr, add(oCode, 0x20), _start, size)\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x40ef4ee5697507566574eda36358a76b523b3dfe7cb65da1630004fe6c5a7a45\",\"license\":\"MIT\"},\"contracts/lib/renderers/RectRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Bytes} from \\\"../utils/Bytes.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\nimport {RendererCommons} from \\\"./RendererCommons.sol\\\";\\n\\nerror InvalidLength(uint256 length);\\nerror CharacteristicOutOfRange(uint256 characteristic);\\nerror TraitOutOfRange(uint256 trait);\\n\\n/**  @title RectRenderer\\n *\\n *   This library can be used to render on-chain images stored as a layering of rectangles.\\n *   The returned images is an url safe encoded image uri.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RectRenderer {\\n    using Integers for uint8;\\n    using Integers for uint256;\\n    using Bytes for bytes;\\n    using Array for bytes[];\\n    using Array for string[];\\n\\n    string public constant RECT_TAG_START = \\\"%3crect%20x=%27\\\";\\n    string public constant Y_TAG = \\\"%27%20y=%27\\\";\\n    string public constant WIDTH_TAG = \\\"%27%20width=%27\\\";\\n    string public constant HEIGHT_TAG = \\\"%27%20height=%27\\\";\\n    string public constant FILL_TAG = \\\"%27%20fill=%27%23\\\";\\n    string public constant RECT_TAG_END = \\\"%27/%3e\\\";\\n\\n    /** @dev Retrieve the bytes for the given trait from the traits storage.\\n     *  @param pointer The pointer to the traits stored with SSTORE2.\\n     *  @param characteristicIndex The index of the characteristic in the collection.\\n     *  @param traitIndex The index of the trait in the characteristic.\\n     *  @return The bytes of the trait.\\n     */\\n    function getTraitBytes(\\n        address pointer,\\n        uint256 characteristicIndex,\\n        uint256 traitIndex\\n    ) public view returns (bytes memory) {\\n        uint16 characteristicsLength = SSTORE2.read(pointer, 0, 2).toUint16();\\n\\n        if (characteristicsLength - 1 < characteristicIndex)\\n            revert CharacteristicOutOfRange(characteristicIndex);\\n        uint16 characteristicStart = SSTORE2\\n            .read(\\n                pointer,\\n                2 + 2 * characteristicIndex,\\n                2 + 2 * characteristicIndex + 2\\n            )\\n            .toUint16();\\n        uint16 traitsLength = SSTORE2\\n            .read(pointer, characteristicStart, characteristicStart + 2)\\n            .toUint16() - 1;\\n        if (traitsLength - 1 < traitIndex) revert TraitOutOfRange(traitIndex);\\n        bytes memory _indexes = SSTORE2.read(\\n            pointer,\\n            characteristicStart + 2 + 2 * traitIndex,\\n            characteristicStart + 2 + 2 * traitIndex + 4\\n        );\\n        return\\n            SSTORE2.read(\\n                pointer,\\n                characteristicStart + _indexes.toUint16(0),\\n                characteristicStart + _indexes.toUint16(2)\\n            );\\n    }\\n\\n    function decodeBytes4ToRect(bytes4 rectBytes, string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return decodeBytes4ToRect(rectBytes, palette, 0, 0);\\n    }\\n\\n    function decodeBytes4ToRect(\\n        bytes4 rectBytes,\\n        string[] memory palette,\\n        uint256 offsetX,\\n        uint256 offsetY\\n    ) public pure returns (string memory) {\\n        return\\n            string.concat(\\n                RECT_TAG_START,\\n                (uint8(uint32(rectBytes >> 26)) + offsetX).toString(),\\n                Y_TAG,\\n                ((uint8(uint32(rectBytes >> 20)) & 0x3f) + offsetY).toString(),\\n                WIDTH_TAG,\\n                (uint8(uint32(rectBytes >> 14)) & 0x3f).toString(),\\n                HEIGHT_TAG,\\n                (uint8(uint32(rectBytes >> 8)) & 0x3f).toString(),\\n                FILL_TAG,\\n                palette[uint8(rectBytes[3])],\\n                RECT_TAG_END\\n            );\\n    }\\n\\n    /** @dev Decode a bytes array.\\n     *  @param rectsBytes The bytes concatenating several rects, typically from getTraitsBytes\\n     *  @param palette The image palette.\\n     *  @return A string of all the decoded rects.\\n     */\\n    function decodeBytesMemoryToRects(\\n        bytes memory rectsBytes,\\n        string[] memory palette\\n    ) public pure returns (string memory) {\\n        if (rectsBytes.length % 4 != 0) {\\n            revert InvalidLength(rectsBytes.length);\\n        }\\n        uint256 nbRects = rectsBytes.length / 4;\\n        string[] memory rects = new string[](nbRects);\\n        for (uint256 i = 0; i < rects.length; i++) {\\n            rects[i] = decodeBytes4ToRect(\\n                bytes4(rectsBytes.toUint32(i * 4)),\\n                palette\\n            );\\n        }\\n        return rects.join();\\n    }\\n\\n    /** @dev Usually, an image is made of a selection of one trait in each characteristic. This function can then be\\n     *  used to get the single bytes array containing all the data for a given token (set of traits).\\n     *  @param pointer The address of the SSTORE2 contract.\\n     *  @param items A list of trait indexes, should be of the same length as the number of characteristics.\\n     *  @return The bytes array for the whole image.\\n     */\\n    function imageBytes(address pointer, uint256[] memory items)\\n        public\\n        view\\n        returns (bytes memory)\\n    {\\n        bytes[] memory traits = new bytes[](items.length);\\n        for (uint256 i = 0; i < items.length; i++) {\\n            traits[i] = getTraitBytes(pointer, i, items[i]);\\n        }\\n        return traits.join();\\n    }\\n\\n    /** @dev Get the inner part (without the header) of an image, ie the concatenated list of <rect>s.\\n     * @param collectionPointer The address of the SSTORE2 contract for the traits.\\n     * @param palettePointer The address of the SSTORE2 contract for the palette.\\n     * @param items A list of trait indexes, should be of the same length as the number of characteristics.\\n     * @return The inner part of the svg as a string.\\n     */\\n    function decodeImage(\\n        address collectionPointer,\\n        address palettePointer,\\n        uint256[] memory items\\n    ) public view returns (string memory) {\\n        return\\n            decodeBytesMemoryToRects(\\n                imageBytes(collectionPointer, items),\\n                RendererCommons.getPalette(palettePointer)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7210670999682fc432dc2c92b6eaf6231d17ee699e21b91bef875e594253745c\",\"license\":\"MIT\"},\"contracts/lib/renderers/RendererCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"@0xsequence/sstore2/contracts/SSTORE2.sol\\\";\\n\\nimport {Integers} from \\\"../utils/Integers.sol\\\";\\nimport {Array} from \\\"../utils/Array.sol\\\";\\n\\nstruct Attribute {\\n    string trait_type;\\n    string value;\\n}\\n\\nstruct TokenData {\\n    string image;\\n    string description;\\n    string name;\\n    Attribute[] attributes;\\n}\\n\\n/**  @title BaseRenderer\\n *\\n *   This library contains shared functionality and constants for the renderers.\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary RendererCommons {\\n    using Integers for uint256;\\n    using Integers for uint8;\\n    using Array for string[];\\n\\n    string public constant DATA_URI = \\\"data:image/svg+xml,\\\";\\n    string public constant XMLNS_HEADER =\\n        \\\"xmlns=%27http://www.w3.org/2000/svg%27\\\";\\n    string public constant SPACE = \\\"%20\\\";\\n    string public constant QUOTE = \\\"%27\\\";\\n    string public constant NUMBER_SIGN = \\\"%23\\\";\\n    string public constant TAG_START = \\\"%3c\\\";\\n    string public constant TAG_END = \\\"/%3e\\\";\\n\\n    event BytesStored(address pointer);\\n\\n    /**\\n     * @dev Usually colors are already defined in hex color space so we just concat all the colors. No check is made\\n     *      and this function only concatenates the input colors.\\n     * @param palette The list of colors as hex strings, without the leading #.\\n     * @return The concatenated colors as string. To be used as bytes afterwards.\\n     */\\n    function encodePalette(string[] memory palette)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return string.concat(\\\"0x\\\", palette.join());\\n    }\\n\\n    /** @dev Returns one single color reading directly from the storage.\\n     * @param pointer The pointer to the palette bytes array where each color is R, G, B at storage i, i+1, i+2.\\n     * @param index The index of the color to retrieve\\n     * @return The hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getFill(address pointer, uint256 index)\\n        public\\n        view\\n        returns (string memory)\\n    {\\n        bytes memory palette = SSTORE2.read(pointer, 3 * index, 3 * index + 3);\\n\\n        return\\n            string.concat(\\n                uint8(palette[0]).toString(16, 2),\\n                uint8(palette[1]).toString(16, 2),\\n                uint8(palette[2]).toString(16, 2)\\n            );\\n    }\\n\\n    /** @dev Returns one single color from a pre-loaded whole palette as a bytes array.\\n     * @param palette A bytes array encoding several RGB colors. Length should be a multiple of 3.\\n     * @param index The index of the color to retrieve\\n     * @return The hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getFill(bytes memory palette, uint256 index)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return\\n            string.concat(\\n                uint8(palette[3 * index]).toString(16, 2),\\n                uint8(palette[3 * index + 1]).toString(16, 2),\\n                uint8(palette[3 * index + 2]).toString(16, 2)\\n            );\\n    }\\n\\n    /** @dev Decode the whole palette once for all and returns an array of hexstrings.\\n     * @param pointer The pointer to the palette bytes array where each color is at storage at i, i+1, i+2.\\n     * @return An array of hexstring representation of the color, e.g. \\\"a3120f\\\".\\n     */\\n    function getPalette(address pointer) public view returns (string[] memory) {\\n        bytes memory palette = SSTORE2.read(pointer);\\n        return getPalette(palette);\\n    }\\n\\n    function getPalette(bytes memory palette)\\n        public\\n        pure\\n        returns (string[] memory)\\n    {\\n        uint256 paletteSize = palette.length / 3;\\n        string[] memory paletteHex = new string[](paletteSize);\\n        for (uint256 i = 0; i < paletteSize; i++) {\\n            paletteHex[i] = getFill(palette, i);\\n        }\\n        return paletteHex;\\n    }\\n\\n    /** @dev Retrieve the names encoded with the collection: description, characteristics and traits names array.\\n     * @param names The bytes the names encoded by the RectEncoder.\\n     */\\n    function decodeNames(bytes memory names)\\n        public\\n        pure\\n        returns (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        )\\n    {\\n        return abi.decode(names, (string, string[], string[][]));\\n    }\\n\\n    /** @dev Retrieve the names encoded with the collection: description, characteristics and traits names array.\\n     * @param pointer The address of the SSTORE2 contract for the names.\\n     */\\n    function decodeNames(address pointer)\\n        public\\n        view\\n        returns (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        )\\n    {\\n        return decodeNames(SSTORE2.read(pointer));\\n    }\\n\\n\\n    /** @dev This is just a direct call to abi.encode to insure standard encoding scheme for the names across renders.\\n     * @param description The description of the collection.\\n     * @param characteristicNames The names of the characteristics.\\n     * @param traitNames The names of the traits.\\n     * @return The encoded bytes.\\n     */\\n    function encodeNames(string memory description, string[] memory characteristicNames, string[][] memory traitNames)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        return abi.encode(\\n            description, characteristicNames, traitNames\\n        );\\n    }\\n\\n    function tokenData(address pointer, uint256[] memory items)\\n        public\\n        view\\n        returns (TokenData memory)\\n    {\\n        (\\n            string memory description,\\n            string[] memory characteristicNames,\\n            string[][] memory traitNames\\n        ) = decodeNames(SSTORE2.read(pointer));\\n        Attribute[] memory attributes = new Attribute[](items.length);\\n        for (uint256 i = 0; i < items.length; i++) {\\n            attributes[i] = Attribute(\\n                characteristicNames[i],\\n                traitNames[i][items[i]]\\n            );\\n        }\\n        return TokenData(\\\"\\\", description, \\\"\\\", attributes);\\n    }\\n\\n    function tokenURI(address pointer, uint256[] memory items) public view returns (string memory) {\\n        TokenData memory _tokenData = tokenData(pointer, items);\\n        string[] memory attributes = new string[](_tokenData.attributes.length);\\n        for (uint256 i = 0; i < _tokenData.attributes.length; i++) {\\n            attributes[i] = string.concat(\\n                '{\\\"trait_type\\\": \\\"',\\n                _tokenData.attributes[i].trait_type,\\n                '\\\", \\\"value\\\": \\\"',\\n                _tokenData.attributes[i].value,\\n                '\\\"}'\\n            );\\n        }\\n        return\\n            string.concat(\\n                \\\"data:application/json,\\\",\\n                '{\\\"image\\\": \\\"',\\n                _tokenData.image,\\n                '\\\"',\\n                ',\\\"description\\\": \\\"',\\n                _tokenData.description,\\n                '\\\"',\\n                ',\\\"name\\\": \\\"',\\n                _tokenData.name,\\n                '\\\"',\\n                ',\\\"attributes\\\": ',\\n                \\\"[\\\",\\n                attributes.join(\\\",\\\"),\\n                \\\"]\\\",\\n                \\\"}\\\"\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x820304854dc8a3a83f61a2606ecba1ea7c363258dd4bfa047edcafff8e006831\",\"license\":\"MIT\"},\"contracts/lib/utils/Array.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com>\\n *\\n * @notice An attempt at implementing some of the widely used javascript's Array functions in solidity.\\n */\\npragma solidity ^0.8.12;\\n\\nerror EmptyArray();\\nerror GlueOutOfBounds(uint256 length);\\n\\nlibrary Array {\\n    function join(string[] memory a, string memory glue)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return string(_joinReferenceType(inputPointer, gluePointer));\\n    }\\n\\n    function join(string[] memory a) public pure returns (string memory) {\\n        return join(a, \\\"\\\");\\n    }\\n\\n    function join(bytes[] memory a, bytes memory glue)\\n        public\\n        pure\\n        returns (bytes memory)\\n    {\\n        uint256 inputPointer;\\n        uint256 gluePointer;\\n\\n        assembly {\\n            inputPointer := a\\n            gluePointer := glue\\n        }\\n        return _joinReferenceType(inputPointer, gluePointer);\\n    }\\n\\n    function join(bytes[] memory a) public pure returns (bytes memory) {\\n        return join(a, bytes(\\\"\\\"));\\n    }\\n\\n    function join(bytes2[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 0);\\n    }\\n\\n    /// @dev Join the underlying array of bytes2 to a string.\\n    function join(uint16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 2, 256 - 16);\\n    }\\n\\n    function join(bytes3[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 3, 0);\\n    }\\n\\n    function join(bytes4[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 4, 0);\\n    }\\n\\n    function join(bytes8[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 8, 0);\\n    }\\n\\n    function join(bytes16[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 16, 0);\\n    }\\n\\n    function join(bytes32[] memory a) public pure returns (bytes memory) {\\n        uint256 pointer;\\n\\n        assembly {\\n            pointer := a\\n        }\\n        return _joinValueType(pointer, 32, 0);\\n    }\\n\\n    function _joinValueType(\\n        uint256 a,\\n        uint256 typeLength,\\n        uint256 shiftLeft\\n    ) private pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            let inputLength := mload(a)\\n            let inputData := add(a, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Initialize the length of the final bytes: length is typeLength x inputLength (array of bytes4)\\n            mstore(tempBytes, mul(inputLength, typeLength))\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Iterate over all bytes4\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentSlot := shl(shiftLeft, mload(pointer))\\n                mstore(memoryPointer, currentSlot)\\n                memoryPointer := add(memoryPointer, typeLength)\\n            }\\n\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n\\n    function _joinReferenceType(uint256 inputPointer, uint256 gluePointer)\\n        public\\n        pure\\n        returns (bytes memory tempBytes)\\n    {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Skip the first 32 bytes where we will store the length of the result\\n            let memoryPointer := add(tempBytes, 0x20)\\n\\n            // Load glue\\n            let glueLength := mload(gluePointer)\\n            if gt(glueLength, 0x20) {\\n                revert(gluePointer, 0x20)\\n            }\\n            let glue := mload(add(gluePointer, 0x20))\\n\\n            // Load the length (first 32 bytes)\\n            let inputLength := mload(inputPointer)\\n            let inputData := add(inputPointer, 0x20)\\n            let end := add(inputData, mul(inputLength, 0x20))\\n\\n            // Initialize the length of the final string\\n            let stringLength := 0\\n\\n            // Iterate over all strings (a string is itself an array).\\n            for {\\n                let pointer := inputData\\n            } lt(pointer, end) {\\n                pointer := add(pointer, 0x20)\\n            } {\\n                let currentStringArray := mload(pointer)\\n                let currentStringLength := mload(currentStringArray)\\n                stringLength := add(stringLength, currentStringLength)\\n                let currentStringBytesCount := add(\\n                    div(currentStringLength, 0x20),\\n                    gt(mod(currentStringLength, 0x20), 0)\\n                )\\n\\n                let currentPointer := add(currentStringArray, 0x20)\\n\\n                for {\\n                    let copiedBytesCount := 0\\n                } lt(copiedBytesCount, currentStringBytesCount) {\\n                    copiedBytesCount := add(copiedBytesCount, 1)\\n                } {\\n                    mstore(\\n                        add(memoryPointer, mul(copiedBytesCount, 0x20)),\\n                        mload(currentPointer)\\n                    )\\n                    currentPointer := add(currentPointer, 0x20)\\n                }\\n                memoryPointer := add(memoryPointer, currentStringLength)\\n                mstore(memoryPointer, glue)\\n                memoryPointer := add(memoryPointer, glueLength)\\n            }\\n\\n            mstore(\\n                tempBytes,\\n                add(stringLength, mul(sub(inputLength, 1), glueLength))\\n            )\\n            mstore(0x40, and(add(memoryPointer, 31), not(31)))\\n        }\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xb288e323d09e12efda2e53871a119c33ef9f5eb9b7a16f7f2f3a01fa61cb3ca8\",\"license\":\"MIT\"},\"contracts/lib/utils/Bytes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Clement Walter <clement0walter@gmail.com> from Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\nlibrary Bytes {\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) public pure returns (bytes memory) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(\\n                    add(tempBytes, lengthmod),\\n                    mul(0x20, iszero(lengthmod))\\n                )\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(\\n                        add(\\n                            add(_bytes, lengthmod),\\n                            mul(0x20, iszero(lengthmod))\\n                        ),\\n                        _start\\n                    )\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (address tmp)\\n    {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := div(\\n                mload(add(add(_bytes, 0x20), _start)),\\n                0x1000000000000000000000000\\n            )\\n        }\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint8 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toUint8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toBytes1(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes1 tmp)\\n    {\\n        require(_bytes.length >= _start + 1, \\\"toBytes1_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x1), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint16 tmp)\\n    {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x2), _start))\\n        }\\n    }\\n\\n    function toUint16(bytes memory _bytes) public pure returns (uint16 tmp) {\\n        return toUint16(_bytes, 0);\\n    }\\n\\n    function toUint24(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint24 tmp)\\n    {\\n        require(_bytes.length >= _start + 3, \\\"toUint24_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x3), _start))\\n        }\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint32 tmp)\\n    {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x4), _start))\\n        }\\n    }\\n\\n    function toUint40(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint40 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toUint40_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toBytes5(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes5 tmp)\\n    {\\n        require(_bytes.length >= _start + 5, \\\"toBytes5_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x5), _start))\\n        }\\n    }\\n\\n    function toUint48(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint48 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toUint48_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toBytes6(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes6 tmp)\\n    {\\n        require(_bytes.length >= _start + 6, \\\"toBytes6_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x6), _start))\\n        }\\n    }\\n\\n    function toUint56(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint56 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toUint56_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toByes7(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes7 tmp)\\n    {\\n        require(_bytes.length >= _start + 7, \\\"toBytes7_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x7), _start))\\n        }\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toBytes8(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint64 tmp)\\n    {\\n        require(_bytes.length >= _start + 8, \\\"toBytes8_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x8), _start))\\n        }\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint96 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toBytes12(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 12, \\\"toBytes12_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0xc), _start))\\n        }\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint128 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toBytes16(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes12 tmp)\\n    {\\n        require(_bytes.length >= _start + 16, \\\"toBytes16_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x10), _start))\\n        }\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (uint256 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start)\\n        public\\n        pure\\n        returns (bytes32 tmp)\\n    {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n\\n        assembly {\\n            tmp := mload(add(add(_bytes, 0x20), _start))\\n        }\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes)\\n        public\\n        pure\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                    // the next line is the loop condition:\\n                    // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(bytes storage _preBytes, bytes memory _postBytes)\\n        public\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(\\n                and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)),\\n                2\\n            )\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {\\n\\n                        } eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xd894eac2f223760da25e079d125b4c0de282a6d609a1e8a1834f5dc1c02550d5\",\"license\":\"MIT\"},\"contracts/lib/utils/Integers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * Integers Library updated from https://github.com/willitscale/solidity-util\\n *\\n * In summary this is a simple library of integer functions which allow a simple\\n * conversion to and from strings\\n *\\n * @author Clement Walter <clement0walter@gmail.com>\\n */\\nlibrary Integers {\\n    /**\\n     * To String\\n     *\\n     * Converts an unsigned integer to the string equivalent value, returned as bytes\\n     * Equivalent to javascript's toString(base)\\n     *\\n     * @param _number The unsigned integer to be converted to a string\\n     * @param _base The base to convert the number to\\n     * @param  _padding The target length of the string; result will be padded with 0 to reach this length while padding\\n     *         of 0 means no padding\\n     * @return bytes The resulting ASCII string value\\n     */\\n    function toString(\\n        uint256 _number,\\n        uint8 _base,\\n        uint8 _padding\\n    ) public pure returns (string memory) {\\n        uint256 count = 0;\\n        uint256 b = _number;\\n        while (b != 0) {\\n            count++;\\n            b /= _base;\\n        }\\n        if (_number == 0) {\\n            count++;\\n        }\\n        bytes memory res;\\n        if (_padding == 0) {\\n            res = new bytes(count);\\n        } else {\\n            res = new bytes(_padding);\\n        }\\n        for (uint256 i = 0; i < res.length; ++i) {\\n            b = _number % _base;\\n            if (b < 10) {\\n                res[res.length - i - 1] = bytes1(uint8(b + 48)); // 0-9\\n            } else {\\n                res[res.length - i - 1] = bytes1(uint8((b % 10) + 65)); // A-F\\n            }\\n            _number /= _base;\\n        }\\n\\n        for (uint256 i = count; i < _padding; ++i) {\\n            res[res.length - i - 1] = hex\\\"30\\\"; // 0\\n        }\\n\\n        return string(res);\\n    }\\n\\n    function toString(uint256 _number) public pure returns (string memory) {\\n        return toString(_number, 10, 0);\\n    }\\n\\n    function toString(uint256 _number, uint8 _base)\\n        public\\n        pure\\n        returns (string memory)\\n    {\\n        return toString(_number, _base, 0);\\n    }\\n}\\n\",\"keccak256\":\"0x547aedd7ff0df60ed3dfaf6a7ec21210ed631beb6319de9e32f689f3fcb47a08\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x611a4461003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100de5760003560e01c80635e99a6301161008b578063b674b76111610065578063b674b76114610271578063f258feb1146102ad578063f3ab4be7146102c057600080fd5b80635e99a6301461020f57806369db9ed014610222578063999086e31461025e57600080fd5b80634239abe4116100bc5780634239abe41461018457806343c8ecbe146101975780634d32bd7d146101d357600080fd5b8063146f9480146100e35780632bc4c43014610135578063407134de14610148575b600080fd5b61011f6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525081565b60405161012c9190611021565b60405180910390f35b61011f610143366004611188565b6102d3565b61011f6040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b61011f6101923660046111f3565b610381565b61011f6040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525081565b61011f6040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b61011f61021d366004611393565b61079e565b61011f6040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b61011f61026c366004611412565b610b71565b61011f6040518060400160405280601181526020017f25323725323066696c6c3d25323725323300000000000000000000000000000081525081565b61011f6102bb366004611484565b610d8b565b61011f6102ce3660046114a6565b610d9a565b60606103776102e28584610d9a565b6040517f657fb2e10000000000000000000000000000000000000000000000000000000081527365cE0d8c7f13F821508201B1434b1e726C172c1E9063657fb2e190610332908890600401611503565b600060405180830381865af415801561034f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026c91908101906115f9565b90505b9392505050565b606060006103928560006002610ee4565b6040516326b3515760e11b815273f4B0EbA794Ab6A7803686398a782c909E45c0bD891634d66a2ae916103c89190600401611021565b602060405180830381865af41580156103e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104099190611649565b905083610417600183611680565b61ffff16101561045e57836040517f475e819200000000000000000000000000000000000000000000000000000000815260040161045591906116a5565b60405180910390fd5b60006104a08661046f8760026116b3565b61047a9060026116d2565b6104858860026116b3565b6104909060026116d2565b61049b9060026116d2565b610ee4565b6040516326b3515760e11b815273f4B0EbA794Ab6A7803686398a782c909E45c0bD891634d66a2ae916104d69190600401611021565b602060405180830381865af41580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190611649565b90506000600161053a8861ffff85166105318660026116ea565b61ffff16610ee4565b6040516326b3515760e11b815273f4B0EbA794Ab6A7803686398a782c909E45c0bD891634d66a2ae916105709190600401611021565b602060405180830381865af415801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190611649565b6105bb9190611680565b9050846105c9600183611680565b61ffff16101561060757846040517fab074d5200000000000000000000000000000000000000000000000000000000815260040161045591906116a5565b6000610660886106188860026116b3565b6106238660026116ea565b61ffff1661063191906116d2565b61063c8960026116b3565b6106478760026116ea565b61ffff1661065591906116d2565b61049b9060046116d2565b6040517fbe8b343000000000000000000000000000000000000000000000000000000000815290915061079290899073f4B0EbA794Ab6A7803686398a782c909E45c0bD89063be8b3430906106bc908690600090600401611726565b602060405180830381865af41580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd9190611649565b61070790866116ea565b61ffff168373f4B0EbA794Ab6A7803686398a782c909E45c0bD863be8b3430909160026040518363ffffffff1660e01b8152600401610747929190611726565b602060405180830381865af4158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190611649565b61053190876116ea565b98975050505050505050565b60408051808201909152600f81527f25336372656374253230783d253237000000000000000000000000000000000060208201526060906107e38460fa88901c6116d2565b60405163348051d760e11b8152739F04Fa4a9e2acFd40569E344A6A84408140D239591636900a3ae9161081991906004016116a5565b600060405180830381865af4158015610836573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085e9190810190611746565b60408051808201909152600b81527f253237253230793d25323700000000000000000000000000000000000000000060208201526108a385603f60f48b901c166116d2565b60405163348051d760e11b8152739F04Fa4a9e2acFd40569E344A6A84408140D239591636900a3ae916108d991906004016116a5565b600060405180830381865af41580156108f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261091e9190810190611746565b604080518082018252600f81527f25323725323077696474683d25323700000000000000000000000000000000006020820152905163348051d760e11b8152739F04Fa4a9e2acFd40569E344A6A84408140D239590636900a3ae9061098e90603f60ee8f901c16906004016116a5565b600060405180830381865af41580156109ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d39190810190611746565b6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525060088c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60e01c603f1660ff16739F04Fa4a9e2acFd40569E344A6A84408140D2395636900a3ae90916040518263ffffffff1660e01b8152600401610a6e91906116a5565b600060405180830381865af4158015610a8b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ab39190810190611746565b60408051808201909152601181527f25323725323066696c6c3d25323725323300000000000000000000000000000060208201528c8e6003825191901a908110610aff57610aff611781565b60200260200101516040518060400160405280600781526020017f2532372f25336500000000000000000000000000000000000000000000000000815250604051602001610b579b9a999897969594939291906117b9565b60405160208183030381529060405290505b949350505050565b606060048351610b819190611861565b15610bbb5782516040517fc67eee4b00000000000000000000000000000000000000000000000000000000815260040161045591906116a5565b600060048451610bcb9190611875565b905060008167ffffffffffffffff811115610be857610be8611072565b604051908082528060200260200182016040528015610c1b57816020015b6060815260200190600190039081610c065790505b50905060005b8151811015610cea57610cba73f4B0EbA794Ab6A7803686398a782c909E45c0bD86305d3bb7488610c538560046116b3565b6040518363ffffffff1660e01b8152600401610c70929190611889565b602060405180830381865af4158015610c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb191906118c0565b60e01b86610d8b565b828281518110610ccc57610ccc611781565b60200260200101819052508080610ce2906118e1565b915050610c21565b506040517f9bce4e14000000000000000000000000000000000000000000000000000000008152732eFa2743B863F3Bd6f624Ac0d58445bC5fB62bf690639bce4e1490610d3b90849060040161196c565b600060405180830381865af4158015610d58573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d809190810190611746565b925050505b92915050565b606061037a838360008061079e565b60606000825167ffffffffffffffff811115610db857610db8611072565b604051908082528060200260200182016040528015610deb57816020015b6060815260200190600190039081610dd65790505b50905060005b8351811015610e4e57610e1e8582868481518110610e1157610e11611781565b6020026020010151610381565b828281518110610e3057610e30611781565b60200260200101819052508080610e46906118e1565b915050610df1565b506040517f2a7f1c04000000000000000000000000000000000000000000000000000000008152732eFa2743B863F3Bd6f624Ac0d58445bC5fB62bf690632a7f1c0490610e9f9084906004016119d5565b600060405180830381865af4158015610ebc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b699190810190611746565b606061037784610ef58560016116d2565b610f008560016116d2565b6060833b80610f1f57505060408051602081019091526000815261037a565b80841115610f3d57505060408051602081019091526000815261037a565b83831015610f7d578084846040517f2c4a89fa000000000000000000000000000000000000000000000000000000008152600401610455939291906119e6565b8383038482036000828210610f925782610f94565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b60005b83811015610fda578181015183820152602001610fc2565b83811115610fe9576000848401525b50505050565b6000610ff9825190565b808452602084019350611010818560208601610fbf565b601f01601f19169290920192915050565b6020808252810161037a8184610fef565b600073ffffffffffffffffffffffffffffffffffffffff8216610d85565b61105981611032565b811461106457600080fd5b50565b8035610d8581611050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156110ae576110ae611072565b6040525050565b60006110c060405190565b90506110cc8282611088565b919050565b600067ffffffffffffffff8211156110eb576110eb611072565b5060209081020190565b80611059565b8035610d85816110f5565b6000611119611114846110d1565b6110b5565b8381529050602080820190840283018581111561113857611138600080fd5b835b8181101561115a5761114c87826110fb565b83526020928301920161113a565b5050509392505050565b600082601f83011261117857611178600080fd5b8135610b69848260208601611106565b6000806000606084860312156111a0576111a0600080fd5b60006111ac8686611067565b93505060206111bd86828701611067565b925050604084013567ffffffffffffffff8111156111dd576111dd600080fd5b6111e986828701611164565b9150509250925092565b60008060006060848603121561120b5761120b600080fd5b60006112178686611067565b9350506020611228868287016110fb565b92505060406111e9868287016110fb565b7fffffffff000000000000000000000000000000000000000000000000000000008116611059565b8035610d8581611239565b600067ffffffffffffffff82111561128657611286611072565b601f19601f83011660200192915050565b82818337506000910152565b60006112b16111148461126c565b9050828152602081018484840111156112cc576112cc600080fd5b6112d7848285611297565b509392505050565b600082601f8301126112f3576112f3600080fd5b8135610b698482602086016112a3565b6000611311611114846110d1565b8381529050602080820190840283018581111561133057611330600080fd5b835b8181101561115a57803567ffffffffffffffff81111561135457611354600080fd5b850161136088826112df565b84525060209283019201611332565b600082601f83011261138357611383600080fd5b8135610b69848260208601611303565b600080600080608085870312156113ac576113ac600080fd5b60006113b88787611261565b945050602085013567ffffffffffffffff8111156113d8576113d8600080fd5b6113e48782880161136f565b93505060406113f5878288016110fb565b9250506060611406878288016110fb565b91505092959194509250565b6000806040838503121561142857611428600080fd5b823567ffffffffffffffff81111561144257611442600080fd5b61144e858286016112df565b925050602083013567ffffffffffffffff81111561146e5761146e600080fd5b61147a8582860161136f565b9150509250929050565b6000806040838503121561149a5761149a600080fd5b600061144e8585611261565b600080604083850312156114bc576114bc600080fd5b60006114c88585611067565b925050602083013567ffffffffffffffff8111156114e8576114e8600080fd5b61147a85828601611164565b6114fd81611032565b82525050565b60208101610d8582846114f4565b600061151f6111148461126c565b90508281526020810184848401111561153a5761153a600080fd5b6112d7848285610fbf565b600082601f83011261155957611559600080fd5b8151610b69848260208601611511565b6000611577611114846110d1565b8381529050602080820190840283018581111561159657611596600080fd5b835b8181101561115a57805167ffffffffffffffff8111156115ba576115ba600080fd5b85016115c68882611545565b84525060209283019201611598565b600082601f8301126115e9576115e9600080fd5b8151610b69848260208601611569565b60006020828403121561160e5761160e600080fd5b815167ffffffffffffffff81111561162857611628600080fd5b610b69848285016115d5565b61ffff8116611059565b8051610d8581611634565b60006020828403121561165e5761165e600080fd5b6000610b69848461163e565b634e487b7160e01b600052601160045260246000fd5b61ffff918216911660008282101561169a5761169a61166a565b500390565b806114fd565b60208101610d85828461169f565b60008160001904831182151516156116cd576116cd61166a565b500290565b600082198211156116e5576116e561166a565b500190565b61ffff8116905061ffff8216915060008261ffff038211156116e5576116e561166a565b6000610d8561171a8381565b90565b6114fd8161170e565b604080825281016117378185610fef565b905061037a602083018461171d565b60006020828403121561175b5761175b600080fd5b815167ffffffffffffffff81111561177557611775600080fd5b610b6984828501611545565b634e487b7160e01b600052603260045260246000fd5b60006117a1825190565b6117af818560208601610fbf565b9290920192915050565b6117c3818d611797565b90506117cf818c611797565b90506117db818b611797565b90506117e7818a611797565b90506117f38189611797565b90506117ff8188611797565b905061180b8187611797565b90506118178186611797565b90506118238185611797565b905061182f8184611797565b905061183b8183611797565b9c9b505050505050505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826118705761187061184b565b500690565b6000826118845761188461184b565b500490565b6040808252810161189a8185610fef565b905061037a602083018461169f565b63ffffffff8116611059565b8051610d85816118a9565b6000602082840312156118d5576118d5600080fd5b6000610b6984846118b5565b60006000198214156118f5576118f561166a565b5060010190565b600061037a8383610fef565b6000611912825190565b8084526020840193508360208202850161192c8560200190565b60005b84811015611960578383038852815161194884826118fc565b9350506020820160209890980197915060010161192f565b50909695505050505050565b6020808252810161037a8184611908565b6000611987825190565b808452602084019350836020820285016119a18560200190565b60005b8481101561196057838303885281516119bd84826118fc565b935050602082016020989098019791506001016119a4565b6020808252810161037a818461197d565b606081016119f4828661169f565b611a01602083018561169f565b610b69604083018461169f56fea264697066735822122061abfb172bfb092147f7839412d9a96bf825899e3a27d82bcfd628fdfd3cd5b964736f6c634300080c0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600436106100de5760003560e01c80635e99a6301161008b578063b674b76111610065578063b674b76114610271578063f258feb1146102ad578063f3ab4be7146102c057600080fd5b80635e99a6301461020f57806369db9ed014610222578063999086e31461025e57600080fd5b80634239abe4116100bc5780634239abe41461018457806343c8ecbe146101975780634d32bd7d146101d357600080fd5b8063146f9480146100e35780632bc4c43014610135578063407134de14610148575b600080fd5b61011f6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525081565b60405161012c9190611021565b60405180910390f35b61011f610143366004611188565b6102d3565b61011f6040518060400160405280600781526020017f2532372f2533650000000000000000000000000000000000000000000000000081525081565b61011f6101923660046111f3565b610381565b61011f6040518060400160405280600f81526020017f25323725323077696474683d253237000000000000000000000000000000000081525081565b61011f6040518060400160405280600b81526020017f253237253230793d25323700000000000000000000000000000000000000000081525081565b61011f61021d366004611393565b61079e565b61011f6040518060400160405280600f81526020017f25336372656374253230783d253237000000000000000000000000000000000081525081565b61011f61026c366004611412565b610b71565b61011f6040518060400160405280601181526020017f25323725323066696c6c3d25323725323300000000000000000000000000000081525081565b61011f6102bb366004611484565b610d8b565b61011f6102ce3660046114a6565b610d9a565b60606103776102e28584610d9a565b6040517f657fb2e100000000000000000000000000000000000000000000000000000000815273__$a3a071aacdae8c5bfe97b14bed70ff3096$__9063657fb2e190610332908890600401611503565b600060405180830381865af415801561034f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261026c91908101906115f9565b90505b9392505050565b606060006103928560006002610ee4565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae916103c89190600401611021565b602060405180830381865af41580156103e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104099190611649565b905083610417600183611680565b61ffff16101561045e57836040517f475e819200000000000000000000000000000000000000000000000000000000815260040161045591906116a5565b60405180910390fd5b60006104a08661046f8760026116b3565b61047a9060026116d2565b6104858860026116b3565b6104909060026116d2565b61049b9060026116d2565b610ee4565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae916104d69190600401611021565b602060405180830381865af41580156104f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105179190611649565b90506000600161053a8861ffff85166105318660026116ea565b61ffff16610ee4565b6040516326b3515760e11b815273__$dcaad1777d2b99f53d9a752b008027c0a6$__91634d66a2ae916105709190600401611021565b602060405180830381865af415801561058d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b19190611649565b6105bb9190611680565b9050846105c9600183611680565b61ffff16101561060757846040517fab074d5200000000000000000000000000000000000000000000000000000000815260040161045591906116a5565b6000610660886106188860026116b3565b6106238660026116ea565b61ffff1661063191906116d2565b61063c8960026116b3565b6106478760026116ea565b61ffff1661065591906116d2565b61049b9060046116d2565b6040517fbe8b343000000000000000000000000000000000000000000000000000000000815290915061079290899073__$dcaad1777d2b99f53d9a752b008027c0a6$__9063be8b3430906106bc908690600090600401611726565b602060405180830381865af41580156106d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106fd9190611649565b61070790866116ea565b61ffff168373__$dcaad1777d2b99f53d9a752b008027c0a6$__63be8b3430909160026040518363ffffffff1660e01b8152600401610747929190611726565b602060405180830381865af4158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190611649565b61053190876116ea565b98975050505050505050565b60408051808201909152600f81527f25336372656374253230783d253237000000000000000000000000000000000060208201526060906107e38460fa88901c6116d2565b60405163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__91636900a3ae9161081991906004016116a5565b600060405180830381865af4158015610836573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261085e9190810190611746565b60408051808201909152600b81527f253237253230793d25323700000000000000000000000000000000000000000060208201526108a385603f60f48b901c166116d2565b60405163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__91636900a3ae916108d991906004016116a5565b600060405180830381865af41580156108f6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261091e9190810190611746565b604080518082018252600f81527f25323725323077696474683d25323700000000000000000000000000000000006020820152905163348051d760e11b815273__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__90636900a3ae9061098e90603f60ee8f901c16906004016116a5565b600060405180830381865af41580156109ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526109d39190810190611746565b6040518060400160405280601081526020017f2532372532306865696768743d2532370000000000000000000000000000000081525060088c7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c60e01c603f1660ff1673__$bddea793ab3ab242e0f42fcbbce9ecfcb5$__636900a3ae90916040518263ffffffff1660e01b8152600401610a6e91906116a5565b600060405180830381865af4158015610a8b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ab39190810190611746565b60408051808201909152601181527f25323725323066696c6c3d25323725323300000000000000000000000000000060208201528c8e6003825191901a908110610aff57610aff611781565b60200260200101516040518060400160405280600781526020017f2532372f25336500000000000000000000000000000000000000000000000000815250604051602001610b579b9a999897969594939291906117b9565b60405160208183030381529060405290505b949350505050565b606060048351610b819190611861565b15610bbb5782516040517fc67eee4b00000000000000000000000000000000000000000000000000000000815260040161045591906116a5565b600060048451610bcb9190611875565b905060008167ffffffffffffffff811115610be857610be8611072565b604051908082528060200260200182016040528015610c1b57816020015b6060815260200190600190039081610c065790505b50905060005b8151811015610cea57610cba73__$dcaad1777d2b99f53d9a752b008027c0a6$__6305d3bb7488610c538560046116b3565b6040518363ffffffff1660e01b8152600401610c70929190611889565b602060405180830381865af4158015610c8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb191906118c0565b60e01b86610d8b565b828281518110610ccc57610ccc611781565b60200260200101819052508080610ce2906118e1565b915050610c21565b506040517f9bce4e1400000000000000000000000000000000000000000000000000000000815273__$3d939fd680257e7df63fc3436eced304ff$__90639bce4e1490610d3b90849060040161196c565b600060405180830381865af4158015610d58573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d809190810190611746565b925050505b92915050565b606061037a838360008061079e565b60606000825167ffffffffffffffff811115610db857610db8611072565b604051908082528060200260200182016040528015610deb57816020015b6060815260200190600190039081610dd65790505b50905060005b8351811015610e4e57610e1e8582868481518110610e1157610e11611781565b6020026020010151610381565b828281518110610e3057610e30611781565b60200260200101819052508080610e46906118e1565b915050610df1565b506040517f2a7f1c0400000000000000000000000000000000000000000000000000000000815273__$3d939fd680257e7df63fc3436eced304ff$__90632a7f1c0490610e9f9084906004016119d5565b600060405180830381865af4158015610ebc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b699190810190611746565b606061037784610ef58560016116d2565b610f008560016116d2565b6060833b80610f1f57505060408051602081019091526000815261037a565b80841115610f3d57505060408051602081019091526000815261037a565b83831015610f7d578084846040517f2c4a89fa000000000000000000000000000000000000000000000000000000008152600401610455939291906119e6565b8383038482036000828210610f925782610f94565b815b60408051603f8301601f19168101909152818152955090508087602087018a3c505050509392505050565b60005b83811015610fda578181015183820152602001610fc2565b83811115610fe9576000848401525b50505050565b6000610ff9825190565b808452602084019350611010818560208601610fbf565b601f01601f19169290920192915050565b6020808252810161037a8184610fef565b600073ffffffffffffffffffffffffffffffffffffffff8216610d85565b61105981611032565b811461106457600080fd5b50565b8035610d8581611050565b634e487b7160e01b600052604160045260246000fd5b601f19601f830116810181811067ffffffffffffffff821117156110ae576110ae611072565b6040525050565b60006110c060405190565b90506110cc8282611088565b919050565b600067ffffffffffffffff8211156110eb576110eb611072565b5060209081020190565b80611059565b8035610d85816110f5565b6000611119611114846110d1565b6110b5565b8381529050602080820190840283018581111561113857611138600080fd5b835b8181101561115a5761114c87826110fb565b83526020928301920161113a565b5050509392505050565b600082601f83011261117857611178600080fd5b8135610b69848260208601611106565b6000806000606084860312156111a0576111a0600080fd5b60006111ac8686611067565b93505060206111bd86828701611067565b925050604084013567ffffffffffffffff8111156111dd576111dd600080fd5b6111e986828701611164565b9150509250925092565b60008060006060848603121561120b5761120b600080fd5b60006112178686611067565b9350506020611228868287016110fb565b92505060406111e9868287016110fb565b7fffffffff000000000000000000000000000000000000000000000000000000008116611059565b8035610d8581611239565b600067ffffffffffffffff82111561128657611286611072565b601f19601f83011660200192915050565b82818337506000910152565b60006112b16111148461126c565b9050828152602081018484840111156112cc576112cc600080fd5b6112d7848285611297565b509392505050565b600082601f8301126112f3576112f3600080fd5b8135610b698482602086016112a3565b6000611311611114846110d1565b8381529050602080820190840283018581111561133057611330600080fd5b835b8181101561115a57803567ffffffffffffffff81111561135457611354600080fd5b850161136088826112df565b84525060209283019201611332565b600082601f83011261138357611383600080fd5b8135610b69848260208601611303565b600080600080608085870312156113ac576113ac600080fd5b60006113b88787611261565b945050602085013567ffffffffffffffff8111156113d8576113d8600080fd5b6113e48782880161136f565b93505060406113f5878288016110fb565b9250506060611406878288016110fb565b91505092959194509250565b6000806040838503121561142857611428600080fd5b823567ffffffffffffffff81111561144257611442600080fd5b61144e858286016112df565b925050602083013567ffffffffffffffff81111561146e5761146e600080fd5b61147a8582860161136f565b9150509250929050565b6000806040838503121561149a5761149a600080fd5b600061144e8585611261565b600080604083850312156114bc576114bc600080fd5b60006114c88585611067565b925050602083013567ffffffffffffffff8111156114e8576114e8600080fd5b61147a85828601611164565b6114fd81611032565b82525050565b60208101610d8582846114f4565b600061151f6111148461126c565b90508281526020810184848401111561153a5761153a600080fd5b6112d7848285610fbf565b600082601f83011261155957611559600080fd5b8151610b69848260208601611511565b6000611577611114846110d1565b8381529050602080820190840283018581111561159657611596600080fd5b835b8181101561115a57805167ffffffffffffffff8111156115ba576115ba600080fd5b85016115c68882611545565b84525060209283019201611598565b600082601f8301126115e9576115e9600080fd5b8151610b69848260208601611569565b60006020828403121561160e5761160e600080fd5b815167ffffffffffffffff81111561162857611628600080fd5b610b69848285016115d5565b61ffff8116611059565b8051610d8581611634565b60006020828403121561165e5761165e600080fd5b6000610b69848461163e565b634e487b7160e01b600052601160045260246000fd5b61ffff918216911660008282101561169a5761169a61166a565b500390565b806114fd565b60208101610d85828461169f565b60008160001904831182151516156116cd576116cd61166a565b500290565b600082198211156116e5576116e561166a565b500190565b61ffff8116905061ffff8216915060008261ffff038211156116e5576116e561166a565b6000610d8561171a8381565b90565b6114fd8161170e565b604080825281016117378185610fef565b905061037a602083018461171d565b60006020828403121561175b5761175b600080fd5b815167ffffffffffffffff81111561177557611775600080fd5b610b6984828501611545565b634e487b7160e01b600052603260045260246000fd5b60006117a1825190565b6117af818560208601610fbf565b9290920192915050565b6117c3818d611797565b90506117cf818c611797565b90506117db818b611797565b90506117e7818a611797565b90506117f38189611797565b90506117ff8188611797565b905061180b8187611797565b90506118178186611797565b90506118238185611797565b905061182f8184611797565b905061183b8183611797565b9c9b505050505050505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826118705761187061184b565b500690565b6000826118845761188461184b565b500490565b6040808252810161189a8185610fef565b905061037a602083018461169f565b63ffffffff8116611059565b8051610d85816118a9565b6000602082840312156118d5576118d5600080fd5b6000610b6984846118b5565b60006000198214156118f5576118f561166a565b5060010190565b600061037a8383610fef565b6000611912825190565b8084526020840193508360208202850161192c8560200190565b60005b84811015611960578383038852815161194884826118fc565b9350506020820160209890980197915060010161192f565b50909695505050505050565b6020808252810161037a8184611908565b6000611987825190565b808452602084019350836020820285016119a18560200190565b60005b8481101561196057838303885281516119bd84826118fc565b935050602082016020989098019791506001016119a4565b6020808252810161037a818461197d565b606081016119f4828661169f565b611a01602083018561169f565b610b69604083018461169f56fea264697066735822122061abfb172bfb092147f7839412d9a96bf825899e3a27d82bcfd628fdfd3cd5b964736f6c634300080c0033",
  "libraries": {
    "Array": "0x2eFa2743B863F3Bd6f624Ac0d58445bC5fB62bf6",
    "Bytes": "0xf4B0EbA794Ab6A7803686398a782c909E45c0bD8",
    "Integers": "0x9F04Fa4a9e2acFd40569E344A6A84408140D2395",
    "RendererCommons": "0x65cE0d8c7f13F821508201B1434b1e726C172c1E"
  },
  "devdoc": {
    "author": "Clement Walter <clement0walter@gmail.com>",
    "kind": "dev",
    "methods": {
      "decodeBytesMemoryToRects(bytes,string[])": {
        "details": "Decode a bytes array.",
        "params": {
          "palette": "The image palette.",
          "rectsBytes": "The bytes concatenating several rects, typically from getTraitsBytes"
        },
        "returns": {
          "_0": "A string of all the decoded rects."
        }
      },
      "decodeImage(address,address,uint256[])": {
        "details": "Get the inner part (without the header) of an image, ie the concatenated list of <rect>s.",
        "params": {
          "collectionPointer": "The address of the SSTORE2 contract for the traits.",
          "items": "A list of trait indexes, should be of the same length as the number of characteristics.",
          "palettePointer": "The address of the SSTORE2 contract for the palette."
        },
        "returns": {
          "_0": "The inner part of the svg as a string."
        }
      },
      "getTraitBytes(address,uint256,uint256)": {
        "details": "Retrieve the bytes for the given trait from the traits storage.",
        "params": {
          "characteristicIndex": "The index of the characteristic in the collection.",
          "pointer": "The pointer to the traits stored with SSTORE2.",
          "traitIndex": "The index of the trait in the characteristic."
        },
        "returns": {
          "_0": "The bytes of the trait."
        }
      },
      "imageBytes(address,uint256[])": {
        "details": "Usually, an image is made of a selection of one trait in each characteristic. This function can then be  used to get the single bytes array containing all the data for a given token (set of traits).",
        "params": {
          "items": "A list of trait indexes, should be of the same length as the number of characteristics.",
          "pointer": "The address of the SSTORE2 contract."
        },
        "returns": {
          "_0": "The bytes array for the whole image."
        }
      }
    },
    "title": "RectRenderer   This library can be used to render on-chain images stored as a layering of rectangles.   The returned images is an url safe encoded image uri.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}